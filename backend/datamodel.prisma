scalar DateTime

type User {
  id: ID! @id
  tmcId: Int @unique
  role: Role!
  workspaceParticipations: [WorkspaceParticipant!]! @relation(name:"WorkspaceParticipantUser")
  projectParticipations: [ProjectParticipant!]! @relation(name:"ProjectParticipantUser")
  createdAt: DateTime! @createdAt
  guideProgress: Int! @default(value: 0)
}


enum Role {
  GUEST
  STUDENT
  STAFF
  ADMIN
}

enum Privilege {
  VIEW,
  EDIT,
  INVITE,
  OWNER
}

type Project {
  id: ID! @id
  name: String!
  workspaces: [Workspace!]! @relation(name: "UserWorkspaces")
  template: Workspace @relation(link: INLINE, name:"Template")
  participants: [ProjectParticipant!]! @relation(name: "ProjectParticipantProject")
  tokens: [ProjectToken!]!
}

type Workspace {
  id: ID! @id
  name: String!
  project: Project @relation(name: "UserWorkspaces")
  public: Boolean! @default(value: false)
  defaultCourse: Course @relation(link: INLINE, name:"DefaultCourse", onDelete: CASCADE)
  courses: [Course!]! @relation(name:"WorkspaceCourses", onDelete: CASCADE)
  concepts: [Concept!]! @relation(name:"WorkspaceConcepts", onDelete: CASCADE)
  conceptLinks: [ConceptLink!]! @relation(name:"WorkspaceConceptLinks", onDelete: CASCADE)
  courseLinks: [CourseLink!]! @relation(name:"WorkspaceCourseLinks", onDelete: CASCADE)
  participants: [WorkspaceParticipant!]! @relation(name: "WorkspaceParticipantWorkspace")
  tokens: [WorkspaceToken!]!
}

type WorkspaceParticipant {
  id: ID! @id
  privilege: Privilege!
  workspace: Workspace! @relation(name:"WorkspaceParticipantWorkspace")
  token: WorkspaceToken! @relation(name:"WorkspaceParticipationToken")
  user: User! @relation(name:"WorkspaceParticipantUser")
}

type ProjectParticipant {
  id: ID! @id
  privilege: Privilege!
  project: Project! @relation(name:"ProjectParticipantProject")
  token: ProjectToken! @relation(name:"ProjectParticipationToken")
  user: User! @relation(name:"ProjectParticipantUser")
}

interface Token {
  id: ID! @id
  privilege: Privilege!
  revoked: Boolean!
  secret: String!
}

type WorkspaceToken implements Token {
  id: ID! @id
  participants: [WorkspaceParticipant!]! @relation(name:"WorkspaceParticipationToken")
}

type ProjectToken implements Token {
  id: ID! @id
  participants: [ProjectParticipant!]! @relation(name:"ProjectParticipationToken")
}

type CourseLink {
  id: ID! @id
  from: Course! @relation(link: INLINE, name: "FromCourse")
  to: Course! @relation(link: INLINE, name: "ToCourse")
  official: Boolean! @default(value: false)
  createdBy: User!
  workspace: Workspace! @relation(link: INLINE, name:"WorkspaceCourseLinks")
}

type Course {
  id: ID! @id
  name: String!
  createdBy: User!
  linksFromCourse: [CourseLink!]! @relation(name: "FromCourse", onDelete: CASCADE)
  linksToCourse: [CourseLink!]! @relation(name: "ToCourse", onDelete: CASCADE)
  concepts: [Concept!]! @relation(name:"Courses")
  workspace: Workspace! @relation(link: INLINE, name:"WorkspaceCourses")
}

type ConceptLink { 
  id: ID! @id
  from: Concept! @relation(link: INLINE, name: "FromConcept")
  to: Concept! @relation(link: INLINE, name: "ToConcept")
  official: Boolean! @default(value: false)
  workspace: Workspace! @relation(link: INLINE, name:"WorkspaceConceptLinks")
  createdBy: User!
}

type Concept {
  id: ID! @id
  name: String!
  description: String
  official: Boolean! @default(value: false)
  createdBy: User!
  linksFromConcept: [ConceptLink!]! @relation(name: "FromConcept", onDelete: CASCADE)
  linksToConcept: [ConceptLink!]! @relation(name: "ToConcept", onDelete: CASCADE)
  courses: [Course!]! @relation(name: "Courses")
  resources: [Resource!]!
  workspace: Workspace! @relation(link: INLINE, name:"WorkspaceConcepts")
}

type Resource {
  id: ID! @id
  concept: Concept!
  name: String!
  description: String!
  urls: [URL!]!
}

type URL {
  id: ID! @id
  address: String!
  resource: Resource!
}