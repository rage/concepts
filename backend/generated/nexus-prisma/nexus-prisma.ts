/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      User: UserObject
      Workspace: WorkspaceObject
      Project: ProjectObject
      Course: CourseObject
      CourseLink: CourseLinkObject
      Concept: ConceptObject
      ConceptLink: ConceptLinkObject
      Resource: ResourceObject
      URL: URLObject
      UserConnection: UserConnectionObject
      PageInfo: PageInfoObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      ProjectConnection: ProjectConnectionObject
      ProjectEdge: ProjectEdgeObject
      AggregateProject: AggregateProjectObject
      WorkspaceConnection: WorkspaceConnectionObject
      WorkspaceEdge: WorkspaceEdgeObject
      AggregateWorkspace: AggregateWorkspaceObject
      CourseLinkConnection: CourseLinkConnectionObject
      CourseLinkEdge: CourseLinkEdgeObject
      AggregateCourseLink: AggregateCourseLinkObject
      CourseConnection: CourseConnectionObject
      CourseEdge: CourseEdgeObject
      AggregateCourse: AggregateCourseObject
      ConceptLinkConnection: ConceptLinkConnectionObject
      ConceptLinkEdge: ConceptLinkEdgeObject
      AggregateConceptLink: AggregateConceptLinkObject
      ConceptConnection: ConceptConnectionObject
      ConceptEdge: ConceptEdgeObject
      AggregateConcept: AggregateConceptObject
      ResourceConnection: ResourceConnectionObject
      ResourceEdge: ResourceEdgeObject
      AggregateResource: AggregateResourceObject
      URLConnection: URLConnectionObject
      URLEdge: URLEdgeObject
      AggregateURL: AggregateURLObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
      ProjectSubscriptionPayload: ProjectSubscriptionPayloadObject
      ProjectPreviousValues: ProjectPreviousValuesObject
      WorkspaceSubscriptionPayload: WorkspaceSubscriptionPayloadObject
      WorkspacePreviousValues: WorkspacePreviousValuesObject
      CourseLinkSubscriptionPayload: CourseLinkSubscriptionPayloadObject
      CourseLinkPreviousValues: CourseLinkPreviousValuesObject
      CourseSubscriptionPayload: CourseSubscriptionPayloadObject
      CoursePreviousValues: CoursePreviousValuesObject
      ConceptLinkSubscriptionPayload: ConceptLinkSubscriptionPayloadObject
      ConceptLinkPreviousValues: ConceptLinkPreviousValuesObject
      ConceptSubscriptionPayload: ConceptSubscriptionPayloadObject
      ConceptPreviousValues: ConceptPreviousValuesObject
      ResourceSubscriptionPayload: ResourceSubscriptionPayloadObject
      ResourcePreviousValues: ResourcePreviousValuesObject
      URLSubscriptionPayload: URLSubscriptionPayloadObject
      URLPreviousValues: URLPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      User: UserFieldDetails
      Workspace: WorkspaceFieldDetails
      Project: ProjectFieldDetails
      Course: CourseFieldDetails
      CourseLink: CourseLinkFieldDetails
      Concept: ConceptFieldDetails
      ConceptLink: ConceptLinkFieldDetails
      Resource: ResourceFieldDetails
      URL: URLFieldDetails
      UserConnection: UserConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      ProjectConnection: ProjectConnectionFieldDetails
      ProjectEdge: ProjectEdgeFieldDetails
      AggregateProject: AggregateProjectFieldDetails
      WorkspaceConnection: WorkspaceConnectionFieldDetails
      WorkspaceEdge: WorkspaceEdgeFieldDetails
      AggregateWorkspace: AggregateWorkspaceFieldDetails
      CourseLinkConnection: CourseLinkConnectionFieldDetails
      CourseLinkEdge: CourseLinkEdgeFieldDetails
      AggregateCourseLink: AggregateCourseLinkFieldDetails
      CourseConnection: CourseConnectionFieldDetails
      CourseEdge: CourseEdgeFieldDetails
      AggregateCourse: AggregateCourseFieldDetails
      ConceptLinkConnection: ConceptLinkConnectionFieldDetails
      ConceptLinkEdge: ConceptLinkEdgeFieldDetails
      AggregateConceptLink: AggregateConceptLinkFieldDetails
      ConceptConnection: ConceptConnectionFieldDetails
      ConceptEdge: ConceptEdgeFieldDetails
      AggregateConcept: AggregateConceptFieldDetails
      ResourceConnection: ResourceConnectionFieldDetails
      ResourceEdge: ResourceEdgeFieldDetails
      AggregateResource: AggregateResourceFieldDetails
      URLConnection: URLConnectionFieldDetails
      URLEdge: URLEdgeFieldDetails
      AggregateURL: AggregateURLFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
      ProjectSubscriptionPayload: ProjectSubscriptionPayloadFieldDetails
      ProjectPreviousValues: ProjectPreviousValuesFieldDetails
      WorkspaceSubscriptionPayload: WorkspaceSubscriptionPayloadFieldDetails
      WorkspacePreviousValues: WorkspacePreviousValuesFieldDetails
      CourseLinkSubscriptionPayload: CourseLinkSubscriptionPayloadFieldDetails
      CourseLinkPreviousValues: CourseLinkPreviousValuesFieldDetails
      CourseSubscriptionPayload: CourseSubscriptionPayloadFieldDetails
      CoursePreviousValues: CoursePreviousValuesFieldDetails
      ConceptLinkSubscriptionPayload: ConceptLinkSubscriptionPayloadFieldDetails
      ConceptLinkPreviousValues: ConceptLinkPreviousValuesFieldDetails
      ConceptSubscriptionPayload: ConceptSubscriptionPayloadFieldDetails
      ConceptPreviousValues: ConceptPreviousValuesFieldDetails
      ResourceSubscriptionPayload: ResourceSubscriptionPayloadFieldDetails
      ResourcePreviousValues: ResourcePreviousValuesFieldDetails
      URLSubscriptionPayload: URLSubscriptionPayloadFieldDetails
      URLPreviousValues: URLPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      WorkspaceWhereInput: WorkspaceWhereInputInputObject
      ProjectWhereInput: ProjectWhereInputInputObject
      UserWhereInput: UserWhereInputInputObject
      CourseWhereInput: CourseWhereInputInputObject
      CourseLinkWhereInput: CourseLinkWhereInputInputObject
      ConceptWhereInput: ConceptWhereInputInputObject
      ConceptLinkWhereInput: ConceptLinkWhereInputInputObject
      ResourceWhereInput: ResourceWhereInputInputObject
      URLWhereInput: URLWhereInputInputObject
      ProjectWhereUniqueInput: ProjectWhereUniqueInputInputObject
      WorkspaceWhereUniqueInput: WorkspaceWhereUniqueInputInputObject
      CourseLinkWhereUniqueInput: CourseLinkWhereUniqueInputInputObject
      CourseWhereUniqueInput: CourseWhereUniqueInputInputObject
      ConceptLinkWhereUniqueInput: ConceptLinkWhereUniqueInputInputObject
      ConceptWhereUniqueInput: ConceptWhereUniqueInputInputObject
      ResourceWhereUniqueInput: ResourceWhereUniqueInputInputObject
      URLWhereUniqueInput: URLWhereUniqueInputInputObject
      UserCreateInput: UserCreateInputInputObject
      WorkspaceCreateManyWithoutOwnerInput: WorkspaceCreateManyWithoutOwnerInputInputObject
      WorkspaceCreateWithoutOwnerInput: WorkspaceCreateWithoutOwnerInputInputObject
      ProjectCreateOneWithoutWorkspacesInput: ProjectCreateOneWithoutWorkspacesInputInputObject
      ProjectCreateWithoutWorkspacesInput: ProjectCreateWithoutWorkspacesInputInputObject
      UserCreateOneWithoutAsProjectOwnerInput: UserCreateOneWithoutAsProjectOwnerInputInputObject
      UserCreateWithoutAsProjectOwnerInput: UserCreateWithoutAsProjectOwnerInputInputObject
      ProjectCreateManyWithoutParticipantsInput: ProjectCreateManyWithoutParticipantsInputInputObject
      ProjectCreateWithoutParticipantsInput: ProjectCreateWithoutParticipantsInputInputObject
      WorkspaceCreateManyWithoutProjectInput: WorkspaceCreateManyWithoutProjectInputInputObject
      WorkspaceCreateWithoutProjectInput: WorkspaceCreateWithoutProjectInputInputObject
      UserCreateOneWithoutAsWorkspaceOwnerInput: UserCreateOneWithoutAsWorkspaceOwnerInputInputObject
      UserCreateWithoutAsWorkspaceOwnerInput: UserCreateWithoutAsWorkspaceOwnerInputInputObject
      ProjectCreateManyWithoutOwnerInput: ProjectCreateManyWithoutOwnerInputInputObject
      ProjectCreateWithoutOwnerInput: ProjectCreateWithoutOwnerInputInputObject
      UserCreateManyWithoutAsProjectParticipantInput: UserCreateManyWithoutAsProjectParticipantInputInputObject
      UserCreateWithoutAsProjectParticipantInput: UserCreateWithoutAsProjectParticipantInputInputObject
      WorkspaceCreateOneInput: WorkspaceCreateOneInputInputObject
      WorkspaceCreateInput: WorkspaceCreateInputInputObject
      CourseCreateOneInput: CourseCreateOneInputInputObject
      CourseCreateInput: CourseCreateInputInputObject
      UserCreateOneInput: UserCreateOneInputInputObject
      CourseLinkCreateManyWithoutFromInput: CourseLinkCreateManyWithoutFromInputInputObject
      CourseLinkCreateWithoutFromInput: CourseLinkCreateWithoutFromInputInputObject
      CourseCreateOneWithoutLinksToCourseInput: CourseCreateOneWithoutLinksToCourseInputInputObject
      CourseCreateWithoutLinksToCourseInput: CourseCreateWithoutLinksToCourseInputInputObject
      ConceptCreateManyWithoutCoursesInput: ConceptCreateManyWithoutCoursesInputInputObject
      ConceptCreateWithoutCoursesInput: ConceptCreateWithoutCoursesInputInputObject
      ConceptLinkCreateManyWithoutFromInput: ConceptLinkCreateManyWithoutFromInputInputObject
      ConceptLinkCreateWithoutFromInput: ConceptLinkCreateWithoutFromInputInputObject
      ConceptCreateOneWithoutLinksToConceptInput: ConceptCreateOneWithoutLinksToConceptInputInputObject
      ConceptCreateWithoutLinksToConceptInput: ConceptCreateWithoutLinksToConceptInputInputObject
      CourseCreateManyWithoutConceptsInput: CourseCreateManyWithoutConceptsInputInputObject
      CourseCreateWithoutConceptsInput: CourseCreateWithoutConceptsInputInputObject
      CourseLinkCreateManyWithoutToInput: CourseLinkCreateManyWithoutToInputInputObject
      CourseLinkCreateWithoutToInput: CourseLinkCreateWithoutToInputInputObject
      CourseCreateOneWithoutLinksFromCourseInput: CourseCreateOneWithoutLinksFromCourseInputInputObject
      CourseCreateWithoutLinksFromCourseInput: CourseCreateWithoutLinksFromCourseInputInputObject
      WorkspaceCreateOneWithoutCoursesInput: WorkspaceCreateOneWithoutCoursesInputInputObject
      WorkspaceCreateWithoutCoursesInput: WorkspaceCreateWithoutCoursesInputInputObject
      ConceptCreateManyWithoutWorkspaceInput: ConceptCreateManyWithoutWorkspaceInputInputObject
      ConceptCreateWithoutWorkspaceInput: ConceptCreateWithoutWorkspaceInputInputObject
      ConceptLinkCreateManyWithoutToInput: ConceptLinkCreateManyWithoutToInputInputObject
      ConceptLinkCreateWithoutToInput: ConceptLinkCreateWithoutToInputInputObject
      ConceptCreateOneWithoutLinksFromConceptInput: ConceptCreateOneWithoutLinksFromConceptInputInputObject
      ConceptCreateWithoutLinksFromConceptInput: ConceptCreateWithoutLinksFromConceptInputInputObject
      ResourceCreateManyWithoutConceptInput: ResourceCreateManyWithoutConceptInputInputObject
      ResourceCreateWithoutConceptInput: ResourceCreateWithoutConceptInputInputObject
      URLCreateManyWithoutResourceInput: URLCreateManyWithoutResourceInputInputObject
      URLCreateWithoutResourceInput: URLCreateWithoutResourceInputInputObject
      WorkspaceCreateOneWithoutConceptsInput: WorkspaceCreateOneWithoutConceptsInputInputObject
      WorkspaceCreateWithoutConceptsInput: WorkspaceCreateWithoutConceptsInputInputObject
      CourseCreateManyWithoutWorkspaceInput: CourseCreateManyWithoutWorkspaceInputInputObject
      CourseCreateWithoutWorkspaceInput: CourseCreateWithoutWorkspaceInputInputObject
      ConceptLinkCreateManyWithoutWorkspaceInput: ConceptLinkCreateManyWithoutWorkspaceInputInputObject
      ConceptLinkCreateWithoutWorkspaceInput: ConceptLinkCreateWithoutWorkspaceInputInputObject
      CourseLinkCreateManyWithoutWorkspaceInput: CourseLinkCreateManyWithoutWorkspaceInputInputObject
      CourseLinkCreateWithoutWorkspaceInput: CourseLinkCreateWithoutWorkspaceInputInputObject
      WorkspaceCreateOneWithoutConceptLinksInput: WorkspaceCreateOneWithoutConceptLinksInputInputObject
      WorkspaceCreateWithoutConceptLinksInput: WorkspaceCreateWithoutConceptLinksInputInputObject
      WorkspaceCreateOneWithoutCourseLinksInput: WorkspaceCreateOneWithoutCourseLinksInputInputObject
      WorkspaceCreateWithoutCourseLinksInput: WorkspaceCreateWithoutCourseLinksInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      WorkspaceUpdateManyWithoutOwnerInput: WorkspaceUpdateManyWithoutOwnerInputInputObject
      WorkspaceUpdateWithWhereUniqueWithoutOwnerInput: WorkspaceUpdateWithWhereUniqueWithoutOwnerInputInputObject
      WorkspaceUpdateWithoutOwnerDataInput: WorkspaceUpdateWithoutOwnerDataInputInputObject
      ProjectUpdateOneWithoutWorkspacesInput: ProjectUpdateOneWithoutWorkspacesInputInputObject
      ProjectUpdateWithoutWorkspacesDataInput: ProjectUpdateWithoutWorkspacesDataInputInputObject
      UserUpdateOneRequiredWithoutAsProjectOwnerInput: UserUpdateOneRequiredWithoutAsProjectOwnerInputInputObject
      UserUpdateWithoutAsProjectOwnerDataInput: UserUpdateWithoutAsProjectOwnerDataInputInputObject
      ProjectUpdateManyWithoutParticipantsInput: ProjectUpdateManyWithoutParticipantsInputInputObject
      ProjectUpdateWithWhereUniqueWithoutParticipantsInput: ProjectUpdateWithWhereUniqueWithoutParticipantsInputInputObject
      ProjectUpdateWithoutParticipantsDataInput: ProjectUpdateWithoutParticipantsDataInputInputObject
      WorkspaceUpdateManyWithoutProjectInput: WorkspaceUpdateManyWithoutProjectInputInputObject
      WorkspaceUpdateWithWhereUniqueWithoutProjectInput: WorkspaceUpdateWithWhereUniqueWithoutProjectInputInputObject
      WorkspaceUpdateWithoutProjectDataInput: WorkspaceUpdateWithoutProjectDataInputInputObject
      UserUpdateOneWithoutAsWorkspaceOwnerInput: UserUpdateOneWithoutAsWorkspaceOwnerInputInputObject
      UserUpdateWithoutAsWorkspaceOwnerDataInput: UserUpdateWithoutAsWorkspaceOwnerDataInputInputObject
      ProjectUpdateManyWithoutOwnerInput: ProjectUpdateManyWithoutOwnerInputInputObject
      ProjectUpdateWithWhereUniqueWithoutOwnerInput: ProjectUpdateWithWhereUniqueWithoutOwnerInputInputObject
      ProjectUpdateWithoutOwnerDataInput: ProjectUpdateWithoutOwnerDataInputInputObject
      UserUpdateManyWithoutAsProjectParticipantInput: UserUpdateManyWithoutAsProjectParticipantInputInputObject
      UserUpdateWithWhereUniqueWithoutAsProjectParticipantInput: UserUpdateWithWhereUniqueWithoutAsProjectParticipantInputInputObject
      UserUpdateWithoutAsProjectParticipantDataInput: UserUpdateWithoutAsProjectParticipantDataInputInputObject
      UserUpsertWithWhereUniqueWithoutAsProjectParticipantInput: UserUpsertWithWhereUniqueWithoutAsProjectParticipantInputInputObject
      UserScalarWhereInput: UserScalarWhereInputInputObject
      UserUpdateManyWithWhereNestedInput: UserUpdateManyWithWhereNestedInputInputObject
      UserUpdateManyDataInput: UserUpdateManyDataInputInputObject
      WorkspaceUpdateOneInput: WorkspaceUpdateOneInputInputObject
      WorkspaceUpdateDataInput: WorkspaceUpdateDataInputInputObject
      CourseUpdateOneInput: CourseUpdateOneInputInputObject
      CourseUpdateDataInput: CourseUpdateDataInputInputObject
      UserUpdateOneRequiredInput: UserUpdateOneRequiredInputInputObject
      UserUpdateDataInput: UserUpdateDataInputInputObject
      UserUpsertNestedInput: UserUpsertNestedInputInputObject
      CourseLinkUpdateManyWithoutFromInput: CourseLinkUpdateManyWithoutFromInputInputObject
      CourseLinkUpdateWithWhereUniqueWithoutFromInput: CourseLinkUpdateWithWhereUniqueWithoutFromInputInputObject
      CourseLinkUpdateWithoutFromDataInput: CourseLinkUpdateWithoutFromDataInputInputObject
      CourseUpdateOneRequiredWithoutLinksToCourseInput: CourseUpdateOneRequiredWithoutLinksToCourseInputInputObject
      CourseUpdateWithoutLinksToCourseDataInput: CourseUpdateWithoutLinksToCourseDataInputInputObject
      ConceptUpdateManyWithoutCoursesInput: ConceptUpdateManyWithoutCoursesInputInputObject
      ConceptUpdateWithWhereUniqueWithoutCoursesInput: ConceptUpdateWithWhereUniqueWithoutCoursesInputInputObject
      ConceptUpdateWithoutCoursesDataInput: ConceptUpdateWithoutCoursesDataInputInputObject
      ConceptLinkUpdateManyWithoutFromInput: ConceptLinkUpdateManyWithoutFromInputInputObject
      ConceptLinkUpdateWithWhereUniqueWithoutFromInput: ConceptLinkUpdateWithWhereUniqueWithoutFromInputInputObject
      ConceptLinkUpdateWithoutFromDataInput: ConceptLinkUpdateWithoutFromDataInputInputObject
      ConceptUpdateOneRequiredWithoutLinksToConceptInput: ConceptUpdateOneRequiredWithoutLinksToConceptInputInputObject
      ConceptUpdateWithoutLinksToConceptDataInput: ConceptUpdateWithoutLinksToConceptDataInputInputObject
      CourseUpdateManyWithoutConceptsInput: CourseUpdateManyWithoutConceptsInputInputObject
      CourseUpdateWithWhereUniqueWithoutConceptsInput: CourseUpdateWithWhereUniqueWithoutConceptsInputInputObject
      CourseUpdateWithoutConceptsDataInput: CourseUpdateWithoutConceptsDataInputInputObject
      CourseLinkUpdateManyWithoutToInput: CourseLinkUpdateManyWithoutToInputInputObject
      CourseLinkUpdateWithWhereUniqueWithoutToInput: CourseLinkUpdateWithWhereUniqueWithoutToInputInputObject
      CourseLinkUpdateWithoutToDataInput: CourseLinkUpdateWithoutToDataInputInputObject
      CourseUpdateOneRequiredWithoutLinksFromCourseInput: CourseUpdateOneRequiredWithoutLinksFromCourseInputInputObject
      CourseUpdateWithoutLinksFromCourseDataInput: CourseUpdateWithoutLinksFromCourseDataInputInputObject
      WorkspaceUpdateOneRequiredWithoutCoursesInput: WorkspaceUpdateOneRequiredWithoutCoursesInputInputObject
      WorkspaceUpdateWithoutCoursesDataInput: WorkspaceUpdateWithoutCoursesDataInputInputObject
      ConceptUpdateManyWithoutWorkspaceInput: ConceptUpdateManyWithoutWorkspaceInputInputObject
      ConceptUpdateWithWhereUniqueWithoutWorkspaceInput: ConceptUpdateWithWhereUniqueWithoutWorkspaceInputInputObject
      ConceptUpdateWithoutWorkspaceDataInput: ConceptUpdateWithoutWorkspaceDataInputInputObject
      ConceptLinkUpdateManyWithoutToInput: ConceptLinkUpdateManyWithoutToInputInputObject
      ConceptLinkUpdateWithWhereUniqueWithoutToInput: ConceptLinkUpdateWithWhereUniqueWithoutToInputInputObject
      ConceptLinkUpdateWithoutToDataInput: ConceptLinkUpdateWithoutToDataInputInputObject
      ConceptUpdateOneRequiredWithoutLinksFromConceptInput: ConceptUpdateOneRequiredWithoutLinksFromConceptInputInputObject
      ConceptUpdateWithoutLinksFromConceptDataInput: ConceptUpdateWithoutLinksFromConceptDataInputInputObject
      ResourceUpdateManyWithoutConceptInput: ResourceUpdateManyWithoutConceptInputInputObject
      ResourceUpdateWithWhereUniqueWithoutConceptInput: ResourceUpdateWithWhereUniqueWithoutConceptInputInputObject
      ResourceUpdateWithoutConceptDataInput: ResourceUpdateWithoutConceptDataInputInputObject
      URLUpdateManyWithoutResourceInput: URLUpdateManyWithoutResourceInputInputObject
      URLUpdateWithWhereUniqueWithoutResourceInput: URLUpdateWithWhereUniqueWithoutResourceInputInputObject
      URLUpdateWithoutResourceDataInput: URLUpdateWithoutResourceDataInputInputObject
      URLUpsertWithWhereUniqueWithoutResourceInput: URLUpsertWithWhereUniqueWithoutResourceInputInputObject
      URLScalarWhereInput: URLScalarWhereInputInputObject
      URLUpdateManyWithWhereNestedInput: URLUpdateManyWithWhereNestedInputInputObject
      URLUpdateManyDataInput: URLUpdateManyDataInputInputObject
      ResourceUpsertWithWhereUniqueWithoutConceptInput: ResourceUpsertWithWhereUniqueWithoutConceptInputInputObject
      ResourceScalarWhereInput: ResourceScalarWhereInputInputObject
      ResourceUpdateManyWithWhereNestedInput: ResourceUpdateManyWithWhereNestedInputInputObject
      ResourceUpdateManyDataInput: ResourceUpdateManyDataInputInputObject
      WorkspaceUpdateOneRequiredWithoutConceptsInput: WorkspaceUpdateOneRequiredWithoutConceptsInputInputObject
      WorkspaceUpdateWithoutConceptsDataInput: WorkspaceUpdateWithoutConceptsDataInputInputObject
      CourseUpdateManyWithoutWorkspaceInput: CourseUpdateManyWithoutWorkspaceInputInputObject
      CourseUpdateWithWhereUniqueWithoutWorkspaceInput: CourseUpdateWithWhereUniqueWithoutWorkspaceInputInputObject
      CourseUpdateWithoutWorkspaceDataInput: CourseUpdateWithoutWorkspaceDataInputInputObject
      CourseUpsertWithWhereUniqueWithoutWorkspaceInput: CourseUpsertWithWhereUniqueWithoutWorkspaceInputInputObject
      CourseScalarWhereInput: CourseScalarWhereInputInputObject
      CourseUpdateManyWithWhereNestedInput: CourseUpdateManyWithWhereNestedInputInputObject
      CourseUpdateManyDataInput: CourseUpdateManyDataInputInputObject
      ConceptLinkUpdateManyWithoutWorkspaceInput: ConceptLinkUpdateManyWithoutWorkspaceInputInputObject
      ConceptLinkUpdateWithWhereUniqueWithoutWorkspaceInput: ConceptLinkUpdateWithWhereUniqueWithoutWorkspaceInputInputObject
      ConceptLinkUpdateWithoutWorkspaceDataInput: ConceptLinkUpdateWithoutWorkspaceDataInputInputObject
      ConceptLinkUpsertWithWhereUniqueWithoutWorkspaceInput: ConceptLinkUpsertWithWhereUniqueWithoutWorkspaceInputInputObject
      ConceptLinkScalarWhereInput: ConceptLinkScalarWhereInputInputObject
      ConceptLinkUpdateManyWithWhereNestedInput: ConceptLinkUpdateManyWithWhereNestedInputInputObject
      ConceptLinkUpdateManyDataInput: ConceptLinkUpdateManyDataInputInputObject
      CourseLinkUpdateManyWithoutWorkspaceInput: CourseLinkUpdateManyWithoutWorkspaceInputInputObject
      CourseLinkUpdateWithWhereUniqueWithoutWorkspaceInput: CourseLinkUpdateWithWhereUniqueWithoutWorkspaceInputInputObject
      CourseLinkUpdateWithoutWorkspaceDataInput: CourseLinkUpdateWithoutWorkspaceDataInputInputObject
      CourseLinkUpsertWithWhereUniqueWithoutWorkspaceInput: CourseLinkUpsertWithWhereUniqueWithoutWorkspaceInputInputObject
      CourseLinkScalarWhereInput: CourseLinkScalarWhereInputInputObject
      CourseLinkUpdateManyWithWhereNestedInput: CourseLinkUpdateManyWithWhereNestedInputInputObject
      CourseLinkUpdateManyDataInput: CourseLinkUpdateManyDataInputInputObject
      WorkspaceUpsertWithoutConceptsInput: WorkspaceUpsertWithoutConceptsInputInputObject
      ConceptUpsertWithoutLinksFromConceptInput: ConceptUpsertWithoutLinksFromConceptInputInputObject
      WorkspaceUpdateOneRequiredWithoutConceptLinksInput: WorkspaceUpdateOneRequiredWithoutConceptLinksInputInputObject
      WorkspaceUpdateWithoutConceptLinksDataInput: WorkspaceUpdateWithoutConceptLinksDataInputInputObject
      WorkspaceUpsertWithoutConceptLinksInput: WorkspaceUpsertWithoutConceptLinksInputInputObject
      ConceptLinkUpsertWithWhereUniqueWithoutToInput: ConceptLinkUpsertWithWhereUniqueWithoutToInputInputObject
      ConceptUpsertWithWhereUniqueWithoutWorkspaceInput: ConceptUpsertWithWhereUniqueWithoutWorkspaceInputInputObject
      ConceptScalarWhereInput: ConceptScalarWhereInputInputObject
      ConceptUpdateManyWithWhereNestedInput: ConceptUpdateManyWithWhereNestedInputInputObject
      ConceptUpdateManyDataInput: ConceptUpdateManyDataInputInputObject
      WorkspaceUpsertWithoutCoursesInput: WorkspaceUpsertWithoutCoursesInputInputObject
      CourseUpsertWithoutLinksFromCourseInput: CourseUpsertWithoutLinksFromCourseInputInputObject
      WorkspaceUpdateOneRequiredWithoutCourseLinksInput: WorkspaceUpdateOneRequiredWithoutCourseLinksInputInputObject
      WorkspaceUpdateWithoutCourseLinksDataInput: WorkspaceUpdateWithoutCourseLinksDataInputInputObject
      WorkspaceUpsertWithoutCourseLinksInput: WorkspaceUpsertWithoutCourseLinksInputInputObject
      CourseLinkUpsertWithWhereUniqueWithoutToInput: CourseLinkUpsertWithWhereUniqueWithoutToInputInputObject
      CourseUpsertWithWhereUniqueWithoutConceptsInput: CourseUpsertWithWhereUniqueWithoutConceptsInputInputObject
      ConceptUpsertWithoutLinksToConceptInput: ConceptUpsertWithoutLinksToConceptInputInputObject
      ConceptLinkUpsertWithWhereUniqueWithoutFromInput: ConceptLinkUpsertWithWhereUniqueWithoutFromInputInputObject
      ConceptUpsertWithWhereUniqueWithoutCoursesInput: ConceptUpsertWithWhereUniqueWithoutCoursesInputInputObject
      CourseUpsertWithoutLinksToCourseInput: CourseUpsertWithoutLinksToCourseInputInputObject
      CourseLinkUpsertWithWhereUniqueWithoutFromInput: CourseLinkUpsertWithWhereUniqueWithoutFromInputInputObject
      CourseUpsertNestedInput: CourseUpsertNestedInputInputObject
      WorkspaceUpsertNestedInput: WorkspaceUpsertNestedInputInputObject
      ProjectUpsertWithWhereUniqueWithoutOwnerInput: ProjectUpsertWithWhereUniqueWithoutOwnerInputInputObject
      ProjectScalarWhereInput: ProjectScalarWhereInputInputObject
      ProjectUpdateManyWithWhereNestedInput: ProjectUpdateManyWithWhereNestedInputInputObject
      ProjectUpdateManyDataInput: ProjectUpdateManyDataInputInputObject
      UserUpsertWithoutAsWorkspaceOwnerInput: UserUpsertWithoutAsWorkspaceOwnerInputInputObject
      WorkspaceUpsertWithWhereUniqueWithoutProjectInput: WorkspaceUpsertWithWhereUniqueWithoutProjectInputInputObject
      WorkspaceScalarWhereInput: WorkspaceScalarWhereInputInputObject
      WorkspaceUpdateManyWithWhereNestedInput: WorkspaceUpdateManyWithWhereNestedInputInputObject
      WorkspaceUpdateManyDataInput: WorkspaceUpdateManyDataInputInputObject
      ProjectUpsertWithWhereUniqueWithoutParticipantsInput: ProjectUpsertWithWhereUniqueWithoutParticipantsInputInputObject
      UserUpsertWithoutAsProjectOwnerInput: UserUpsertWithoutAsProjectOwnerInputInputObject
      ProjectUpsertWithoutWorkspacesInput: ProjectUpsertWithoutWorkspacesInputInputObject
      WorkspaceUpsertWithWhereUniqueWithoutOwnerInput: WorkspaceUpsertWithWhereUniqueWithoutOwnerInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      ProjectCreateInput: ProjectCreateInputInputObject
      ProjectUpdateInput: ProjectUpdateInputInputObject
      ProjectUpdateManyMutationInput: ProjectUpdateManyMutationInputInputObject
      WorkspaceUpdateInput: WorkspaceUpdateInputInputObject
      WorkspaceUpdateManyMutationInput: WorkspaceUpdateManyMutationInputInputObject
      CourseLinkCreateInput: CourseLinkCreateInputInputObject
      CourseLinkUpdateInput: CourseLinkUpdateInputInputObject
      CourseLinkUpdateManyMutationInput: CourseLinkUpdateManyMutationInputInputObject
      CourseUpdateInput: CourseUpdateInputInputObject
      CourseUpdateManyMutationInput: CourseUpdateManyMutationInputInputObject
      ConceptLinkCreateInput: ConceptLinkCreateInputInputObject
      ConceptLinkUpdateInput: ConceptLinkUpdateInputInputObject
      ConceptLinkUpdateManyMutationInput: ConceptLinkUpdateManyMutationInputInputObject
      ConceptCreateInput: ConceptCreateInputInputObject
      ConceptUpdateInput: ConceptUpdateInputInputObject
      ConceptUpdateManyMutationInput: ConceptUpdateManyMutationInputInputObject
      ResourceCreateInput: ResourceCreateInputInputObject
      ConceptCreateOneWithoutResourcesInput: ConceptCreateOneWithoutResourcesInputInputObject
      ConceptCreateWithoutResourcesInput: ConceptCreateWithoutResourcesInputInputObject
      ResourceUpdateInput: ResourceUpdateInputInputObject
      ConceptUpdateOneRequiredWithoutResourcesInput: ConceptUpdateOneRequiredWithoutResourcesInputInputObject
      ConceptUpdateWithoutResourcesDataInput: ConceptUpdateWithoutResourcesDataInputInputObject
      ConceptUpsertWithoutResourcesInput: ConceptUpsertWithoutResourcesInputInputObject
      ResourceUpdateManyMutationInput: ResourceUpdateManyMutationInputInputObject
      URLCreateInput: URLCreateInputInputObject
      ResourceCreateOneWithoutUrlsInput: ResourceCreateOneWithoutUrlsInputInputObject
      ResourceCreateWithoutUrlsInput: ResourceCreateWithoutUrlsInputInputObject
      URLUpdateInput: URLUpdateInputInputObject
      ResourceUpdateOneRequiredWithoutUrlsInput: ResourceUpdateOneRequiredWithoutUrlsInputInputObject
      ResourceUpdateWithoutUrlsDataInput: ResourceUpdateWithoutUrlsDataInputInputObject
      ResourceUpsertWithoutUrlsInput: ResourceUpsertWithoutUrlsInputInputObject
      URLUpdateManyMutationInput: URLUpdateManyMutationInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
      ProjectSubscriptionWhereInput: ProjectSubscriptionWhereInputInputObject
      WorkspaceSubscriptionWhereInput: WorkspaceSubscriptionWhereInputInputObject
      CourseLinkSubscriptionWhereInput: CourseLinkSubscriptionWhereInputInputObject
      CourseSubscriptionWhereInput: CourseSubscriptionWhereInputInputObject
      ConceptLinkSubscriptionWhereInput: ConceptLinkSubscriptionWhereInputInputObject
      ConceptSubscriptionWhereInput: ConceptSubscriptionWhereInputInputObject
      ResourceSubscriptionWhereInput: ResourceSubscriptionWhereInputInputObject
      URLSubscriptionWhereInput: URLSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    Role: RoleValues,
    WorkspaceOrderByInput: WorkspaceOrderByInputValues,
    UserOrderByInput: UserOrderByInputValues,
    CourseLinkOrderByInput: CourseLinkOrderByInputValues,
    ConceptOrderByInput: ConceptOrderByInputValues,
    ConceptLinkOrderByInput: ConceptLinkOrderByInputValues,
    CourseOrderByInput: CourseOrderByInputValues,
    ResourceOrderByInput: ResourceOrderByInputValues,
    URLOrderByInput: URLOrderByInputValues,
    ProjectOrderByInput: ProjectOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'project', args?: QueryProjectArgs[] | false, alias?: string  } 
  | { name: 'projects', args?: QueryProjectsArgs[] | false, alias?: string  } 
  | { name: 'projectsConnection', args?: QueryProjectsConnectionArgs[] | false, alias?: string  } 
  | { name: 'workspace', args?: QueryWorkspaceArgs[] | false, alias?: string  } 
  | { name: 'workspaces', args?: QueryWorkspacesArgs[] | false, alias?: string  } 
  | { name: 'workspacesConnection', args?: QueryWorkspacesConnectionArgs[] | false, alias?: string  } 
  | { name: 'courseLink', args?: QueryCourseLinkArgs[] | false, alias?: string  } 
  | { name: 'courseLinks', args?: QueryCourseLinksArgs[] | false, alias?: string  } 
  | { name: 'courseLinksConnection', args?: QueryCourseLinksConnectionArgs[] | false, alias?: string  } 
  | { name: 'course', args?: QueryCourseArgs[] | false, alias?: string  } 
  | { name: 'courses', args?: QueryCoursesArgs[] | false, alias?: string  } 
  | { name: 'coursesConnection', args?: QueryCoursesConnectionArgs[] | false, alias?: string  } 
  | { name: 'conceptLink', args?: QueryConceptLinkArgs[] | false, alias?: string  } 
  | { name: 'conceptLinks', args?: QueryConceptLinksArgs[] | false, alias?: string  } 
  | { name: 'conceptLinksConnection', args?: QueryConceptLinksConnectionArgs[] | false, alias?: string  } 
  | { name: 'concept', args?: QueryConceptArgs[] | false, alias?: string  } 
  | { name: 'concepts', args?: QueryConceptsArgs[] | false, alias?: string  } 
  | { name: 'conceptsConnection', args?: QueryConceptsConnectionArgs[] | false, alias?: string  } 
  | { name: 'resource', args?: QueryResourceArgs[] | false, alias?: string  } 
  | { name: 'resources', args?: QueryResourcesArgs[] | false, alias?: string  } 
  | { name: 'resourcesConnection', args?: QueryResourcesConnectionArgs[] | false, alias?: string  } 
  | { name: 'uRL', args?: QueryURLArgs[] | false, alias?: string  } 
  | { name: 'uRLs', args?: QueryURLsArgs[] | false, alias?: string  } 
  | { name: 'uRLsConnection', args?: QueryURLsConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'user'
  | 'users'
  | 'usersConnection'
  | 'project'
  | 'projects'
  | 'projectsConnection'
  | 'workspace'
  | 'workspaces'
  | 'workspacesConnection'
  | 'courseLink'
  | 'courseLinks'
  | 'courseLinksConnection'
  | 'course'
  | 'courses'
  | 'coursesConnection'
  | 'conceptLink'
  | 'conceptLinks'
  | 'conceptLinksConnection'
  | 'concept'
  | 'concepts'
  | 'conceptsConnection'
  | 'resource'
  | 'resources'
  | 'resourcesConnection'
  | 'uRL'
  | 'uRLs'
  | 'uRLsConnection'


type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProjectArgs =
  | 'where'
type QueryProjectsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProjectsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryWorkspaceArgs =
  | 'where'
type QueryWorkspacesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryWorkspacesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCourseLinkArgs =
  | 'where'
type QueryCourseLinksArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCourseLinksConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCourseArgs =
  | 'where'
type QueryCoursesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCoursesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryConceptLinkArgs =
  | 'where'
type QueryConceptLinksArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryConceptLinksConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryConceptArgs =
  | 'where'
type QueryConceptsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryConceptsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryResourceArgs =
  | 'where'
type QueryResourcesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryResourcesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryURLArgs =
  | 'where'
type QueryURLsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryURLsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
  project: {
    type: 'Project'
    args: Record<QueryProjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ProjectWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project | null> | prisma.Project | null
  }
  projects: {
    type: 'Project'
    args: Record<QueryProjectsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProjectWhereInput | null, orderBy?: prisma.ProjectOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project[]> | prisma.Project[]
  }
  projectsConnection: {
    type: 'ProjectConnection'
    args: Record<QueryProjectsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProjectWhereInput | null, orderBy?: prisma.ProjectOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectConnection> | prisma.ProjectConnection
  }
  workspace: {
    type: 'Workspace'
    args: Record<QueryWorkspaceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: WorkspaceWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Workspace | null> | prisma.Workspace | null
  }
  workspaces: {
    type: 'Workspace'
    args: Record<QueryWorkspacesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: WorkspaceWhereInput | null, orderBy?: prisma.WorkspaceOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Workspace[]> | prisma.Workspace[]
  }
  workspacesConnection: {
    type: 'WorkspaceConnection'
    args: Record<QueryWorkspacesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: WorkspaceWhereInput | null, orderBy?: prisma.WorkspaceOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WorkspaceConnection> | prisma.WorkspaceConnection
  }
  courseLink: {
    type: 'CourseLink'
    args: Record<QueryCourseLinkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: CourseLinkWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CourseLink | null> | prisma.CourseLink | null
  }
  courseLinks: {
    type: 'CourseLink'
    args: Record<QueryCourseLinksArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CourseLinkWhereInput | null, orderBy?: prisma.CourseLinkOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CourseLink[]> | prisma.CourseLink[]
  }
  courseLinksConnection: {
    type: 'CourseLinkConnection'
    args: Record<QueryCourseLinksConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CourseLinkWhereInput | null, orderBy?: prisma.CourseLinkOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CourseLinkConnection> | prisma.CourseLinkConnection
  }
  course: {
    type: 'Course'
    args: Record<QueryCourseArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: CourseWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Course | null> | prisma.Course | null
  }
  courses: {
    type: 'Course'
    args: Record<QueryCoursesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CourseWhereInput | null, orderBy?: prisma.CourseOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Course[]> | prisma.Course[]
  }
  coursesConnection: {
    type: 'CourseConnection'
    args: Record<QueryCoursesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CourseWhereInput | null, orderBy?: prisma.CourseOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CourseConnection> | prisma.CourseConnection
  }
  conceptLink: {
    type: 'ConceptLink'
    args: Record<QueryConceptLinkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ConceptLinkWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ConceptLink | null> | prisma.ConceptLink | null
  }
  conceptLinks: {
    type: 'ConceptLink'
    args: Record<QueryConceptLinksArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ConceptLinkWhereInput | null, orderBy?: prisma.ConceptLinkOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ConceptLink[]> | prisma.ConceptLink[]
  }
  conceptLinksConnection: {
    type: 'ConceptLinkConnection'
    args: Record<QueryConceptLinksConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ConceptLinkWhereInput | null, orderBy?: prisma.ConceptLinkOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ConceptLinkConnection> | prisma.ConceptLinkConnection
  }
  concept: {
    type: 'Concept'
    args: Record<QueryConceptArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ConceptWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Concept | null> | prisma.Concept | null
  }
  concepts: {
    type: 'Concept'
    args: Record<QueryConceptsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ConceptWhereInput | null, orderBy?: prisma.ConceptOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Concept[]> | prisma.Concept[]
  }
  conceptsConnection: {
    type: 'ConceptConnection'
    args: Record<QueryConceptsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ConceptWhereInput | null, orderBy?: prisma.ConceptOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ConceptConnection> | prisma.ConceptConnection
  }
  resource: {
    type: 'Resource'
    args: Record<QueryResourceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ResourceWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Resource | null> | prisma.Resource | null
  }
  resources: {
    type: 'Resource'
    args: Record<QueryResourcesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ResourceWhereInput | null, orderBy?: prisma.ResourceOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Resource[]> | prisma.Resource[]
  }
  resourcesConnection: {
    type: 'ResourceConnection'
    args: Record<QueryResourcesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ResourceWhereInput | null, orderBy?: prisma.ResourceOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ResourceConnection> | prisma.ResourceConnection
  }
  uRL: {
    type: 'URL'
    args: Record<QueryURLArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: URLWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.URL | null> | prisma.URL | null
  }
  uRLs: {
    type: 'URL'
    args: Record<QueryURLsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: URLWhereInput | null, orderBy?: prisma.URLOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.URL[]> | prisma.URL[]
  }
  uRLsConnection: {
    type: 'URLConnection'
    args: Record<QueryURLsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: URLWhereInput | null, orderBy?: prisma.URLOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.URLConnection> | prisma.URLConnection
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'tmcId', args?: [] | false, alias?: string  } 
  | { name: 'role', args?: [] | false, alias?: string  } 
  | { name: 'asWorkspaceOwner', args?: UserAsWorkspaceOwnerArgs[] | false, alias?: string  } 
  | { name: 'asProjectOwner', args?: UserAsProjectOwnerArgs[] | false, alias?: string  } 
  | { name: 'asProjectParticipant', args?: UserAsProjectParticipantArgs[] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'guideProgress', args?: [] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'tmcId'
  | 'role'
  | 'asWorkspaceOwner'
  | 'asProjectOwner'
  | 'asProjectParticipant'
  | 'createdAt'
  | 'guideProgress'


type UserAsWorkspaceOwnerArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type UserAsProjectOwnerArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type UserAsProjectParticipantArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  tmcId: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  role: {
    type: 'Role'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Role> | prisma.Role
  }
  asWorkspaceOwner: {
    type: 'Workspace'
    args: Record<UserAsWorkspaceOwnerArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: WorkspaceWhereInput | null, orderBy?: prisma.WorkspaceOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Workspace[]> | prisma.Workspace[]
  }
  asProjectOwner: {
    type: 'Project'
    args: Record<UserAsProjectOwnerArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: ProjectWhereInput | null, orderBy?: prisma.ProjectOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project[]> | prisma.Project[]
  }
  asProjectParticipant: {
    type: 'Project'
    args: Record<UserAsProjectParticipantArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: ProjectWhereInput | null, orderBy?: prisma.ProjectOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project[]> | prisma.Project[]
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  guideProgress: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Workspace

type WorkspaceObject =
  | WorkspaceFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'project', args?: [] | false, alias?: string  } 
  | { name: 'owner', args?: [] | false, alias?: string  } 
  | { name: 'public', args?: [] | false, alias?: string  } 
  | { name: 'defaultCourse', args?: [] | false, alias?: string  } 
  | { name: 'courses', args?: WorkspaceCoursesArgs[] | false, alias?: string  } 
  | { name: 'concepts', args?: WorkspaceConceptsArgs[] | false, alias?: string  } 
  | { name: 'conceptLinks', args?: WorkspaceConceptLinksArgs[] | false, alias?: string  } 
  | { name: 'courseLinks', args?: WorkspaceCourseLinksArgs[] | false, alias?: string  } 

type WorkspaceFields =
  | 'id'
  | 'name'
  | 'project'
  | 'owner'
  | 'public'
  | 'defaultCourse'
  | 'courses'
  | 'concepts'
  | 'conceptLinks'
  | 'courseLinks'


type WorkspaceCoursesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type WorkspaceConceptsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type WorkspaceConceptLinksArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type WorkspaceCourseLinksArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface WorkspaceFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  project: {
    type: 'Project'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Workspace">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project | null> | prisma.Project | null
  }
  owner: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Workspace">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  public: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  defaultCourse: {
    type: 'Course'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Workspace">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Course | null> | prisma.Course | null
  }
  courses: {
    type: 'Course'
    args: Record<WorkspaceCoursesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Workspace">,
      args: { where?: CourseWhereInput | null, orderBy?: prisma.CourseOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Course[]> | prisma.Course[]
  }
  concepts: {
    type: 'Concept'
    args: Record<WorkspaceConceptsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Workspace">,
      args: { where?: ConceptWhereInput | null, orderBy?: prisma.ConceptOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Concept[]> | prisma.Concept[]
  }
  conceptLinks: {
    type: 'ConceptLink'
    args: Record<WorkspaceConceptLinksArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Workspace">,
      args: { where?: ConceptLinkWhereInput | null, orderBy?: prisma.ConceptLinkOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ConceptLink[]> | prisma.ConceptLink[]
  }
  courseLinks: {
    type: 'CourseLink'
    args: Record<WorkspaceCourseLinksArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Workspace">,
      args: { where?: CourseLinkWhereInput | null, orderBy?: prisma.CourseLinkOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CourseLink[]> | prisma.CourseLink[]
  }
}
  

// Types for Project

type ProjectObject =
  | ProjectFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'owner', args?: [] | false, alias?: string  } 
  | { name: 'participants', args?: ProjectParticipantsArgs[] | false, alias?: string  } 
  | { name: 'workspaces', args?: ProjectWorkspacesArgs[] | false, alias?: string  } 
  | { name: 'template', args?: [] | false, alias?: string  } 

type ProjectFields =
  | 'id'
  | 'name'
  | 'owner'
  | 'participants'
  | 'workspaces'
  | 'template'


type ProjectParticipantsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type ProjectWorkspacesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface ProjectFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  owner: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Project">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  participants: {
    type: 'User'
    args: Record<ProjectParticipantsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Project">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  workspaces: {
    type: 'Workspace'
    args: Record<ProjectWorkspacesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Project">,
      args: { where?: WorkspaceWhereInput | null, orderBy?: prisma.WorkspaceOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Workspace[]> | prisma.Workspace[]
  }
  template: {
    type: 'Workspace'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Project">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Workspace | null> | prisma.Workspace | null
  }
}
  

// Types for Course

type CourseObject =
  | CourseFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'createdBy', args?: [] | false, alias?: string  } 
  | { name: 'linksFromCourse', args?: CourseLinksFromCourseArgs[] | false, alias?: string  } 
  | { name: 'linksToCourse', args?: CourseLinksToCourseArgs[] | false, alias?: string  } 
  | { name: 'concepts', args?: CourseConceptsArgs[] | false, alias?: string  } 
  | { name: 'workspace', args?: [] | false, alias?: string  } 

type CourseFields =
  | 'id'
  | 'name'
  | 'createdBy'
  | 'linksFromCourse'
  | 'linksToCourse'
  | 'concepts'
  | 'workspace'


type CourseLinksFromCourseArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type CourseLinksToCourseArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type CourseConceptsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface CourseFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdBy: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Course">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  linksFromCourse: {
    type: 'CourseLink'
    args: Record<CourseLinksFromCourseArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Course">,
      args: { where?: CourseLinkWhereInput | null, orderBy?: prisma.CourseLinkOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CourseLink[]> | prisma.CourseLink[]
  }
  linksToCourse: {
    type: 'CourseLink'
    args: Record<CourseLinksToCourseArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Course">,
      args: { where?: CourseLinkWhereInput | null, orderBy?: prisma.CourseLinkOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CourseLink[]> | prisma.CourseLink[]
  }
  concepts: {
    type: 'Concept'
    args: Record<CourseConceptsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Course">,
      args: { where?: ConceptWhereInput | null, orderBy?: prisma.ConceptOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Concept[]> | prisma.Concept[]
  }
  workspace: {
    type: 'Workspace'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Course">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Workspace> | prisma.Workspace
  }
}
  

// Types for CourseLink

type CourseLinkObject =
  | CourseLinkFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'from', args?: [] | false, alias?: string  } 
  | { name: 'to', args?: [] | false, alias?: string  } 
  | { name: 'official', args?: [] | false, alias?: string  } 
  | { name: 'createdBy', args?: [] | false, alias?: string  } 
  | { name: 'workspace', args?: [] | false, alias?: string  } 

type CourseLinkFields =
  | 'id'
  | 'from'
  | 'to'
  | 'official'
  | 'createdBy'
  | 'workspace'



  

export interface CourseLinkFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  from: {
    type: 'Course'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CourseLink">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Course> | prisma.Course
  }
  to: {
    type: 'Course'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CourseLink">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Course> | prisma.Course
  }
  official: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdBy: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CourseLink">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  workspace: {
    type: 'Workspace'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CourseLink">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Workspace> | prisma.Workspace
  }
}
  

// Types for Concept

type ConceptObject =
  | ConceptFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'official', args?: [] | false, alias?: string  } 
  | { name: 'createdBy', args?: [] | false, alias?: string  } 
  | { name: 'linksFromConcept', args?: ConceptLinksFromConceptArgs[] | false, alias?: string  } 
  | { name: 'linksToConcept', args?: ConceptLinksToConceptArgs[] | false, alias?: string  } 
  | { name: 'courses', args?: ConceptCoursesArgs[] | false, alias?: string  } 
  | { name: 'resources', args?: ConceptResourcesArgs[] | false, alias?: string  } 
  | { name: 'workspace', args?: [] | false, alias?: string  } 

type ConceptFields =
  | 'id'
  | 'name'
  | 'description'
  | 'official'
  | 'createdBy'
  | 'linksFromConcept'
  | 'linksToConcept'
  | 'courses'
  | 'resources'
  | 'workspace'


type ConceptLinksFromConceptArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type ConceptLinksToConceptArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type ConceptCoursesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type ConceptResourcesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface ConceptFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  official: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdBy: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Concept">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  linksFromConcept: {
    type: 'ConceptLink'
    args: Record<ConceptLinksFromConceptArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Concept">,
      args: { where?: ConceptLinkWhereInput | null, orderBy?: prisma.ConceptLinkOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ConceptLink[]> | prisma.ConceptLink[]
  }
  linksToConcept: {
    type: 'ConceptLink'
    args: Record<ConceptLinksToConceptArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Concept">,
      args: { where?: ConceptLinkWhereInput | null, orderBy?: prisma.ConceptLinkOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ConceptLink[]> | prisma.ConceptLink[]
  }
  courses: {
    type: 'Course'
    args: Record<ConceptCoursesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Concept">,
      args: { where?: CourseWhereInput | null, orderBy?: prisma.CourseOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Course[]> | prisma.Course[]
  }
  resources: {
    type: 'Resource'
    args: Record<ConceptResourcesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Concept">,
      args: { where?: ResourceWhereInput | null, orderBy?: prisma.ResourceOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Resource[]> | prisma.Resource[]
  }
  workspace: {
    type: 'Workspace'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Concept">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Workspace> | prisma.Workspace
  }
}
  

// Types for ConceptLink

type ConceptLinkObject =
  | ConceptLinkFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'from', args?: [] | false, alias?: string  } 
  | { name: 'to', args?: [] | false, alias?: string  } 
  | { name: 'official', args?: [] | false, alias?: string  } 
  | { name: 'workspace', args?: [] | false, alias?: string  } 
  | { name: 'createdBy', args?: [] | false, alias?: string  } 

type ConceptLinkFields =
  | 'id'
  | 'from'
  | 'to'
  | 'official'
  | 'workspace'
  | 'createdBy'



  

export interface ConceptLinkFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  from: {
    type: 'Concept'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ConceptLink">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Concept> | prisma.Concept
  }
  to: {
    type: 'Concept'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ConceptLink">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Concept> | prisma.Concept
  }
  official: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  workspace: {
    type: 'Workspace'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ConceptLink">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Workspace> | prisma.Workspace
  }
  createdBy: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ConceptLink">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
}
  

// Types for Resource

type ResourceObject =
  | ResourceFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'concept', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'urls', args?: ResourceUrlsArgs[] | false, alias?: string  } 

type ResourceFields =
  | 'id'
  | 'concept'
  | 'name'
  | 'description'
  | 'urls'


type ResourceUrlsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface ResourceFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  concept: {
    type: 'Concept'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Resource">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Concept> | prisma.Concept
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  urls: {
    type: 'URL'
    args: Record<ResourceUrlsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Resource">,
      args: { where?: URLWhereInput | null, orderBy?: prisma.URLOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.URL[]> | prisma.URL[]
  }
}
  

// Types for URL

type URLObject =
  | URLFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'address', args?: [] | false, alias?: string  } 
  | { name: 'resource', args?: [] | false, alias?: string  } 

type URLFields =
  | 'id'
  | 'address'
  | 'resource'



  

export interface URLFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  address: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  resource: {
    type: 'Resource'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"URL">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Resource> | prisma.Resource
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProjectConnection

type ProjectConnectionObject =
  | ProjectConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ProjectConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ProjectConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ProjectEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectEdge[]> | prisma.ProjectEdge[]
  }
  aggregate: {
    type: 'AggregateProject'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateProject> | prisma.AggregateProject
  }
}
  

// Types for ProjectEdge

type ProjectEdgeObject =
  | ProjectEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ProjectEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ProjectEdgeFieldDetails {
  node: {
    type: 'Project'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project> | prisma.Project
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateProject

type AggregateProjectObject =
  | AggregateProjectFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateProjectFields =
  | 'count'



  

export interface AggregateProjectFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for WorkspaceConnection

type WorkspaceConnectionObject =
  | WorkspaceConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type WorkspaceConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface WorkspaceConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"WorkspaceConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'WorkspaceEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"WorkspaceConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WorkspaceEdge[]> | prisma.WorkspaceEdge[]
  }
  aggregate: {
    type: 'AggregateWorkspace'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"WorkspaceConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateWorkspace> | prisma.AggregateWorkspace
  }
}
  

// Types for WorkspaceEdge

type WorkspaceEdgeObject =
  | WorkspaceEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type WorkspaceEdgeFields =
  | 'node'
  | 'cursor'



  

export interface WorkspaceEdgeFieldDetails {
  node: {
    type: 'Workspace'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"WorkspaceEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Workspace> | prisma.Workspace
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateWorkspace

type AggregateWorkspaceObject =
  | AggregateWorkspaceFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateWorkspaceFields =
  | 'count'



  

export interface AggregateWorkspaceFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CourseLinkConnection

type CourseLinkConnectionObject =
  | CourseLinkConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type CourseLinkConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface CourseLinkConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CourseLinkConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'CourseLinkEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"CourseLinkConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CourseLinkEdge[]> | prisma.CourseLinkEdge[]
  }
  aggregate: {
    type: 'AggregateCourseLink'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CourseLinkConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateCourseLink> | prisma.AggregateCourseLink
  }
}
  

// Types for CourseLinkEdge

type CourseLinkEdgeObject =
  | CourseLinkEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type CourseLinkEdgeFields =
  | 'node'
  | 'cursor'



  

export interface CourseLinkEdgeFieldDetails {
  node: {
    type: 'CourseLink'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CourseLinkEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CourseLink> | prisma.CourseLink
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateCourseLink

type AggregateCourseLinkObject =
  | AggregateCourseLinkFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateCourseLinkFields =
  | 'count'



  

export interface AggregateCourseLinkFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CourseConnection

type CourseConnectionObject =
  | CourseConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type CourseConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface CourseConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CourseConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'CourseEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"CourseConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CourseEdge[]> | prisma.CourseEdge[]
  }
  aggregate: {
    type: 'AggregateCourse'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CourseConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateCourse> | prisma.AggregateCourse
  }
}
  

// Types for CourseEdge

type CourseEdgeObject =
  | CourseEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type CourseEdgeFields =
  | 'node'
  | 'cursor'



  

export interface CourseEdgeFieldDetails {
  node: {
    type: 'Course'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CourseEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Course> | prisma.Course
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateCourse

type AggregateCourseObject =
  | AggregateCourseFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateCourseFields =
  | 'count'



  

export interface AggregateCourseFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ConceptLinkConnection

type ConceptLinkConnectionObject =
  | ConceptLinkConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ConceptLinkConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ConceptLinkConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ConceptLinkConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ConceptLinkEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ConceptLinkConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ConceptLinkEdge[]> | prisma.ConceptLinkEdge[]
  }
  aggregate: {
    type: 'AggregateConceptLink'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ConceptLinkConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateConceptLink> | prisma.AggregateConceptLink
  }
}
  

// Types for ConceptLinkEdge

type ConceptLinkEdgeObject =
  | ConceptLinkEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ConceptLinkEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ConceptLinkEdgeFieldDetails {
  node: {
    type: 'ConceptLink'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ConceptLinkEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ConceptLink> | prisma.ConceptLink
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateConceptLink

type AggregateConceptLinkObject =
  | AggregateConceptLinkFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateConceptLinkFields =
  | 'count'



  

export interface AggregateConceptLinkFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ConceptConnection

type ConceptConnectionObject =
  | ConceptConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ConceptConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ConceptConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ConceptConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ConceptEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ConceptConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ConceptEdge[]> | prisma.ConceptEdge[]
  }
  aggregate: {
    type: 'AggregateConcept'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ConceptConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateConcept> | prisma.AggregateConcept
  }
}
  

// Types for ConceptEdge

type ConceptEdgeObject =
  | ConceptEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ConceptEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ConceptEdgeFieldDetails {
  node: {
    type: 'Concept'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ConceptEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Concept> | prisma.Concept
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateConcept

type AggregateConceptObject =
  | AggregateConceptFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateConceptFields =
  | 'count'



  

export interface AggregateConceptFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ResourceConnection

type ResourceConnectionObject =
  | ResourceConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ResourceConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ResourceConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ResourceConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ResourceEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ResourceConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ResourceEdge[]> | prisma.ResourceEdge[]
  }
  aggregate: {
    type: 'AggregateResource'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ResourceConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateResource> | prisma.AggregateResource
  }
}
  

// Types for ResourceEdge

type ResourceEdgeObject =
  | ResourceEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ResourceEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ResourceEdgeFieldDetails {
  node: {
    type: 'Resource'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ResourceEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Resource> | prisma.Resource
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateResource

type AggregateResourceObject =
  | AggregateResourceFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateResourceFields =
  | 'count'



  

export interface AggregateResourceFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for URLConnection

type URLConnectionObject =
  | URLConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type URLConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface URLConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"URLConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'URLEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"URLConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.URLEdge[]> | prisma.URLEdge[]
  }
  aggregate: {
    type: 'AggregateURL'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"URLConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateURL> | prisma.AggregateURL
  }
}
  

// Types for URLEdge

type URLEdgeObject =
  | URLEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type URLEdgeFields =
  | 'node'
  | 'cursor'



  

export interface URLEdgeFieldDetails {
  node: {
    type: 'URL'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"URLEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.URL> | prisma.URL
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateURL

type AggregateURLObject =
  | AggregateURLFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateURLFields =
  | 'count'



  

export interface AggregateURLFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 
  | { name: 'createProject', args?: MutationCreateProjectArgs[] | false, alias?: string  } 
  | { name: 'updateProject', args?: MutationUpdateProjectArgs[] | false, alias?: string  } 
  | { name: 'updateManyProjects', args?: MutationUpdateManyProjectsArgs[] | false, alias?: string  } 
  | { name: 'upsertProject', args?: MutationUpsertProjectArgs[] | false, alias?: string  } 
  | { name: 'deleteProject', args?: MutationDeleteProjectArgs[] | false, alias?: string  } 
  | { name: 'deleteManyProjects', args?: MutationDeleteManyProjectsArgs[] | false, alias?: string  } 
  | { name: 'createWorkspace', args?: MutationCreateWorkspaceArgs[] | false, alias?: string  } 
  | { name: 'updateWorkspace', args?: MutationUpdateWorkspaceArgs[] | false, alias?: string  } 
  | { name: 'updateManyWorkspaces', args?: MutationUpdateManyWorkspacesArgs[] | false, alias?: string  } 
  | { name: 'upsertWorkspace', args?: MutationUpsertWorkspaceArgs[] | false, alias?: string  } 
  | { name: 'deleteWorkspace', args?: MutationDeleteWorkspaceArgs[] | false, alias?: string  } 
  | { name: 'deleteManyWorkspaces', args?: MutationDeleteManyWorkspacesArgs[] | false, alias?: string  } 
  | { name: 'createCourseLink', args?: MutationCreateCourseLinkArgs[] | false, alias?: string  } 
  | { name: 'updateCourseLink', args?: MutationUpdateCourseLinkArgs[] | false, alias?: string  } 
  | { name: 'updateManyCourseLinks', args?: MutationUpdateManyCourseLinksArgs[] | false, alias?: string  } 
  | { name: 'upsertCourseLink', args?: MutationUpsertCourseLinkArgs[] | false, alias?: string  } 
  | { name: 'deleteCourseLink', args?: MutationDeleteCourseLinkArgs[] | false, alias?: string  } 
  | { name: 'deleteManyCourseLinks', args?: MutationDeleteManyCourseLinksArgs[] | false, alias?: string  } 
  | { name: 'createCourse', args?: MutationCreateCourseArgs[] | false, alias?: string  } 
  | { name: 'updateCourse', args?: MutationUpdateCourseArgs[] | false, alias?: string  } 
  | { name: 'updateManyCourses', args?: MutationUpdateManyCoursesArgs[] | false, alias?: string  } 
  | { name: 'upsertCourse', args?: MutationUpsertCourseArgs[] | false, alias?: string  } 
  | { name: 'deleteCourse', args?: MutationDeleteCourseArgs[] | false, alias?: string  } 
  | { name: 'deleteManyCourses', args?: MutationDeleteManyCoursesArgs[] | false, alias?: string  } 
  | { name: 'createConceptLink', args?: MutationCreateConceptLinkArgs[] | false, alias?: string  } 
  | { name: 'updateConceptLink', args?: MutationUpdateConceptLinkArgs[] | false, alias?: string  } 
  | { name: 'updateManyConceptLinks', args?: MutationUpdateManyConceptLinksArgs[] | false, alias?: string  } 
  | { name: 'upsertConceptLink', args?: MutationUpsertConceptLinkArgs[] | false, alias?: string  } 
  | { name: 'deleteConceptLink', args?: MutationDeleteConceptLinkArgs[] | false, alias?: string  } 
  | { name: 'deleteManyConceptLinks', args?: MutationDeleteManyConceptLinksArgs[] | false, alias?: string  } 
  | { name: 'createConcept', args?: MutationCreateConceptArgs[] | false, alias?: string  } 
  | { name: 'updateConcept', args?: MutationUpdateConceptArgs[] | false, alias?: string  } 
  | { name: 'updateManyConcepts', args?: MutationUpdateManyConceptsArgs[] | false, alias?: string  } 
  | { name: 'upsertConcept', args?: MutationUpsertConceptArgs[] | false, alias?: string  } 
  | { name: 'deleteConcept', args?: MutationDeleteConceptArgs[] | false, alias?: string  } 
  | { name: 'deleteManyConcepts', args?: MutationDeleteManyConceptsArgs[] | false, alias?: string  } 
  | { name: 'createResource', args?: MutationCreateResourceArgs[] | false, alias?: string  } 
  | { name: 'updateResource', args?: MutationUpdateResourceArgs[] | false, alias?: string  } 
  | { name: 'updateManyResources', args?: MutationUpdateManyResourcesArgs[] | false, alias?: string  } 
  | { name: 'upsertResource', args?: MutationUpsertResourceArgs[] | false, alias?: string  } 
  | { name: 'deleteResource', args?: MutationDeleteResourceArgs[] | false, alias?: string  } 
  | { name: 'deleteManyResources', args?: MutationDeleteManyResourcesArgs[] | false, alias?: string  } 
  | { name: 'createURL', args?: MutationCreateURLArgs[] | false, alias?: string  } 
  | { name: 'updateURL', args?: MutationUpdateURLArgs[] | false, alias?: string  } 
  | { name: 'updateManyURLs', args?: MutationUpdateManyURLsArgs[] | false, alias?: string  } 
  | { name: 'upsertURL', args?: MutationUpsertURLArgs[] | false, alias?: string  } 
  | { name: 'deleteURL', args?: MutationDeleteURLArgs[] | false, alias?: string  } 
  | { name: 'deleteManyURLs', args?: MutationDeleteManyURLsArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'
  | 'createProject'
  | 'updateProject'
  | 'updateManyProjects'
  | 'upsertProject'
  | 'deleteProject'
  | 'deleteManyProjects'
  | 'createWorkspace'
  | 'updateWorkspace'
  | 'updateManyWorkspaces'
  | 'upsertWorkspace'
  | 'deleteWorkspace'
  | 'deleteManyWorkspaces'
  | 'createCourseLink'
  | 'updateCourseLink'
  | 'updateManyCourseLinks'
  | 'upsertCourseLink'
  | 'deleteCourseLink'
  | 'deleteManyCourseLinks'
  | 'createCourse'
  | 'updateCourse'
  | 'updateManyCourses'
  | 'upsertCourse'
  | 'deleteCourse'
  | 'deleteManyCourses'
  | 'createConceptLink'
  | 'updateConceptLink'
  | 'updateManyConceptLinks'
  | 'upsertConceptLink'
  | 'deleteConceptLink'
  | 'deleteManyConceptLinks'
  | 'createConcept'
  | 'updateConcept'
  | 'updateManyConcepts'
  | 'upsertConcept'
  | 'deleteConcept'
  | 'deleteManyConcepts'
  | 'createResource'
  | 'updateResource'
  | 'updateManyResources'
  | 'upsertResource'
  | 'deleteResource'
  | 'deleteManyResources'
  | 'createURL'
  | 'updateURL'
  | 'updateManyURLs'
  | 'upsertURL'
  | 'deleteURL'
  | 'deleteManyURLs'


type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
type MutationCreateProjectArgs =
  | 'data'
type MutationUpdateProjectArgs =
  | 'data'
  | 'where'
type MutationUpdateManyProjectsArgs =
  | 'data'
  | 'where'
type MutationUpsertProjectArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteProjectArgs =
  | 'where'
type MutationDeleteManyProjectsArgs =
  | 'where'
type MutationCreateWorkspaceArgs =
  | 'data'
type MutationUpdateWorkspaceArgs =
  | 'data'
  | 'where'
type MutationUpdateManyWorkspacesArgs =
  | 'data'
  | 'where'
type MutationUpsertWorkspaceArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteWorkspaceArgs =
  | 'where'
type MutationDeleteManyWorkspacesArgs =
  | 'where'
type MutationCreateCourseLinkArgs =
  | 'data'
type MutationUpdateCourseLinkArgs =
  | 'data'
  | 'where'
type MutationUpdateManyCourseLinksArgs =
  | 'data'
  | 'where'
type MutationUpsertCourseLinkArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteCourseLinkArgs =
  | 'where'
type MutationDeleteManyCourseLinksArgs =
  | 'where'
type MutationCreateCourseArgs =
  | 'data'
type MutationUpdateCourseArgs =
  | 'data'
  | 'where'
type MutationUpdateManyCoursesArgs =
  | 'data'
  | 'where'
type MutationUpsertCourseArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteCourseArgs =
  | 'where'
type MutationDeleteManyCoursesArgs =
  | 'where'
type MutationCreateConceptLinkArgs =
  | 'data'
type MutationUpdateConceptLinkArgs =
  | 'data'
  | 'where'
type MutationUpdateManyConceptLinksArgs =
  | 'data'
  | 'where'
type MutationUpsertConceptLinkArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteConceptLinkArgs =
  | 'where'
type MutationDeleteManyConceptLinksArgs =
  | 'where'
type MutationCreateConceptArgs =
  | 'data'
type MutationUpdateConceptArgs =
  | 'data'
  | 'where'
type MutationUpdateManyConceptsArgs =
  | 'data'
  | 'where'
type MutationUpsertConceptArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteConceptArgs =
  | 'where'
type MutationDeleteManyConceptsArgs =
  | 'where'
type MutationCreateResourceArgs =
  | 'data'
type MutationUpdateResourceArgs =
  | 'data'
  | 'where'
type MutationUpdateManyResourcesArgs =
  | 'data'
  | 'where'
type MutationUpsertResourceArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteResourceArgs =
  | 'where'
type MutationDeleteManyResourcesArgs =
  | 'where'
type MutationCreateURLArgs =
  | 'data'
type MutationUpdateURLArgs =
  | 'data'
  | 'where'
type MutationUpdateManyURLsArgs =
  | 'data'
  | 'where'
type MutationUpsertURLArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteURLArgs =
  | 'where'
type MutationDeleteManyURLsArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createProject: {
    type: 'Project'
    args: Record<MutationCreateProjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project> | prisma.Project
  }
  updateProject: {
    type: 'Project'
    args: Record<MutationUpdateProjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectUpdateInput, where: ProjectWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project | null> | prisma.Project | null
  }
  updateManyProjects: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyProjectsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectUpdateManyMutationInput, where?: ProjectWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertProject: {
    type: 'Project'
    args: Record<MutationUpsertProjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProjectWhereUniqueInput, create: ProjectCreateInput, update: ProjectUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project> | prisma.Project
  }
  deleteProject: {
    type: 'Project'
    args: Record<MutationDeleteProjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProjectWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project | null> | prisma.Project | null
  }
  deleteManyProjects: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyProjectsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ProjectWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createWorkspace: {
    type: 'Workspace'
    args: Record<MutationCreateWorkspaceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: WorkspaceCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Workspace> | prisma.Workspace
  }
  updateWorkspace: {
    type: 'Workspace'
    args: Record<MutationUpdateWorkspaceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: WorkspaceUpdateInput, where: WorkspaceWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Workspace | null> | prisma.Workspace | null
  }
  updateManyWorkspaces: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyWorkspacesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: WorkspaceUpdateManyMutationInput, where?: WorkspaceWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertWorkspace: {
    type: 'Workspace'
    args: Record<MutationUpsertWorkspaceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: WorkspaceWhereUniqueInput, create: WorkspaceCreateInput, update: WorkspaceUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Workspace> | prisma.Workspace
  }
  deleteWorkspace: {
    type: 'Workspace'
    args: Record<MutationDeleteWorkspaceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: WorkspaceWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Workspace | null> | prisma.Workspace | null
  }
  deleteManyWorkspaces: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyWorkspacesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: WorkspaceWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createCourseLink: {
    type: 'CourseLink'
    args: Record<MutationCreateCourseLinkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CourseLinkCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CourseLink> | prisma.CourseLink
  }
  updateCourseLink: {
    type: 'CourseLink'
    args: Record<MutationUpdateCourseLinkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CourseLinkUpdateInput, where: CourseLinkWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CourseLink | null> | prisma.CourseLink | null
  }
  updateManyCourseLinks: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyCourseLinksArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CourseLinkUpdateManyMutationInput, where?: CourseLinkWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertCourseLink: {
    type: 'CourseLink'
    args: Record<MutationUpsertCourseLinkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CourseLinkWhereUniqueInput, create: CourseLinkCreateInput, update: CourseLinkUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CourseLink> | prisma.CourseLink
  }
  deleteCourseLink: {
    type: 'CourseLink'
    args: Record<MutationDeleteCourseLinkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CourseLinkWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CourseLink | null> | prisma.CourseLink | null
  }
  deleteManyCourseLinks: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyCourseLinksArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: CourseLinkWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createCourse: {
    type: 'Course'
    args: Record<MutationCreateCourseArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CourseCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Course> | prisma.Course
  }
  updateCourse: {
    type: 'Course'
    args: Record<MutationUpdateCourseArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CourseUpdateInput, where: CourseWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Course | null> | prisma.Course | null
  }
  updateManyCourses: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyCoursesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CourseUpdateManyMutationInput, where?: CourseWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertCourse: {
    type: 'Course'
    args: Record<MutationUpsertCourseArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CourseWhereUniqueInput, create: CourseCreateInput, update: CourseUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Course> | prisma.Course
  }
  deleteCourse: {
    type: 'Course'
    args: Record<MutationDeleteCourseArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CourseWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Course | null> | prisma.Course | null
  }
  deleteManyCourses: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyCoursesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: CourseWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createConceptLink: {
    type: 'ConceptLink'
    args: Record<MutationCreateConceptLinkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ConceptLinkCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ConceptLink> | prisma.ConceptLink
  }
  updateConceptLink: {
    type: 'ConceptLink'
    args: Record<MutationUpdateConceptLinkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ConceptLinkUpdateInput, where: ConceptLinkWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ConceptLink | null> | prisma.ConceptLink | null
  }
  updateManyConceptLinks: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyConceptLinksArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ConceptLinkUpdateManyMutationInput, where?: ConceptLinkWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertConceptLink: {
    type: 'ConceptLink'
    args: Record<MutationUpsertConceptLinkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ConceptLinkWhereUniqueInput, create: ConceptLinkCreateInput, update: ConceptLinkUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ConceptLink> | prisma.ConceptLink
  }
  deleteConceptLink: {
    type: 'ConceptLink'
    args: Record<MutationDeleteConceptLinkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ConceptLinkWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ConceptLink | null> | prisma.ConceptLink | null
  }
  deleteManyConceptLinks: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyConceptLinksArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ConceptLinkWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createConcept: {
    type: 'Concept'
    args: Record<MutationCreateConceptArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ConceptCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Concept> | prisma.Concept
  }
  updateConcept: {
    type: 'Concept'
    args: Record<MutationUpdateConceptArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ConceptUpdateInput, where: ConceptWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Concept | null> | prisma.Concept | null
  }
  updateManyConcepts: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyConceptsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ConceptUpdateManyMutationInput, where?: ConceptWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertConcept: {
    type: 'Concept'
    args: Record<MutationUpsertConceptArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ConceptWhereUniqueInput, create: ConceptCreateInput, update: ConceptUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Concept> | prisma.Concept
  }
  deleteConcept: {
    type: 'Concept'
    args: Record<MutationDeleteConceptArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ConceptWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Concept | null> | prisma.Concept | null
  }
  deleteManyConcepts: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyConceptsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ConceptWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createResource: {
    type: 'Resource'
    args: Record<MutationCreateResourceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ResourceCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Resource> | prisma.Resource
  }
  updateResource: {
    type: 'Resource'
    args: Record<MutationUpdateResourceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ResourceUpdateInput, where: ResourceWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Resource | null> | prisma.Resource | null
  }
  updateManyResources: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyResourcesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ResourceUpdateManyMutationInput, where?: ResourceWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertResource: {
    type: 'Resource'
    args: Record<MutationUpsertResourceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ResourceWhereUniqueInput, create: ResourceCreateInput, update: ResourceUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Resource> | prisma.Resource
  }
  deleteResource: {
    type: 'Resource'
    args: Record<MutationDeleteResourceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ResourceWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Resource | null> | prisma.Resource | null
  }
  deleteManyResources: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyResourcesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ResourceWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createURL: {
    type: 'URL'
    args: Record<MutationCreateURLArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: URLCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.URL> | prisma.URL
  }
  updateURL: {
    type: 'URL'
    args: Record<MutationUpdateURLArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: URLUpdateInput, where: URLWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.URL | null> | prisma.URL | null
  }
  updateManyURLs: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyURLsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: URLUpdateManyMutationInput, where?: URLWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertURL: {
    type: 'URL'
    args: Record<MutationUpsertURLArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: URLWhereUniqueInput, create: URLCreateInput, update: URLUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.URL> | prisma.URL
  }
  deleteURL: {
    type: 'URL'
    args: Record<MutationDeleteURLArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: URLWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.URL | null> | prisma.URL | null
  }
  deleteManyURLs: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyURLsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: URLWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 
  | { name: 'project', args?: SubscriptionProjectArgs[] | false, alias?: string  } 
  | { name: 'workspace', args?: SubscriptionWorkspaceArgs[] | false, alias?: string  } 
  | { name: 'courseLink', args?: SubscriptionCourseLinkArgs[] | false, alias?: string  } 
  | { name: 'course', args?: SubscriptionCourseArgs[] | false, alias?: string  } 
  | { name: 'conceptLink', args?: SubscriptionConceptLinkArgs[] | false, alias?: string  } 
  | { name: 'concept', args?: SubscriptionConceptArgs[] | false, alias?: string  } 
  | { name: 'resource', args?: SubscriptionResourceArgs[] | false, alias?: string  } 
  | { name: 'uRL', args?: SubscriptionURLArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'user'
  | 'project'
  | 'workspace'
  | 'courseLink'
  | 'course'
  | 'conceptLink'
  | 'concept'
  | 'resource'
  | 'uRL'


type SubscriptionUserArgs =
  | 'where'
type SubscriptionProjectArgs =
  | 'where'
type SubscriptionWorkspaceArgs =
  | 'where'
type SubscriptionCourseLinkArgs =
  | 'where'
type SubscriptionCourseArgs =
  | 'where'
type SubscriptionConceptLinkArgs =
  | 'where'
type SubscriptionConceptArgs =
  | 'where'
type SubscriptionResourceArgs =
  | 'where'
type SubscriptionURLArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
  project: {
    type: 'ProjectSubscriptionPayload'
    args: Record<SubscriptionProjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ProjectSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectSubscriptionPayload | null> | prisma.ProjectSubscriptionPayload | null
  }
  workspace: {
    type: 'WorkspaceSubscriptionPayload'
    args: Record<SubscriptionWorkspaceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: WorkspaceSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WorkspaceSubscriptionPayload | null> | prisma.WorkspaceSubscriptionPayload | null
  }
  courseLink: {
    type: 'CourseLinkSubscriptionPayload'
    args: Record<SubscriptionCourseLinkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: CourseLinkSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CourseLinkSubscriptionPayload | null> | prisma.CourseLinkSubscriptionPayload | null
  }
  course: {
    type: 'CourseSubscriptionPayload'
    args: Record<SubscriptionCourseArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: CourseSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CourseSubscriptionPayload | null> | prisma.CourseSubscriptionPayload | null
  }
  conceptLink: {
    type: 'ConceptLinkSubscriptionPayload'
    args: Record<SubscriptionConceptLinkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ConceptLinkSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ConceptLinkSubscriptionPayload | null> | prisma.ConceptLinkSubscriptionPayload | null
  }
  concept: {
    type: 'ConceptSubscriptionPayload'
    args: Record<SubscriptionConceptArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ConceptSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ConceptSubscriptionPayload | null> | prisma.ConceptSubscriptionPayload | null
  }
  resource: {
    type: 'ResourceSubscriptionPayload'
    args: Record<SubscriptionResourceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ResourceSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ResourceSubscriptionPayload | null> | prisma.ResourceSubscriptionPayload | null
  }
  uRL: {
    type: 'URLSubscriptionPayload'
    args: Record<SubscriptionURLArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: URLSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.URLSubscriptionPayload | null> | prisma.URLSubscriptionPayload | null
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'tmcId', args?: [] | false, alias?: string  } 
  | { name: 'role', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'guideProgress', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'tmcId'
  | 'role'
  | 'createdAt'
  | 'guideProgress'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  tmcId: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  role: {
    type: 'Role'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Role> | prisma.Role
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  guideProgress: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProjectSubscriptionPayload

type ProjectSubscriptionPayloadObject =
  | ProjectSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ProjectSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ProjectSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Project'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project | null> | prisma.Project | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ProjectPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectPreviousValues | null> | prisma.ProjectPreviousValues | null
  }
}
  

// Types for ProjectPreviousValues

type ProjectPreviousValuesObject =
  | ProjectPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type ProjectPreviousValuesFields =
  | 'id'
  | 'name'



  

export interface ProjectPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for WorkspaceSubscriptionPayload

type WorkspaceSubscriptionPayloadObject =
  | WorkspaceSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type WorkspaceSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface WorkspaceSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"WorkspaceSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Workspace'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"WorkspaceSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Workspace | null> | prisma.Workspace | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'WorkspacePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"WorkspaceSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WorkspacePreviousValues | null> | prisma.WorkspacePreviousValues | null
  }
}
  

// Types for WorkspacePreviousValues

type WorkspacePreviousValuesObject =
  | WorkspacePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'public', args?: [] | false, alias?: string  } 

type WorkspacePreviousValuesFields =
  | 'id'
  | 'name'
  | 'public'



  

export interface WorkspacePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  public: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CourseLinkSubscriptionPayload

type CourseLinkSubscriptionPayloadObject =
  | CourseLinkSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type CourseLinkSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface CourseLinkSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CourseLinkSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'CourseLink'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CourseLinkSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CourseLink | null> | prisma.CourseLink | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'CourseLinkPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CourseLinkSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CourseLinkPreviousValues | null> | prisma.CourseLinkPreviousValues | null
  }
}
  

// Types for CourseLinkPreviousValues

type CourseLinkPreviousValuesObject =
  | CourseLinkPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'official', args?: [] | false, alias?: string  } 

type CourseLinkPreviousValuesFields =
  | 'id'
  | 'official'



  

export interface CourseLinkPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  official: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CourseSubscriptionPayload

type CourseSubscriptionPayloadObject =
  | CourseSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type CourseSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface CourseSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CourseSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Course'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CourseSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Course | null> | prisma.Course | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'CoursePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CourseSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CoursePreviousValues | null> | prisma.CoursePreviousValues | null
  }
}
  

// Types for CoursePreviousValues

type CoursePreviousValuesObject =
  | CoursePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type CoursePreviousValuesFields =
  | 'id'
  | 'name'



  

export interface CoursePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ConceptLinkSubscriptionPayload

type ConceptLinkSubscriptionPayloadObject =
  | ConceptLinkSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ConceptLinkSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ConceptLinkSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ConceptLinkSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'ConceptLink'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ConceptLinkSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ConceptLink | null> | prisma.ConceptLink | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ConceptLinkPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ConceptLinkSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ConceptLinkPreviousValues | null> | prisma.ConceptLinkPreviousValues | null
  }
}
  

// Types for ConceptLinkPreviousValues

type ConceptLinkPreviousValuesObject =
  | ConceptLinkPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'official', args?: [] | false, alias?: string  } 

type ConceptLinkPreviousValuesFields =
  | 'id'
  | 'official'



  

export interface ConceptLinkPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  official: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ConceptSubscriptionPayload

type ConceptSubscriptionPayloadObject =
  | ConceptSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ConceptSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ConceptSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ConceptSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Concept'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ConceptSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Concept | null> | prisma.Concept | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ConceptPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ConceptSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ConceptPreviousValues | null> | prisma.ConceptPreviousValues | null
  }
}
  

// Types for ConceptPreviousValues

type ConceptPreviousValuesObject =
  | ConceptPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'official', args?: [] | false, alias?: string  } 

type ConceptPreviousValuesFields =
  | 'id'
  | 'name'
  | 'description'
  | 'official'



  

export interface ConceptPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  official: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ResourceSubscriptionPayload

type ResourceSubscriptionPayloadObject =
  | ResourceSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ResourceSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ResourceSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ResourceSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Resource'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ResourceSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Resource | null> | prisma.Resource | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ResourcePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ResourceSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ResourcePreviousValues | null> | prisma.ResourcePreviousValues | null
  }
}
  

// Types for ResourcePreviousValues

type ResourcePreviousValuesObject =
  | ResourcePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 

type ResourcePreviousValuesFields =
  | 'id'
  | 'name'
  | 'description'



  

export interface ResourcePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for URLSubscriptionPayload

type URLSubscriptionPayloadObject =
  | URLSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type URLSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface URLSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"URLSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'URL'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"URLSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.URL | null> | prisma.URL | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'URLPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"URLSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.URLPreviousValues | null> | prisma.URLPreviousValues | null
  }
}
  

// Types for URLPreviousValues

type URLPreviousValuesObject =
  | URLPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'address', args?: [] | false, alias?: string  } 

type URLPreviousValuesFields =
  | 'id'
  | 'address'



  

export interface URLPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  address: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface UserWhereUniqueInput {
  id?: string | null
  tmcId?: number | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'tmcId', alias?: string  } 
  
export interface WorkspaceWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  project?: ProjectWhereInput | null
  owner?: UserWhereInput | null
  public?: boolean | null
  public_not?: boolean | null
  defaultCourse?: CourseWhereInput | null
  courses_every?: CourseWhereInput | null
  courses_some?: CourseWhereInput | null
  courses_none?: CourseWhereInput | null
  concepts_every?: ConceptWhereInput | null
  concepts_some?: ConceptWhereInput | null
  concepts_none?: ConceptWhereInput | null
  conceptLinks_every?: ConceptLinkWhereInput | null
  conceptLinks_some?: ConceptLinkWhereInput | null
  conceptLinks_none?: ConceptLinkWhereInput | null
  courseLinks_every?: CourseLinkWhereInput | null
  courseLinks_some?: CourseLinkWhereInput | null
  courseLinks_none?: CourseLinkWhereInput | null
  AND?: WorkspaceWhereInput[]
  OR?: WorkspaceWhereInput[]
  NOT?: WorkspaceWhereInput[]
}
export type WorkspaceWhereInputInputObject =
  | Extract<keyof WorkspaceWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'project', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'public', alias?: string  } 
  | { name: 'public_not', alias?: string  } 
  | { name: 'defaultCourse', alias?: string  } 
  | { name: 'courses_every', alias?: string  } 
  | { name: 'courses_some', alias?: string  } 
  | { name: 'courses_none', alias?: string  } 
  | { name: 'concepts_every', alias?: string  } 
  | { name: 'concepts_some', alias?: string  } 
  | { name: 'concepts_none', alias?: string  } 
  | { name: 'conceptLinks_every', alias?: string  } 
  | { name: 'conceptLinks_some', alias?: string  } 
  | { name: 'conceptLinks_none', alias?: string  } 
  | { name: 'courseLinks_every', alias?: string  } 
  | { name: 'courseLinks_some', alias?: string  } 
  | { name: 'courseLinks_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  owner?: UserWhereInput | null
  participants_every?: UserWhereInput | null
  participants_some?: UserWhereInput | null
  participants_none?: UserWhereInput | null
  workspaces_every?: WorkspaceWhereInput | null
  workspaces_some?: WorkspaceWhereInput | null
  workspaces_none?: WorkspaceWhereInput | null
  template?: WorkspaceWhereInput | null
  AND?: ProjectWhereInput[]
  OR?: ProjectWhereInput[]
  NOT?: ProjectWhereInput[]
}
export type ProjectWhereInputInputObject =
  | Extract<keyof ProjectWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'participants_every', alias?: string  } 
  | { name: 'participants_some', alias?: string  } 
  | { name: 'participants_none', alias?: string  } 
  | { name: 'workspaces_every', alias?: string  } 
  | { name: 'workspaces_some', alias?: string  } 
  | { name: 'workspaces_none', alias?: string  } 
  | { name: 'template', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  tmcId?: number | null
  tmcId_not?: number | null
  tmcId_in?: number[]
  tmcId_not_in?: number[]
  tmcId_lt?: number | null
  tmcId_lte?: number | null
  tmcId_gt?: number | null
  tmcId_gte?: number | null
  role?: prisma.Role | null
  role_not?: prisma.Role | null
  role_in?: prisma.Role[]
  role_not_in?: prisma.Role[]
  asWorkspaceOwner_every?: WorkspaceWhereInput | null
  asWorkspaceOwner_some?: WorkspaceWhereInput | null
  asWorkspaceOwner_none?: WorkspaceWhereInput | null
  asProjectOwner_every?: ProjectWhereInput | null
  asProjectOwner_some?: ProjectWhereInput | null
  asProjectOwner_none?: ProjectWhereInput | null
  asProjectParticipant_every?: ProjectWhereInput | null
  asProjectParticipant_some?: ProjectWhereInput | null
  asProjectParticipant_none?: ProjectWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  guideProgress?: number | null
  guideProgress_not?: number | null
  guideProgress_in?: number[]
  guideProgress_not_in?: number[]
  guideProgress_lt?: number | null
  guideProgress_lte?: number | null
  guideProgress_gt?: number | null
  guideProgress_gte?: number | null
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'tmcId', alias?: string  } 
  | { name: 'tmcId_not', alias?: string  } 
  | { name: 'tmcId_in', alias?: string  } 
  | { name: 'tmcId_not_in', alias?: string  } 
  | { name: 'tmcId_lt', alias?: string  } 
  | { name: 'tmcId_lte', alias?: string  } 
  | { name: 'tmcId_gt', alias?: string  } 
  | { name: 'tmcId_gte', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'role_not', alias?: string  } 
  | { name: 'role_in', alias?: string  } 
  | { name: 'role_not_in', alias?: string  } 
  | { name: 'asWorkspaceOwner_every', alias?: string  } 
  | { name: 'asWorkspaceOwner_some', alias?: string  } 
  | { name: 'asWorkspaceOwner_none', alias?: string  } 
  | { name: 'asProjectOwner_every', alias?: string  } 
  | { name: 'asProjectOwner_some', alias?: string  } 
  | { name: 'asProjectOwner_none', alias?: string  } 
  | { name: 'asProjectParticipant_every', alias?: string  } 
  | { name: 'asProjectParticipant_some', alias?: string  } 
  | { name: 'asProjectParticipant_none', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'guideProgress', alias?: string  } 
  | { name: 'guideProgress_not', alias?: string  } 
  | { name: 'guideProgress_in', alias?: string  } 
  | { name: 'guideProgress_not_in', alias?: string  } 
  | { name: 'guideProgress_lt', alias?: string  } 
  | { name: 'guideProgress_lte', alias?: string  } 
  | { name: 'guideProgress_gt', alias?: string  } 
  | { name: 'guideProgress_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CourseWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  createdBy?: UserWhereInput | null
  linksFromCourse_every?: CourseLinkWhereInput | null
  linksFromCourse_some?: CourseLinkWhereInput | null
  linksFromCourse_none?: CourseLinkWhereInput | null
  linksToCourse_every?: CourseLinkWhereInput | null
  linksToCourse_some?: CourseLinkWhereInput | null
  linksToCourse_none?: CourseLinkWhereInput | null
  concepts_every?: ConceptWhereInput | null
  concepts_some?: ConceptWhereInput | null
  concepts_none?: ConceptWhereInput | null
  workspace?: WorkspaceWhereInput | null
  AND?: CourseWhereInput[]
  OR?: CourseWhereInput[]
  NOT?: CourseWhereInput[]
}
export type CourseWhereInputInputObject =
  | Extract<keyof CourseWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  | { name: 'linksFromCourse_every', alias?: string  } 
  | { name: 'linksFromCourse_some', alias?: string  } 
  | { name: 'linksFromCourse_none', alias?: string  } 
  | { name: 'linksToCourse_every', alias?: string  } 
  | { name: 'linksToCourse_some', alias?: string  } 
  | { name: 'linksToCourse_none', alias?: string  } 
  | { name: 'concepts_every', alias?: string  } 
  | { name: 'concepts_some', alias?: string  } 
  | { name: 'concepts_none', alias?: string  } 
  | { name: 'workspace', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CourseLinkWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  from?: CourseWhereInput | null
  to?: CourseWhereInput | null
  official?: boolean | null
  official_not?: boolean | null
  createdBy?: UserWhereInput | null
  workspace?: WorkspaceWhereInput | null
  AND?: CourseLinkWhereInput[]
  OR?: CourseLinkWhereInput[]
  NOT?: CourseLinkWhereInput[]
}
export type CourseLinkWhereInputInputObject =
  | Extract<keyof CourseLinkWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'from', alias?: string  } 
  | { name: 'to', alias?: string  } 
  | { name: 'official', alias?: string  } 
  | { name: 'official_not', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  | { name: 'workspace', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ConceptWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  official?: boolean | null
  official_not?: boolean | null
  createdBy?: UserWhereInput | null
  linksFromConcept_every?: ConceptLinkWhereInput | null
  linksFromConcept_some?: ConceptLinkWhereInput | null
  linksFromConcept_none?: ConceptLinkWhereInput | null
  linksToConcept_every?: ConceptLinkWhereInput | null
  linksToConcept_some?: ConceptLinkWhereInput | null
  linksToConcept_none?: ConceptLinkWhereInput | null
  courses_every?: CourseWhereInput | null
  courses_some?: CourseWhereInput | null
  courses_none?: CourseWhereInput | null
  resources_every?: ResourceWhereInput | null
  resources_some?: ResourceWhereInput | null
  resources_none?: ResourceWhereInput | null
  workspace?: WorkspaceWhereInput | null
  AND?: ConceptWhereInput[]
  OR?: ConceptWhereInput[]
  NOT?: ConceptWhereInput[]
}
export type ConceptWhereInputInputObject =
  | Extract<keyof ConceptWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'official', alias?: string  } 
  | { name: 'official_not', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  | { name: 'linksFromConcept_every', alias?: string  } 
  | { name: 'linksFromConcept_some', alias?: string  } 
  | { name: 'linksFromConcept_none', alias?: string  } 
  | { name: 'linksToConcept_every', alias?: string  } 
  | { name: 'linksToConcept_some', alias?: string  } 
  | { name: 'linksToConcept_none', alias?: string  } 
  | { name: 'courses_every', alias?: string  } 
  | { name: 'courses_some', alias?: string  } 
  | { name: 'courses_none', alias?: string  } 
  | { name: 'resources_every', alias?: string  } 
  | { name: 'resources_some', alias?: string  } 
  | { name: 'resources_none', alias?: string  } 
  | { name: 'workspace', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ConceptLinkWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  from?: ConceptWhereInput | null
  to?: ConceptWhereInput | null
  official?: boolean | null
  official_not?: boolean | null
  workspace?: WorkspaceWhereInput | null
  createdBy?: UserWhereInput | null
  AND?: ConceptLinkWhereInput[]
  OR?: ConceptLinkWhereInput[]
  NOT?: ConceptLinkWhereInput[]
}
export type ConceptLinkWhereInputInputObject =
  | Extract<keyof ConceptLinkWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'from', alias?: string  } 
  | { name: 'to', alias?: string  } 
  | { name: 'official', alias?: string  } 
  | { name: 'official_not', alias?: string  } 
  | { name: 'workspace', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ResourceWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  concept?: ConceptWhereInput | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  urls_every?: URLWhereInput | null
  urls_some?: URLWhereInput | null
  urls_none?: URLWhereInput | null
  AND?: ResourceWhereInput[]
  OR?: ResourceWhereInput[]
  NOT?: ResourceWhereInput[]
}
export type ResourceWhereInputInputObject =
  | Extract<keyof ResourceWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'concept', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'urls_every', alias?: string  } 
  | { name: 'urls_some', alias?: string  } 
  | { name: 'urls_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface URLWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  address?: string | null
  address_not?: string | null
  address_in?: string[]
  address_not_in?: string[]
  address_lt?: string | null
  address_lte?: string | null
  address_gt?: string | null
  address_gte?: string | null
  address_contains?: string | null
  address_not_contains?: string | null
  address_starts_with?: string | null
  address_not_starts_with?: string | null
  address_ends_with?: string | null
  address_not_ends_with?: string | null
  resource?: ResourceWhereInput | null
  AND?: URLWhereInput[]
  OR?: URLWhereInput[]
  NOT?: URLWhereInput[]
}
export type URLWhereInputInputObject =
  | Extract<keyof URLWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'address_not', alias?: string  } 
  | { name: 'address_in', alias?: string  } 
  | { name: 'address_not_in', alias?: string  } 
  | { name: 'address_lt', alias?: string  } 
  | { name: 'address_lte', alias?: string  } 
  | { name: 'address_gt', alias?: string  } 
  | { name: 'address_gte', alias?: string  } 
  | { name: 'address_contains', alias?: string  } 
  | { name: 'address_not_contains', alias?: string  } 
  | { name: 'address_starts_with', alias?: string  } 
  | { name: 'address_not_starts_with', alias?: string  } 
  | { name: 'address_ends_with', alias?: string  } 
  | { name: 'address_not_ends_with', alias?: string  } 
  | { name: 'resource', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectWhereUniqueInput {
  id?: string | null
}
export type ProjectWhereUniqueInputInputObject =
  | Extract<keyof ProjectWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface WorkspaceWhereUniqueInput {
  id?: string | null
}
export type WorkspaceWhereUniqueInputInputObject =
  | Extract<keyof WorkspaceWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface CourseLinkWhereUniqueInput {
  id?: string | null
}
export type CourseLinkWhereUniqueInputInputObject =
  | Extract<keyof CourseLinkWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface CourseWhereUniqueInput {
  id?: string | null
}
export type CourseWhereUniqueInputInputObject =
  | Extract<keyof CourseWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ConceptLinkWhereUniqueInput {
  id?: string | null
}
export type ConceptLinkWhereUniqueInputInputObject =
  | Extract<keyof ConceptLinkWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ConceptWhereUniqueInput {
  id?: string | null
}
export type ConceptWhereUniqueInputInputObject =
  | Extract<keyof ConceptWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ResourceWhereUniqueInput {
  id?: string | null
}
export type ResourceWhereUniqueInputInputObject =
  | Extract<keyof ResourceWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface URLWhereUniqueInput {
  id?: string | null
}
export type URLWhereUniqueInputInputObject =
  | Extract<keyof URLWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface UserCreateInput {
  id?: string | null
  tmcId?: number | null
  role?: prisma.Role
  asWorkspaceOwner?: WorkspaceCreateManyWithoutOwnerInput | null
  asProjectOwner?: ProjectCreateManyWithoutOwnerInput | null
  asProjectParticipant?: ProjectCreateManyWithoutParticipantsInput | null
  guideProgress?: number | null
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'tmcId', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'asWorkspaceOwner', alias?: string  } 
  | { name: 'asProjectOwner', alias?: string  } 
  | { name: 'asProjectParticipant', alias?: string  } 
  | { name: 'guideProgress', alias?: string  } 
  
export interface WorkspaceCreateManyWithoutOwnerInput {
  create?: WorkspaceCreateWithoutOwnerInput[]
  connect?: WorkspaceWhereUniqueInput[]
}
export type WorkspaceCreateManyWithoutOwnerInputInputObject =
  | Extract<keyof WorkspaceCreateManyWithoutOwnerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface WorkspaceCreateWithoutOwnerInput {
  id?: string | null
  name?: string
  project?: ProjectCreateOneWithoutWorkspacesInput | null
  public?: boolean | null
  defaultCourse?: CourseCreateOneInput | null
  courses?: CourseCreateManyWithoutWorkspaceInput | null
  concepts?: ConceptCreateManyWithoutWorkspaceInput | null
  conceptLinks?: ConceptLinkCreateManyWithoutWorkspaceInput | null
  courseLinks?: CourseLinkCreateManyWithoutWorkspaceInput | null
}
export type WorkspaceCreateWithoutOwnerInputInputObject =
  | Extract<keyof WorkspaceCreateWithoutOwnerInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'project', alias?: string  } 
  | { name: 'public', alias?: string  } 
  | { name: 'defaultCourse', alias?: string  } 
  | { name: 'courses', alias?: string  } 
  | { name: 'concepts', alias?: string  } 
  | { name: 'conceptLinks', alias?: string  } 
  | { name: 'courseLinks', alias?: string  } 
  
export interface ProjectCreateOneWithoutWorkspacesInput {
  create?: ProjectCreateWithoutWorkspacesInput | null
  connect?: ProjectWhereUniqueInput | null
}
export type ProjectCreateOneWithoutWorkspacesInputInputObject =
  | Extract<keyof ProjectCreateOneWithoutWorkspacesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectCreateWithoutWorkspacesInput {
  id?: string | null
  name?: string
  owner?: UserCreateOneWithoutAsProjectOwnerInput
  participants?: UserCreateManyWithoutAsProjectParticipantInput | null
  template?: WorkspaceCreateOneInput | null
}
export type ProjectCreateWithoutWorkspacesInputInputObject =
  | Extract<keyof ProjectCreateWithoutWorkspacesInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'participants', alias?: string  } 
  | { name: 'template', alias?: string  } 
  
export interface UserCreateOneWithoutAsProjectOwnerInput {
  create?: UserCreateWithoutAsProjectOwnerInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutAsProjectOwnerInputInputObject =
  | Extract<keyof UserCreateOneWithoutAsProjectOwnerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutAsProjectOwnerInput {
  id?: string | null
  tmcId?: number | null
  role?: prisma.Role
  asWorkspaceOwner?: WorkspaceCreateManyWithoutOwnerInput | null
  asProjectParticipant?: ProjectCreateManyWithoutParticipantsInput | null
  guideProgress?: number | null
}
export type UserCreateWithoutAsProjectOwnerInputInputObject =
  | Extract<keyof UserCreateWithoutAsProjectOwnerInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'tmcId', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'asWorkspaceOwner', alias?: string  } 
  | { name: 'asProjectParticipant', alias?: string  } 
  | { name: 'guideProgress', alias?: string  } 
  
export interface ProjectCreateManyWithoutParticipantsInput {
  create?: ProjectCreateWithoutParticipantsInput[]
  connect?: ProjectWhereUniqueInput[]
}
export type ProjectCreateManyWithoutParticipantsInputInputObject =
  | Extract<keyof ProjectCreateManyWithoutParticipantsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectCreateWithoutParticipantsInput {
  id?: string | null
  name?: string
  owner?: UserCreateOneWithoutAsProjectOwnerInput
  workspaces?: WorkspaceCreateManyWithoutProjectInput | null
  template?: WorkspaceCreateOneInput | null
}
export type ProjectCreateWithoutParticipantsInputInputObject =
  | Extract<keyof ProjectCreateWithoutParticipantsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'workspaces', alias?: string  } 
  | { name: 'template', alias?: string  } 
  
export interface WorkspaceCreateManyWithoutProjectInput {
  create?: WorkspaceCreateWithoutProjectInput[]
  connect?: WorkspaceWhereUniqueInput[]
}
export type WorkspaceCreateManyWithoutProjectInputInputObject =
  | Extract<keyof WorkspaceCreateManyWithoutProjectInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface WorkspaceCreateWithoutProjectInput {
  id?: string | null
  name?: string
  owner?: UserCreateOneWithoutAsWorkspaceOwnerInput | null
  public?: boolean | null
  defaultCourse?: CourseCreateOneInput | null
  courses?: CourseCreateManyWithoutWorkspaceInput | null
  concepts?: ConceptCreateManyWithoutWorkspaceInput | null
  conceptLinks?: ConceptLinkCreateManyWithoutWorkspaceInput | null
  courseLinks?: CourseLinkCreateManyWithoutWorkspaceInput | null
}
export type WorkspaceCreateWithoutProjectInputInputObject =
  | Extract<keyof WorkspaceCreateWithoutProjectInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'public', alias?: string  } 
  | { name: 'defaultCourse', alias?: string  } 
  | { name: 'courses', alias?: string  } 
  | { name: 'concepts', alias?: string  } 
  | { name: 'conceptLinks', alias?: string  } 
  | { name: 'courseLinks', alias?: string  } 
  
export interface UserCreateOneWithoutAsWorkspaceOwnerInput {
  create?: UserCreateWithoutAsWorkspaceOwnerInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutAsWorkspaceOwnerInputInputObject =
  | Extract<keyof UserCreateOneWithoutAsWorkspaceOwnerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutAsWorkspaceOwnerInput {
  id?: string | null
  tmcId?: number | null
  role?: prisma.Role
  asProjectOwner?: ProjectCreateManyWithoutOwnerInput | null
  asProjectParticipant?: ProjectCreateManyWithoutParticipantsInput | null
  guideProgress?: number | null
}
export type UserCreateWithoutAsWorkspaceOwnerInputInputObject =
  | Extract<keyof UserCreateWithoutAsWorkspaceOwnerInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'tmcId', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'asProjectOwner', alias?: string  } 
  | { name: 'asProjectParticipant', alias?: string  } 
  | { name: 'guideProgress', alias?: string  } 
  
export interface ProjectCreateManyWithoutOwnerInput {
  create?: ProjectCreateWithoutOwnerInput[]
  connect?: ProjectWhereUniqueInput[]
}
export type ProjectCreateManyWithoutOwnerInputInputObject =
  | Extract<keyof ProjectCreateManyWithoutOwnerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectCreateWithoutOwnerInput {
  id?: string | null
  name?: string
  participants?: UserCreateManyWithoutAsProjectParticipantInput | null
  workspaces?: WorkspaceCreateManyWithoutProjectInput | null
  template?: WorkspaceCreateOneInput | null
}
export type ProjectCreateWithoutOwnerInputInputObject =
  | Extract<keyof ProjectCreateWithoutOwnerInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'participants', alias?: string  } 
  | { name: 'workspaces', alias?: string  } 
  | { name: 'template', alias?: string  } 
  
export interface UserCreateManyWithoutAsProjectParticipantInput {
  create?: UserCreateWithoutAsProjectParticipantInput[]
  connect?: UserWhereUniqueInput[]
}
export type UserCreateManyWithoutAsProjectParticipantInputInputObject =
  | Extract<keyof UserCreateManyWithoutAsProjectParticipantInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutAsProjectParticipantInput {
  id?: string | null
  tmcId?: number | null
  role?: prisma.Role
  asWorkspaceOwner?: WorkspaceCreateManyWithoutOwnerInput | null
  asProjectOwner?: ProjectCreateManyWithoutOwnerInput | null
  guideProgress?: number | null
}
export type UserCreateWithoutAsProjectParticipantInputInputObject =
  | Extract<keyof UserCreateWithoutAsProjectParticipantInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'tmcId', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'asWorkspaceOwner', alias?: string  } 
  | { name: 'asProjectOwner', alias?: string  } 
  | { name: 'guideProgress', alias?: string  } 
  
export interface WorkspaceCreateOneInput {
  create?: WorkspaceCreateInput | null
  connect?: WorkspaceWhereUniqueInput | null
}
export type WorkspaceCreateOneInputInputObject =
  | Extract<keyof WorkspaceCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface WorkspaceCreateInput {
  id?: string | null
  name?: string
  project?: ProjectCreateOneWithoutWorkspacesInput | null
  owner?: UserCreateOneWithoutAsWorkspaceOwnerInput | null
  public?: boolean | null
  defaultCourse?: CourseCreateOneInput | null
  courses?: CourseCreateManyWithoutWorkspaceInput | null
  concepts?: ConceptCreateManyWithoutWorkspaceInput | null
  conceptLinks?: ConceptLinkCreateManyWithoutWorkspaceInput | null
  courseLinks?: CourseLinkCreateManyWithoutWorkspaceInput | null
}
export type WorkspaceCreateInputInputObject =
  | Extract<keyof WorkspaceCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'project', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'public', alias?: string  } 
  | { name: 'defaultCourse', alias?: string  } 
  | { name: 'courses', alias?: string  } 
  | { name: 'concepts', alias?: string  } 
  | { name: 'conceptLinks', alias?: string  } 
  | { name: 'courseLinks', alias?: string  } 
  
export interface CourseCreateOneInput {
  create?: CourseCreateInput | null
  connect?: CourseWhereUniqueInput | null
}
export type CourseCreateOneInputInputObject =
  | Extract<keyof CourseCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CourseCreateInput {
  id?: string | null
  name?: string
  createdBy?: UserCreateOneInput
  linksFromCourse?: CourseLinkCreateManyWithoutFromInput | null
  linksToCourse?: CourseLinkCreateManyWithoutToInput | null
  concepts?: ConceptCreateManyWithoutCoursesInput | null
  workspace?: WorkspaceCreateOneWithoutCoursesInput
}
export type CourseCreateInputInputObject =
  | Extract<keyof CourseCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  | { name: 'linksFromCourse', alias?: string  } 
  | { name: 'linksToCourse', alias?: string  } 
  | { name: 'concepts', alias?: string  } 
  | { name: 'workspace', alias?: string  } 
  
export interface UserCreateOneInput {
  create?: UserCreateInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneInputInputObject =
  | Extract<keyof UserCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CourseLinkCreateManyWithoutFromInput {
  create?: CourseLinkCreateWithoutFromInput[]
  connect?: CourseLinkWhereUniqueInput[]
}
export type CourseLinkCreateManyWithoutFromInputInputObject =
  | Extract<keyof CourseLinkCreateManyWithoutFromInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CourseLinkCreateWithoutFromInput {
  id?: string | null
  to?: CourseCreateOneWithoutLinksToCourseInput
  official?: boolean | null
  createdBy?: UserCreateOneInput
  workspace?: WorkspaceCreateOneWithoutCourseLinksInput
}
export type CourseLinkCreateWithoutFromInputInputObject =
  | Extract<keyof CourseLinkCreateWithoutFromInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'to', alias?: string  } 
  | { name: 'official', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  | { name: 'workspace', alias?: string  } 
  
export interface CourseCreateOneWithoutLinksToCourseInput {
  create?: CourseCreateWithoutLinksToCourseInput | null
  connect?: CourseWhereUniqueInput | null
}
export type CourseCreateOneWithoutLinksToCourseInputInputObject =
  | Extract<keyof CourseCreateOneWithoutLinksToCourseInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CourseCreateWithoutLinksToCourseInput {
  id?: string | null
  name?: string
  createdBy?: UserCreateOneInput
  linksFromCourse?: CourseLinkCreateManyWithoutFromInput | null
  concepts?: ConceptCreateManyWithoutCoursesInput | null
  workspace?: WorkspaceCreateOneWithoutCoursesInput
}
export type CourseCreateWithoutLinksToCourseInputInputObject =
  | Extract<keyof CourseCreateWithoutLinksToCourseInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  | { name: 'linksFromCourse', alias?: string  } 
  | { name: 'concepts', alias?: string  } 
  | { name: 'workspace', alias?: string  } 
  
export interface ConceptCreateManyWithoutCoursesInput {
  create?: ConceptCreateWithoutCoursesInput[]
  connect?: ConceptWhereUniqueInput[]
}
export type ConceptCreateManyWithoutCoursesInputInputObject =
  | Extract<keyof ConceptCreateManyWithoutCoursesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ConceptCreateWithoutCoursesInput {
  id?: string | null
  name?: string
  description?: string | null
  official?: boolean | null
  createdBy?: UserCreateOneInput
  linksFromConcept?: ConceptLinkCreateManyWithoutFromInput | null
  linksToConcept?: ConceptLinkCreateManyWithoutToInput | null
  resources?: ResourceCreateManyWithoutConceptInput | null
  workspace?: WorkspaceCreateOneWithoutConceptsInput
}
export type ConceptCreateWithoutCoursesInputInputObject =
  | Extract<keyof ConceptCreateWithoutCoursesInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'official', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  | { name: 'linksFromConcept', alias?: string  } 
  | { name: 'linksToConcept', alias?: string  } 
  | { name: 'resources', alias?: string  } 
  | { name: 'workspace', alias?: string  } 
  
export interface ConceptLinkCreateManyWithoutFromInput {
  create?: ConceptLinkCreateWithoutFromInput[]
  connect?: ConceptLinkWhereUniqueInput[]
}
export type ConceptLinkCreateManyWithoutFromInputInputObject =
  | Extract<keyof ConceptLinkCreateManyWithoutFromInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ConceptLinkCreateWithoutFromInput {
  id?: string | null
  to?: ConceptCreateOneWithoutLinksToConceptInput
  official?: boolean | null
  workspace?: WorkspaceCreateOneWithoutConceptLinksInput
  createdBy?: UserCreateOneInput
}
export type ConceptLinkCreateWithoutFromInputInputObject =
  | Extract<keyof ConceptLinkCreateWithoutFromInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'to', alias?: string  } 
  | { name: 'official', alias?: string  } 
  | { name: 'workspace', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  
export interface ConceptCreateOneWithoutLinksToConceptInput {
  create?: ConceptCreateWithoutLinksToConceptInput | null
  connect?: ConceptWhereUniqueInput | null
}
export type ConceptCreateOneWithoutLinksToConceptInputInputObject =
  | Extract<keyof ConceptCreateOneWithoutLinksToConceptInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ConceptCreateWithoutLinksToConceptInput {
  id?: string | null
  name?: string
  description?: string | null
  official?: boolean | null
  createdBy?: UserCreateOneInput
  linksFromConcept?: ConceptLinkCreateManyWithoutFromInput | null
  courses?: CourseCreateManyWithoutConceptsInput | null
  resources?: ResourceCreateManyWithoutConceptInput | null
  workspace?: WorkspaceCreateOneWithoutConceptsInput
}
export type ConceptCreateWithoutLinksToConceptInputInputObject =
  | Extract<keyof ConceptCreateWithoutLinksToConceptInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'official', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  | { name: 'linksFromConcept', alias?: string  } 
  | { name: 'courses', alias?: string  } 
  | { name: 'resources', alias?: string  } 
  | { name: 'workspace', alias?: string  } 
  
export interface CourseCreateManyWithoutConceptsInput {
  create?: CourseCreateWithoutConceptsInput[]
  connect?: CourseWhereUniqueInput[]
}
export type CourseCreateManyWithoutConceptsInputInputObject =
  | Extract<keyof CourseCreateManyWithoutConceptsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CourseCreateWithoutConceptsInput {
  id?: string | null
  name?: string
  createdBy?: UserCreateOneInput
  linksFromCourse?: CourseLinkCreateManyWithoutFromInput | null
  linksToCourse?: CourseLinkCreateManyWithoutToInput | null
  workspace?: WorkspaceCreateOneWithoutCoursesInput
}
export type CourseCreateWithoutConceptsInputInputObject =
  | Extract<keyof CourseCreateWithoutConceptsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  | { name: 'linksFromCourse', alias?: string  } 
  | { name: 'linksToCourse', alias?: string  } 
  | { name: 'workspace', alias?: string  } 
  
export interface CourseLinkCreateManyWithoutToInput {
  create?: CourseLinkCreateWithoutToInput[]
  connect?: CourseLinkWhereUniqueInput[]
}
export type CourseLinkCreateManyWithoutToInputInputObject =
  | Extract<keyof CourseLinkCreateManyWithoutToInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CourseLinkCreateWithoutToInput {
  id?: string | null
  from?: CourseCreateOneWithoutLinksFromCourseInput
  official?: boolean | null
  createdBy?: UserCreateOneInput
  workspace?: WorkspaceCreateOneWithoutCourseLinksInput
}
export type CourseLinkCreateWithoutToInputInputObject =
  | Extract<keyof CourseLinkCreateWithoutToInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'from', alias?: string  } 
  | { name: 'official', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  | { name: 'workspace', alias?: string  } 
  
export interface CourseCreateOneWithoutLinksFromCourseInput {
  create?: CourseCreateWithoutLinksFromCourseInput | null
  connect?: CourseWhereUniqueInput | null
}
export type CourseCreateOneWithoutLinksFromCourseInputInputObject =
  | Extract<keyof CourseCreateOneWithoutLinksFromCourseInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CourseCreateWithoutLinksFromCourseInput {
  id?: string | null
  name?: string
  createdBy?: UserCreateOneInput
  linksToCourse?: CourseLinkCreateManyWithoutToInput | null
  concepts?: ConceptCreateManyWithoutCoursesInput | null
  workspace?: WorkspaceCreateOneWithoutCoursesInput
}
export type CourseCreateWithoutLinksFromCourseInputInputObject =
  | Extract<keyof CourseCreateWithoutLinksFromCourseInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  | { name: 'linksToCourse', alias?: string  } 
  | { name: 'concepts', alias?: string  } 
  | { name: 'workspace', alias?: string  } 
  
export interface WorkspaceCreateOneWithoutCoursesInput {
  create?: WorkspaceCreateWithoutCoursesInput | null
  connect?: WorkspaceWhereUniqueInput | null
}
export type WorkspaceCreateOneWithoutCoursesInputInputObject =
  | Extract<keyof WorkspaceCreateOneWithoutCoursesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface WorkspaceCreateWithoutCoursesInput {
  id?: string | null
  name?: string
  project?: ProjectCreateOneWithoutWorkspacesInput | null
  owner?: UserCreateOneWithoutAsWorkspaceOwnerInput | null
  public?: boolean | null
  defaultCourse?: CourseCreateOneInput | null
  concepts?: ConceptCreateManyWithoutWorkspaceInput | null
  conceptLinks?: ConceptLinkCreateManyWithoutWorkspaceInput | null
  courseLinks?: CourseLinkCreateManyWithoutWorkspaceInput | null
}
export type WorkspaceCreateWithoutCoursesInputInputObject =
  | Extract<keyof WorkspaceCreateWithoutCoursesInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'project', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'public', alias?: string  } 
  | { name: 'defaultCourse', alias?: string  } 
  | { name: 'concepts', alias?: string  } 
  | { name: 'conceptLinks', alias?: string  } 
  | { name: 'courseLinks', alias?: string  } 
  
export interface ConceptCreateManyWithoutWorkspaceInput {
  create?: ConceptCreateWithoutWorkspaceInput[]
  connect?: ConceptWhereUniqueInput[]
}
export type ConceptCreateManyWithoutWorkspaceInputInputObject =
  | Extract<keyof ConceptCreateManyWithoutWorkspaceInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ConceptCreateWithoutWorkspaceInput {
  id?: string | null
  name?: string
  description?: string | null
  official?: boolean | null
  createdBy?: UserCreateOneInput
  linksFromConcept?: ConceptLinkCreateManyWithoutFromInput | null
  linksToConcept?: ConceptLinkCreateManyWithoutToInput | null
  courses?: CourseCreateManyWithoutConceptsInput | null
  resources?: ResourceCreateManyWithoutConceptInput | null
}
export type ConceptCreateWithoutWorkspaceInputInputObject =
  | Extract<keyof ConceptCreateWithoutWorkspaceInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'official', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  | { name: 'linksFromConcept', alias?: string  } 
  | { name: 'linksToConcept', alias?: string  } 
  | { name: 'courses', alias?: string  } 
  | { name: 'resources', alias?: string  } 
  
export interface ConceptLinkCreateManyWithoutToInput {
  create?: ConceptLinkCreateWithoutToInput[]
  connect?: ConceptLinkWhereUniqueInput[]
}
export type ConceptLinkCreateManyWithoutToInputInputObject =
  | Extract<keyof ConceptLinkCreateManyWithoutToInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ConceptLinkCreateWithoutToInput {
  id?: string | null
  from?: ConceptCreateOneWithoutLinksFromConceptInput
  official?: boolean | null
  workspace?: WorkspaceCreateOneWithoutConceptLinksInput
  createdBy?: UserCreateOneInput
}
export type ConceptLinkCreateWithoutToInputInputObject =
  | Extract<keyof ConceptLinkCreateWithoutToInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'from', alias?: string  } 
  | { name: 'official', alias?: string  } 
  | { name: 'workspace', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  
export interface ConceptCreateOneWithoutLinksFromConceptInput {
  create?: ConceptCreateWithoutLinksFromConceptInput | null
  connect?: ConceptWhereUniqueInput | null
}
export type ConceptCreateOneWithoutLinksFromConceptInputInputObject =
  | Extract<keyof ConceptCreateOneWithoutLinksFromConceptInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ConceptCreateWithoutLinksFromConceptInput {
  id?: string | null
  name?: string
  description?: string | null
  official?: boolean | null
  createdBy?: UserCreateOneInput
  linksToConcept?: ConceptLinkCreateManyWithoutToInput | null
  courses?: CourseCreateManyWithoutConceptsInput | null
  resources?: ResourceCreateManyWithoutConceptInput | null
  workspace?: WorkspaceCreateOneWithoutConceptsInput
}
export type ConceptCreateWithoutLinksFromConceptInputInputObject =
  | Extract<keyof ConceptCreateWithoutLinksFromConceptInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'official', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  | { name: 'linksToConcept', alias?: string  } 
  | { name: 'courses', alias?: string  } 
  | { name: 'resources', alias?: string  } 
  | { name: 'workspace', alias?: string  } 
  
export interface ResourceCreateManyWithoutConceptInput {
  create?: ResourceCreateWithoutConceptInput[]
  connect?: ResourceWhereUniqueInput[]
}
export type ResourceCreateManyWithoutConceptInputInputObject =
  | Extract<keyof ResourceCreateManyWithoutConceptInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ResourceCreateWithoutConceptInput {
  id?: string | null
  name?: string
  description?: string
  urls?: URLCreateManyWithoutResourceInput | null
}
export type ResourceCreateWithoutConceptInputInputObject =
  | Extract<keyof ResourceCreateWithoutConceptInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'urls', alias?: string  } 
  
export interface URLCreateManyWithoutResourceInput {
  create?: URLCreateWithoutResourceInput[]
  connect?: URLWhereUniqueInput[]
}
export type URLCreateManyWithoutResourceInputInputObject =
  | Extract<keyof URLCreateManyWithoutResourceInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface URLCreateWithoutResourceInput {
  id?: string | null
  address?: string
}
export type URLCreateWithoutResourceInputInputObject =
  | Extract<keyof URLCreateWithoutResourceInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'address', alias?: string  } 
  
export interface WorkspaceCreateOneWithoutConceptsInput {
  create?: WorkspaceCreateWithoutConceptsInput | null
  connect?: WorkspaceWhereUniqueInput | null
}
export type WorkspaceCreateOneWithoutConceptsInputInputObject =
  | Extract<keyof WorkspaceCreateOneWithoutConceptsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface WorkspaceCreateWithoutConceptsInput {
  id?: string | null
  name?: string
  project?: ProjectCreateOneWithoutWorkspacesInput | null
  owner?: UserCreateOneWithoutAsWorkspaceOwnerInput | null
  public?: boolean | null
  defaultCourse?: CourseCreateOneInput | null
  courses?: CourseCreateManyWithoutWorkspaceInput | null
  conceptLinks?: ConceptLinkCreateManyWithoutWorkspaceInput | null
  courseLinks?: CourseLinkCreateManyWithoutWorkspaceInput | null
}
export type WorkspaceCreateWithoutConceptsInputInputObject =
  | Extract<keyof WorkspaceCreateWithoutConceptsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'project', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'public', alias?: string  } 
  | { name: 'defaultCourse', alias?: string  } 
  | { name: 'courses', alias?: string  } 
  | { name: 'conceptLinks', alias?: string  } 
  | { name: 'courseLinks', alias?: string  } 
  
export interface CourseCreateManyWithoutWorkspaceInput {
  create?: CourseCreateWithoutWorkspaceInput[]
  connect?: CourseWhereUniqueInput[]
}
export type CourseCreateManyWithoutWorkspaceInputInputObject =
  | Extract<keyof CourseCreateManyWithoutWorkspaceInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CourseCreateWithoutWorkspaceInput {
  id?: string | null
  name?: string
  createdBy?: UserCreateOneInput
  linksFromCourse?: CourseLinkCreateManyWithoutFromInput | null
  linksToCourse?: CourseLinkCreateManyWithoutToInput | null
  concepts?: ConceptCreateManyWithoutCoursesInput | null
}
export type CourseCreateWithoutWorkspaceInputInputObject =
  | Extract<keyof CourseCreateWithoutWorkspaceInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  | { name: 'linksFromCourse', alias?: string  } 
  | { name: 'linksToCourse', alias?: string  } 
  | { name: 'concepts', alias?: string  } 
  
export interface ConceptLinkCreateManyWithoutWorkspaceInput {
  create?: ConceptLinkCreateWithoutWorkspaceInput[]
  connect?: ConceptLinkWhereUniqueInput[]
}
export type ConceptLinkCreateManyWithoutWorkspaceInputInputObject =
  | Extract<keyof ConceptLinkCreateManyWithoutWorkspaceInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ConceptLinkCreateWithoutWorkspaceInput {
  id?: string | null
  from?: ConceptCreateOneWithoutLinksFromConceptInput
  to?: ConceptCreateOneWithoutLinksToConceptInput
  official?: boolean | null
  createdBy?: UserCreateOneInput
}
export type ConceptLinkCreateWithoutWorkspaceInputInputObject =
  | Extract<keyof ConceptLinkCreateWithoutWorkspaceInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'from', alias?: string  } 
  | { name: 'to', alias?: string  } 
  | { name: 'official', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  
export interface CourseLinkCreateManyWithoutWorkspaceInput {
  create?: CourseLinkCreateWithoutWorkspaceInput[]
  connect?: CourseLinkWhereUniqueInput[]
}
export type CourseLinkCreateManyWithoutWorkspaceInputInputObject =
  | Extract<keyof CourseLinkCreateManyWithoutWorkspaceInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CourseLinkCreateWithoutWorkspaceInput {
  id?: string | null
  from?: CourseCreateOneWithoutLinksFromCourseInput
  to?: CourseCreateOneWithoutLinksToCourseInput
  official?: boolean | null
  createdBy?: UserCreateOneInput
}
export type CourseLinkCreateWithoutWorkspaceInputInputObject =
  | Extract<keyof CourseLinkCreateWithoutWorkspaceInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'from', alias?: string  } 
  | { name: 'to', alias?: string  } 
  | { name: 'official', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  
export interface WorkspaceCreateOneWithoutConceptLinksInput {
  create?: WorkspaceCreateWithoutConceptLinksInput | null
  connect?: WorkspaceWhereUniqueInput | null
}
export type WorkspaceCreateOneWithoutConceptLinksInputInputObject =
  | Extract<keyof WorkspaceCreateOneWithoutConceptLinksInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface WorkspaceCreateWithoutConceptLinksInput {
  id?: string | null
  name?: string
  project?: ProjectCreateOneWithoutWorkspacesInput | null
  owner?: UserCreateOneWithoutAsWorkspaceOwnerInput | null
  public?: boolean | null
  defaultCourse?: CourseCreateOneInput | null
  courses?: CourseCreateManyWithoutWorkspaceInput | null
  concepts?: ConceptCreateManyWithoutWorkspaceInput | null
  courseLinks?: CourseLinkCreateManyWithoutWorkspaceInput | null
}
export type WorkspaceCreateWithoutConceptLinksInputInputObject =
  | Extract<keyof WorkspaceCreateWithoutConceptLinksInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'project', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'public', alias?: string  } 
  | { name: 'defaultCourse', alias?: string  } 
  | { name: 'courses', alias?: string  } 
  | { name: 'concepts', alias?: string  } 
  | { name: 'courseLinks', alias?: string  } 
  
export interface WorkspaceCreateOneWithoutCourseLinksInput {
  create?: WorkspaceCreateWithoutCourseLinksInput | null
  connect?: WorkspaceWhereUniqueInput | null
}
export type WorkspaceCreateOneWithoutCourseLinksInputInputObject =
  | Extract<keyof WorkspaceCreateOneWithoutCourseLinksInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface WorkspaceCreateWithoutCourseLinksInput {
  id?: string | null
  name?: string
  project?: ProjectCreateOneWithoutWorkspacesInput | null
  owner?: UserCreateOneWithoutAsWorkspaceOwnerInput | null
  public?: boolean | null
  defaultCourse?: CourseCreateOneInput | null
  courses?: CourseCreateManyWithoutWorkspaceInput | null
  concepts?: ConceptCreateManyWithoutWorkspaceInput | null
  conceptLinks?: ConceptLinkCreateManyWithoutWorkspaceInput | null
}
export type WorkspaceCreateWithoutCourseLinksInputInputObject =
  | Extract<keyof WorkspaceCreateWithoutCourseLinksInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'project', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'public', alias?: string  } 
  | { name: 'defaultCourse', alias?: string  } 
  | { name: 'courses', alias?: string  } 
  | { name: 'concepts', alias?: string  } 
  | { name: 'conceptLinks', alias?: string  } 
  
export interface UserUpdateInput {
  tmcId?: number | null
  role?: prisma.Role | null
  asWorkspaceOwner?: WorkspaceUpdateManyWithoutOwnerInput | null
  asProjectOwner?: ProjectUpdateManyWithoutOwnerInput | null
  asProjectParticipant?: ProjectUpdateManyWithoutParticipantsInput | null
  guideProgress?: number | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'tmcId', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'asWorkspaceOwner', alias?: string  } 
  | { name: 'asProjectOwner', alias?: string  } 
  | { name: 'asProjectParticipant', alias?: string  } 
  | { name: 'guideProgress', alias?: string  } 
  
export interface WorkspaceUpdateManyWithoutOwnerInput {
  create?: WorkspaceCreateWithoutOwnerInput[]
  delete?: WorkspaceWhereUniqueInput[]
  connect?: WorkspaceWhereUniqueInput[]
  set?: WorkspaceWhereUniqueInput[]
  disconnect?: WorkspaceWhereUniqueInput[]
  update?: WorkspaceUpdateWithWhereUniqueWithoutOwnerInput[]
  upsert?: WorkspaceUpsertWithWhereUniqueWithoutOwnerInput[]
  deleteMany?: WorkspaceScalarWhereInput[]
  updateMany?: WorkspaceUpdateManyWithWhereNestedInput[]
}
export type WorkspaceUpdateManyWithoutOwnerInputInputObject =
  | Extract<keyof WorkspaceUpdateManyWithoutOwnerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface WorkspaceUpdateWithWhereUniqueWithoutOwnerInput {
  where?: WorkspaceWhereUniqueInput
  data?: WorkspaceUpdateWithoutOwnerDataInput
}
export type WorkspaceUpdateWithWhereUniqueWithoutOwnerInputInputObject =
  | Extract<keyof WorkspaceUpdateWithWhereUniqueWithoutOwnerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface WorkspaceUpdateWithoutOwnerDataInput {
  name?: string | null
  project?: ProjectUpdateOneWithoutWorkspacesInput | null
  public?: boolean | null
  defaultCourse?: CourseUpdateOneInput | null
  courses?: CourseUpdateManyWithoutWorkspaceInput | null
  concepts?: ConceptUpdateManyWithoutWorkspaceInput | null
  conceptLinks?: ConceptLinkUpdateManyWithoutWorkspaceInput | null
  courseLinks?: CourseLinkUpdateManyWithoutWorkspaceInput | null
}
export type WorkspaceUpdateWithoutOwnerDataInputInputObject =
  | Extract<keyof WorkspaceUpdateWithoutOwnerDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'project', alias?: string  } 
  | { name: 'public', alias?: string  } 
  | { name: 'defaultCourse', alias?: string  } 
  | { name: 'courses', alias?: string  } 
  | { name: 'concepts', alias?: string  } 
  | { name: 'conceptLinks', alias?: string  } 
  | { name: 'courseLinks', alias?: string  } 
  
export interface ProjectUpdateOneWithoutWorkspacesInput {
  create?: ProjectCreateWithoutWorkspacesInput | null
  update?: ProjectUpdateWithoutWorkspacesDataInput | null
  upsert?: ProjectUpsertWithoutWorkspacesInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: ProjectWhereUniqueInput | null
}
export type ProjectUpdateOneWithoutWorkspacesInputInputObject =
  | Extract<keyof ProjectUpdateOneWithoutWorkspacesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectUpdateWithoutWorkspacesDataInput {
  name?: string | null
  owner?: UserUpdateOneRequiredWithoutAsProjectOwnerInput | null
  participants?: UserUpdateManyWithoutAsProjectParticipantInput | null
  template?: WorkspaceUpdateOneInput | null
}
export type ProjectUpdateWithoutWorkspacesDataInputInputObject =
  | Extract<keyof ProjectUpdateWithoutWorkspacesDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'participants', alias?: string  } 
  | { name: 'template', alias?: string  } 
  
export interface UserUpdateOneRequiredWithoutAsProjectOwnerInput {
  create?: UserCreateWithoutAsProjectOwnerInput | null
  update?: UserUpdateWithoutAsProjectOwnerDataInput | null
  upsert?: UserUpsertWithoutAsProjectOwnerInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredWithoutAsProjectOwnerInputInputObject =
  | Extract<keyof UserUpdateOneRequiredWithoutAsProjectOwnerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutAsProjectOwnerDataInput {
  tmcId?: number | null
  role?: prisma.Role | null
  asWorkspaceOwner?: WorkspaceUpdateManyWithoutOwnerInput | null
  asProjectParticipant?: ProjectUpdateManyWithoutParticipantsInput | null
  guideProgress?: number | null
}
export type UserUpdateWithoutAsProjectOwnerDataInputInputObject =
  | Extract<keyof UserUpdateWithoutAsProjectOwnerDataInput, string>
  | { name: 'tmcId', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'asWorkspaceOwner', alias?: string  } 
  | { name: 'asProjectParticipant', alias?: string  } 
  | { name: 'guideProgress', alias?: string  } 
  
export interface ProjectUpdateManyWithoutParticipantsInput {
  create?: ProjectCreateWithoutParticipantsInput[]
  delete?: ProjectWhereUniqueInput[]
  connect?: ProjectWhereUniqueInput[]
  set?: ProjectWhereUniqueInput[]
  disconnect?: ProjectWhereUniqueInput[]
  update?: ProjectUpdateWithWhereUniqueWithoutParticipantsInput[]
  upsert?: ProjectUpsertWithWhereUniqueWithoutParticipantsInput[]
  deleteMany?: ProjectScalarWhereInput[]
  updateMany?: ProjectUpdateManyWithWhereNestedInput[]
}
export type ProjectUpdateManyWithoutParticipantsInputInputObject =
  | Extract<keyof ProjectUpdateManyWithoutParticipantsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ProjectUpdateWithWhereUniqueWithoutParticipantsInput {
  where?: ProjectWhereUniqueInput
  data?: ProjectUpdateWithoutParticipantsDataInput
}
export type ProjectUpdateWithWhereUniqueWithoutParticipantsInputInputObject =
  | Extract<keyof ProjectUpdateWithWhereUniqueWithoutParticipantsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProjectUpdateWithoutParticipantsDataInput {
  name?: string | null
  owner?: UserUpdateOneRequiredWithoutAsProjectOwnerInput | null
  workspaces?: WorkspaceUpdateManyWithoutProjectInput | null
  template?: WorkspaceUpdateOneInput | null
}
export type ProjectUpdateWithoutParticipantsDataInputInputObject =
  | Extract<keyof ProjectUpdateWithoutParticipantsDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'workspaces', alias?: string  } 
  | { name: 'template', alias?: string  } 
  
export interface WorkspaceUpdateManyWithoutProjectInput {
  create?: WorkspaceCreateWithoutProjectInput[]
  delete?: WorkspaceWhereUniqueInput[]
  connect?: WorkspaceWhereUniqueInput[]
  set?: WorkspaceWhereUniqueInput[]
  disconnect?: WorkspaceWhereUniqueInput[]
  update?: WorkspaceUpdateWithWhereUniqueWithoutProjectInput[]
  upsert?: WorkspaceUpsertWithWhereUniqueWithoutProjectInput[]
  deleteMany?: WorkspaceScalarWhereInput[]
  updateMany?: WorkspaceUpdateManyWithWhereNestedInput[]
}
export type WorkspaceUpdateManyWithoutProjectInputInputObject =
  | Extract<keyof WorkspaceUpdateManyWithoutProjectInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface WorkspaceUpdateWithWhereUniqueWithoutProjectInput {
  where?: WorkspaceWhereUniqueInput
  data?: WorkspaceUpdateWithoutProjectDataInput
}
export type WorkspaceUpdateWithWhereUniqueWithoutProjectInputInputObject =
  | Extract<keyof WorkspaceUpdateWithWhereUniqueWithoutProjectInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface WorkspaceUpdateWithoutProjectDataInput {
  name?: string | null
  owner?: UserUpdateOneWithoutAsWorkspaceOwnerInput | null
  public?: boolean | null
  defaultCourse?: CourseUpdateOneInput | null
  courses?: CourseUpdateManyWithoutWorkspaceInput | null
  concepts?: ConceptUpdateManyWithoutWorkspaceInput | null
  conceptLinks?: ConceptLinkUpdateManyWithoutWorkspaceInput | null
  courseLinks?: CourseLinkUpdateManyWithoutWorkspaceInput | null
}
export type WorkspaceUpdateWithoutProjectDataInputInputObject =
  | Extract<keyof WorkspaceUpdateWithoutProjectDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'public', alias?: string  } 
  | { name: 'defaultCourse', alias?: string  } 
  | { name: 'courses', alias?: string  } 
  | { name: 'concepts', alias?: string  } 
  | { name: 'conceptLinks', alias?: string  } 
  | { name: 'courseLinks', alias?: string  } 
  
export interface UserUpdateOneWithoutAsWorkspaceOwnerInput {
  create?: UserCreateWithoutAsWorkspaceOwnerInput | null
  update?: UserUpdateWithoutAsWorkspaceOwnerDataInput | null
  upsert?: UserUpsertWithoutAsWorkspaceOwnerInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneWithoutAsWorkspaceOwnerInputInputObject =
  | Extract<keyof UserUpdateOneWithoutAsWorkspaceOwnerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutAsWorkspaceOwnerDataInput {
  tmcId?: number | null
  role?: prisma.Role | null
  asProjectOwner?: ProjectUpdateManyWithoutOwnerInput | null
  asProjectParticipant?: ProjectUpdateManyWithoutParticipantsInput | null
  guideProgress?: number | null
}
export type UserUpdateWithoutAsWorkspaceOwnerDataInputInputObject =
  | Extract<keyof UserUpdateWithoutAsWorkspaceOwnerDataInput, string>
  | { name: 'tmcId', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'asProjectOwner', alias?: string  } 
  | { name: 'asProjectParticipant', alias?: string  } 
  | { name: 'guideProgress', alias?: string  } 
  
export interface ProjectUpdateManyWithoutOwnerInput {
  create?: ProjectCreateWithoutOwnerInput[]
  delete?: ProjectWhereUniqueInput[]
  connect?: ProjectWhereUniqueInput[]
  set?: ProjectWhereUniqueInput[]
  disconnect?: ProjectWhereUniqueInput[]
  update?: ProjectUpdateWithWhereUniqueWithoutOwnerInput[]
  upsert?: ProjectUpsertWithWhereUniqueWithoutOwnerInput[]
  deleteMany?: ProjectScalarWhereInput[]
  updateMany?: ProjectUpdateManyWithWhereNestedInput[]
}
export type ProjectUpdateManyWithoutOwnerInputInputObject =
  | Extract<keyof ProjectUpdateManyWithoutOwnerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ProjectUpdateWithWhereUniqueWithoutOwnerInput {
  where?: ProjectWhereUniqueInput
  data?: ProjectUpdateWithoutOwnerDataInput
}
export type ProjectUpdateWithWhereUniqueWithoutOwnerInputInputObject =
  | Extract<keyof ProjectUpdateWithWhereUniqueWithoutOwnerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProjectUpdateWithoutOwnerDataInput {
  name?: string | null
  participants?: UserUpdateManyWithoutAsProjectParticipantInput | null
  workspaces?: WorkspaceUpdateManyWithoutProjectInput | null
  template?: WorkspaceUpdateOneInput | null
}
export type ProjectUpdateWithoutOwnerDataInputInputObject =
  | Extract<keyof ProjectUpdateWithoutOwnerDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'participants', alias?: string  } 
  | { name: 'workspaces', alias?: string  } 
  | { name: 'template', alias?: string  } 
  
export interface UserUpdateManyWithoutAsProjectParticipantInput {
  create?: UserCreateWithoutAsProjectParticipantInput[]
  delete?: UserWhereUniqueInput[]
  connect?: UserWhereUniqueInput[]
  set?: UserWhereUniqueInput[]
  disconnect?: UserWhereUniqueInput[]
  update?: UserUpdateWithWhereUniqueWithoutAsProjectParticipantInput[]
  upsert?: UserUpsertWithWhereUniqueWithoutAsProjectParticipantInput[]
  deleteMany?: UserScalarWhereInput[]
  updateMany?: UserUpdateManyWithWhereNestedInput[]
}
export type UserUpdateManyWithoutAsProjectParticipantInputInputObject =
  | Extract<keyof UserUpdateManyWithoutAsProjectParticipantInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface UserUpdateWithWhereUniqueWithoutAsProjectParticipantInput {
  where?: UserWhereUniqueInput
  data?: UserUpdateWithoutAsProjectParticipantDataInput
}
export type UserUpdateWithWhereUniqueWithoutAsProjectParticipantInputInputObject =
  | Extract<keyof UserUpdateWithWhereUniqueWithoutAsProjectParticipantInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserUpdateWithoutAsProjectParticipantDataInput {
  tmcId?: number | null
  role?: prisma.Role | null
  asWorkspaceOwner?: WorkspaceUpdateManyWithoutOwnerInput | null
  asProjectOwner?: ProjectUpdateManyWithoutOwnerInput | null
  guideProgress?: number | null
}
export type UserUpdateWithoutAsProjectParticipantDataInputInputObject =
  | Extract<keyof UserUpdateWithoutAsProjectParticipantDataInput, string>
  | { name: 'tmcId', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'asWorkspaceOwner', alias?: string  } 
  | { name: 'asProjectOwner', alias?: string  } 
  | { name: 'guideProgress', alias?: string  } 
  
export interface UserUpsertWithWhereUniqueWithoutAsProjectParticipantInput {
  where?: UserWhereUniqueInput
  update?: UserUpdateWithoutAsProjectParticipantDataInput
  create?: UserCreateWithoutAsProjectParticipantInput
}
export type UserUpsertWithWhereUniqueWithoutAsProjectParticipantInputInputObject =
  | Extract<keyof UserUpsertWithWhereUniqueWithoutAsProjectParticipantInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  tmcId?: number | null
  tmcId_not?: number | null
  tmcId_in?: number[]
  tmcId_not_in?: number[]
  tmcId_lt?: number | null
  tmcId_lte?: number | null
  tmcId_gt?: number | null
  tmcId_gte?: number | null
  role?: prisma.Role | null
  role_not?: prisma.Role | null
  role_in?: prisma.Role[]
  role_not_in?: prisma.Role[]
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  guideProgress?: number | null
  guideProgress_not?: number | null
  guideProgress_in?: number[]
  guideProgress_not_in?: number[]
  guideProgress_lt?: number | null
  guideProgress_lte?: number | null
  guideProgress_gt?: number | null
  guideProgress_gte?: number | null
  AND?: UserScalarWhereInput[]
  OR?: UserScalarWhereInput[]
  NOT?: UserScalarWhereInput[]
}
export type UserScalarWhereInputInputObject =
  | Extract<keyof UserScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'tmcId', alias?: string  } 
  | { name: 'tmcId_not', alias?: string  } 
  | { name: 'tmcId_in', alias?: string  } 
  | { name: 'tmcId_not_in', alias?: string  } 
  | { name: 'tmcId_lt', alias?: string  } 
  | { name: 'tmcId_lte', alias?: string  } 
  | { name: 'tmcId_gt', alias?: string  } 
  | { name: 'tmcId_gte', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'role_not', alias?: string  } 
  | { name: 'role_in', alias?: string  } 
  | { name: 'role_not_in', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'guideProgress', alias?: string  } 
  | { name: 'guideProgress_not', alias?: string  } 
  | { name: 'guideProgress_in', alias?: string  } 
  | { name: 'guideProgress_not_in', alias?: string  } 
  | { name: 'guideProgress_lt', alias?: string  } 
  | { name: 'guideProgress_lte', alias?: string  } 
  | { name: 'guideProgress_gt', alias?: string  } 
  | { name: 'guideProgress_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserUpdateManyWithWhereNestedInput {
  where?: UserScalarWhereInput
  data?: UserUpdateManyDataInput
}
export type UserUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof UserUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserUpdateManyDataInput {
  tmcId?: number | null
  role?: prisma.Role | null
  guideProgress?: number | null
}
export type UserUpdateManyDataInputInputObject =
  | Extract<keyof UserUpdateManyDataInput, string>
  | { name: 'tmcId', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'guideProgress', alias?: string  } 
  
export interface WorkspaceUpdateOneInput {
  create?: WorkspaceCreateInput | null
  update?: WorkspaceUpdateDataInput | null
  upsert?: WorkspaceUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: WorkspaceWhereUniqueInput | null
}
export type WorkspaceUpdateOneInputInputObject =
  | Extract<keyof WorkspaceUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface WorkspaceUpdateDataInput {
  name?: string | null
  project?: ProjectUpdateOneWithoutWorkspacesInput | null
  owner?: UserUpdateOneWithoutAsWorkspaceOwnerInput | null
  public?: boolean | null
  defaultCourse?: CourseUpdateOneInput | null
  courses?: CourseUpdateManyWithoutWorkspaceInput | null
  concepts?: ConceptUpdateManyWithoutWorkspaceInput | null
  conceptLinks?: ConceptLinkUpdateManyWithoutWorkspaceInput | null
  courseLinks?: CourseLinkUpdateManyWithoutWorkspaceInput | null
}
export type WorkspaceUpdateDataInputInputObject =
  | Extract<keyof WorkspaceUpdateDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'project', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'public', alias?: string  } 
  | { name: 'defaultCourse', alias?: string  } 
  | { name: 'courses', alias?: string  } 
  | { name: 'concepts', alias?: string  } 
  | { name: 'conceptLinks', alias?: string  } 
  | { name: 'courseLinks', alias?: string  } 
  
export interface CourseUpdateOneInput {
  create?: CourseCreateInput | null
  update?: CourseUpdateDataInput | null
  upsert?: CourseUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: CourseWhereUniqueInput | null
}
export type CourseUpdateOneInputInputObject =
  | Extract<keyof CourseUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CourseUpdateDataInput {
  name?: string | null
  createdBy?: UserUpdateOneRequiredInput | null
  linksFromCourse?: CourseLinkUpdateManyWithoutFromInput | null
  linksToCourse?: CourseLinkUpdateManyWithoutToInput | null
  concepts?: ConceptUpdateManyWithoutCoursesInput | null
  workspace?: WorkspaceUpdateOneRequiredWithoutCoursesInput | null
}
export type CourseUpdateDataInputInputObject =
  | Extract<keyof CourseUpdateDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  | { name: 'linksFromCourse', alias?: string  } 
  | { name: 'linksToCourse', alias?: string  } 
  | { name: 'concepts', alias?: string  } 
  | { name: 'workspace', alias?: string  } 
  
export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput | null
  update?: UserUpdateDataInput | null
  upsert?: UserUpsertNestedInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredInputInputObject =
  | Extract<keyof UserUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateDataInput {
  tmcId?: number | null
  role?: prisma.Role | null
  asWorkspaceOwner?: WorkspaceUpdateManyWithoutOwnerInput | null
  asProjectOwner?: ProjectUpdateManyWithoutOwnerInput | null
  asProjectParticipant?: ProjectUpdateManyWithoutParticipantsInput | null
  guideProgress?: number | null
}
export type UserUpdateDataInputInputObject =
  | Extract<keyof UserUpdateDataInput, string>
  | { name: 'tmcId', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'asWorkspaceOwner', alias?: string  } 
  | { name: 'asProjectOwner', alias?: string  } 
  | { name: 'asProjectParticipant', alias?: string  } 
  | { name: 'guideProgress', alias?: string  } 
  
export interface UserUpsertNestedInput {
  update?: UserUpdateDataInput
  create?: UserCreateInput
}
export type UserUpsertNestedInputInputObject =
  | Extract<keyof UserUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CourseLinkUpdateManyWithoutFromInput {
  create?: CourseLinkCreateWithoutFromInput[]
  delete?: CourseLinkWhereUniqueInput[]
  connect?: CourseLinkWhereUniqueInput[]
  set?: CourseLinkWhereUniqueInput[]
  disconnect?: CourseLinkWhereUniqueInput[]
  update?: CourseLinkUpdateWithWhereUniqueWithoutFromInput[]
  upsert?: CourseLinkUpsertWithWhereUniqueWithoutFromInput[]
  deleteMany?: CourseLinkScalarWhereInput[]
  updateMany?: CourseLinkUpdateManyWithWhereNestedInput[]
}
export type CourseLinkUpdateManyWithoutFromInputInputObject =
  | Extract<keyof CourseLinkUpdateManyWithoutFromInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface CourseLinkUpdateWithWhereUniqueWithoutFromInput {
  where?: CourseLinkWhereUniqueInput
  data?: CourseLinkUpdateWithoutFromDataInput
}
export type CourseLinkUpdateWithWhereUniqueWithoutFromInputInputObject =
  | Extract<keyof CourseLinkUpdateWithWhereUniqueWithoutFromInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface CourseLinkUpdateWithoutFromDataInput {
  to?: CourseUpdateOneRequiredWithoutLinksToCourseInput | null
  official?: boolean | null
  createdBy?: UserUpdateOneRequiredInput | null
  workspace?: WorkspaceUpdateOneRequiredWithoutCourseLinksInput | null
}
export type CourseLinkUpdateWithoutFromDataInputInputObject =
  | Extract<keyof CourseLinkUpdateWithoutFromDataInput, string>
  | { name: 'to', alias?: string  } 
  | { name: 'official', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  | { name: 'workspace', alias?: string  } 
  
export interface CourseUpdateOneRequiredWithoutLinksToCourseInput {
  create?: CourseCreateWithoutLinksToCourseInput | null
  update?: CourseUpdateWithoutLinksToCourseDataInput | null
  upsert?: CourseUpsertWithoutLinksToCourseInput | null
  connect?: CourseWhereUniqueInput | null
}
export type CourseUpdateOneRequiredWithoutLinksToCourseInputInputObject =
  | Extract<keyof CourseUpdateOneRequiredWithoutLinksToCourseInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CourseUpdateWithoutLinksToCourseDataInput {
  name?: string | null
  createdBy?: UserUpdateOneRequiredInput | null
  linksFromCourse?: CourseLinkUpdateManyWithoutFromInput | null
  concepts?: ConceptUpdateManyWithoutCoursesInput | null
  workspace?: WorkspaceUpdateOneRequiredWithoutCoursesInput | null
}
export type CourseUpdateWithoutLinksToCourseDataInputInputObject =
  | Extract<keyof CourseUpdateWithoutLinksToCourseDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  | { name: 'linksFromCourse', alias?: string  } 
  | { name: 'concepts', alias?: string  } 
  | { name: 'workspace', alias?: string  } 
  
export interface ConceptUpdateManyWithoutCoursesInput {
  create?: ConceptCreateWithoutCoursesInput[]
  delete?: ConceptWhereUniqueInput[]
  connect?: ConceptWhereUniqueInput[]
  set?: ConceptWhereUniqueInput[]
  disconnect?: ConceptWhereUniqueInput[]
  update?: ConceptUpdateWithWhereUniqueWithoutCoursesInput[]
  upsert?: ConceptUpsertWithWhereUniqueWithoutCoursesInput[]
  deleteMany?: ConceptScalarWhereInput[]
  updateMany?: ConceptUpdateManyWithWhereNestedInput[]
}
export type ConceptUpdateManyWithoutCoursesInputInputObject =
  | Extract<keyof ConceptUpdateManyWithoutCoursesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ConceptUpdateWithWhereUniqueWithoutCoursesInput {
  where?: ConceptWhereUniqueInput
  data?: ConceptUpdateWithoutCoursesDataInput
}
export type ConceptUpdateWithWhereUniqueWithoutCoursesInputInputObject =
  | Extract<keyof ConceptUpdateWithWhereUniqueWithoutCoursesInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ConceptUpdateWithoutCoursesDataInput {
  name?: string | null
  description?: string | null
  official?: boolean | null
  createdBy?: UserUpdateOneRequiredInput | null
  linksFromConcept?: ConceptLinkUpdateManyWithoutFromInput | null
  linksToConcept?: ConceptLinkUpdateManyWithoutToInput | null
  resources?: ResourceUpdateManyWithoutConceptInput | null
  workspace?: WorkspaceUpdateOneRequiredWithoutConceptsInput | null
}
export type ConceptUpdateWithoutCoursesDataInputInputObject =
  | Extract<keyof ConceptUpdateWithoutCoursesDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'official', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  | { name: 'linksFromConcept', alias?: string  } 
  | { name: 'linksToConcept', alias?: string  } 
  | { name: 'resources', alias?: string  } 
  | { name: 'workspace', alias?: string  } 
  
export interface ConceptLinkUpdateManyWithoutFromInput {
  create?: ConceptLinkCreateWithoutFromInput[]
  delete?: ConceptLinkWhereUniqueInput[]
  connect?: ConceptLinkWhereUniqueInput[]
  set?: ConceptLinkWhereUniqueInput[]
  disconnect?: ConceptLinkWhereUniqueInput[]
  update?: ConceptLinkUpdateWithWhereUniqueWithoutFromInput[]
  upsert?: ConceptLinkUpsertWithWhereUniqueWithoutFromInput[]
  deleteMany?: ConceptLinkScalarWhereInput[]
  updateMany?: ConceptLinkUpdateManyWithWhereNestedInput[]
}
export type ConceptLinkUpdateManyWithoutFromInputInputObject =
  | Extract<keyof ConceptLinkUpdateManyWithoutFromInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ConceptLinkUpdateWithWhereUniqueWithoutFromInput {
  where?: ConceptLinkWhereUniqueInput
  data?: ConceptLinkUpdateWithoutFromDataInput
}
export type ConceptLinkUpdateWithWhereUniqueWithoutFromInputInputObject =
  | Extract<keyof ConceptLinkUpdateWithWhereUniqueWithoutFromInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ConceptLinkUpdateWithoutFromDataInput {
  to?: ConceptUpdateOneRequiredWithoutLinksToConceptInput | null
  official?: boolean | null
  workspace?: WorkspaceUpdateOneRequiredWithoutConceptLinksInput | null
  createdBy?: UserUpdateOneRequiredInput | null
}
export type ConceptLinkUpdateWithoutFromDataInputInputObject =
  | Extract<keyof ConceptLinkUpdateWithoutFromDataInput, string>
  | { name: 'to', alias?: string  } 
  | { name: 'official', alias?: string  } 
  | { name: 'workspace', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  
export interface ConceptUpdateOneRequiredWithoutLinksToConceptInput {
  create?: ConceptCreateWithoutLinksToConceptInput | null
  update?: ConceptUpdateWithoutLinksToConceptDataInput | null
  upsert?: ConceptUpsertWithoutLinksToConceptInput | null
  connect?: ConceptWhereUniqueInput | null
}
export type ConceptUpdateOneRequiredWithoutLinksToConceptInputInputObject =
  | Extract<keyof ConceptUpdateOneRequiredWithoutLinksToConceptInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ConceptUpdateWithoutLinksToConceptDataInput {
  name?: string | null
  description?: string | null
  official?: boolean | null
  createdBy?: UserUpdateOneRequiredInput | null
  linksFromConcept?: ConceptLinkUpdateManyWithoutFromInput | null
  courses?: CourseUpdateManyWithoutConceptsInput | null
  resources?: ResourceUpdateManyWithoutConceptInput | null
  workspace?: WorkspaceUpdateOneRequiredWithoutConceptsInput | null
}
export type ConceptUpdateWithoutLinksToConceptDataInputInputObject =
  | Extract<keyof ConceptUpdateWithoutLinksToConceptDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'official', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  | { name: 'linksFromConcept', alias?: string  } 
  | { name: 'courses', alias?: string  } 
  | { name: 'resources', alias?: string  } 
  | { name: 'workspace', alias?: string  } 
  
export interface CourseUpdateManyWithoutConceptsInput {
  create?: CourseCreateWithoutConceptsInput[]
  delete?: CourseWhereUniqueInput[]
  connect?: CourseWhereUniqueInput[]
  set?: CourseWhereUniqueInput[]
  disconnect?: CourseWhereUniqueInput[]
  update?: CourseUpdateWithWhereUniqueWithoutConceptsInput[]
  upsert?: CourseUpsertWithWhereUniqueWithoutConceptsInput[]
  deleteMany?: CourseScalarWhereInput[]
  updateMany?: CourseUpdateManyWithWhereNestedInput[]
}
export type CourseUpdateManyWithoutConceptsInputInputObject =
  | Extract<keyof CourseUpdateManyWithoutConceptsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface CourseUpdateWithWhereUniqueWithoutConceptsInput {
  where?: CourseWhereUniqueInput
  data?: CourseUpdateWithoutConceptsDataInput
}
export type CourseUpdateWithWhereUniqueWithoutConceptsInputInputObject =
  | Extract<keyof CourseUpdateWithWhereUniqueWithoutConceptsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface CourseUpdateWithoutConceptsDataInput {
  name?: string | null
  createdBy?: UserUpdateOneRequiredInput | null
  linksFromCourse?: CourseLinkUpdateManyWithoutFromInput | null
  linksToCourse?: CourseLinkUpdateManyWithoutToInput | null
  workspace?: WorkspaceUpdateOneRequiredWithoutCoursesInput | null
}
export type CourseUpdateWithoutConceptsDataInputInputObject =
  | Extract<keyof CourseUpdateWithoutConceptsDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  | { name: 'linksFromCourse', alias?: string  } 
  | { name: 'linksToCourse', alias?: string  } 
  | { name: 'workspace', alias?: string  } 
  
export interface CourseLinkUpdateManyWithoutToInput {
  create?: CourseLinkCreateWithoutToInput[]
  delete?: CourseLinkWhereUniqueInput[]
  connect?: CourseLinkWhereUniqueInput[]
  set?: CourseLinkWhereUniqueInput[]
  disconnect?: CourseLinkWhereUniqueInput[]
  update?: CourseLinkUpdateWithWhereUniqueWithoutToInput[]
  upsert?: CourseLinkUpsertWithWhereUniqueWithoutToInput[]
  deleteMany?: CourseLinkScalarWhereInput[]
  updateMany?: CourseLinkUpdateManyWithWhereNestedInput[]
}
export type CourseLinkUpdateManyWithoutToInputInputObject =
  | Extract<keyof CourseLinkUpdateManyWithoutToInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface CourseLinkUpdateWithWhereUniqueWithoutToInput {
  where?: CourseLinkWhereUniqueInput
  data?: CourseLinkUpdateWithoutToDataInput
}
export type CourseLinkUpdateWithWhereUniqueWithoutToInputInputObject =
  | Extract<keyof CourseLinkUpdateWithWhereUniqueWithoutToInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface CourseLinkUpdateWithoutToDataInput {
  from?: CourseUpdateOneRequiredWithoutLinksFromCourseInput | null
  official?: boolean | null
  createdBy?: UserUpdateOneRequiredInput | null
  workspace?: WorkspaceUpdateOneRequiredWithoutCourseLinksInput | null
}
export type CourseLinkUpdateWithoutToDataInputInputObject =
  | Extract<keyof CourseLinkUpdateWithoutToDataInput, string>
  | { name: 'from', alias?: string  } 
  | { name: 'official', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  | { name: 'workspace', alias?: string  } 
  
export interface CourseUpdateOneRequiredWithoutLinksFromCourseInput {
  create?: CourseCreateWithoutLinksFromCourseInput | null
  update?: CourseUpdateWithoutLinksFromCourseDataInput | null
  upsert?: CourseUpsertWithoutLinksFromCourseInput | null
  connect?: CourseWhereUniqueInput | null
}
export type CourseUpdateOneRequiredWithoutLinksFromCourseInputInputObject =
  | Extract<keyof CourseUpdateOneRequiredWithoutLinksFromCourseInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CourseUpdateWithoutLinksFromCourseDataInput {
  name?: string | null
  createdBy?: UserUpdateOneRequiredInput | null
  linksToCourse?: CourseLinkUpdateManyWithoutToInput | null
  concepts?: ConceptUpdateManyWithoutCoursesInput | null
  workspace?: WorkspaceUpdateOneRequiredWithoutCoursesInput | null
}
export type CourseUpdateWithoutLinksFromCourseDataInputInputObject =
  | Extract<keyof CourseUpdateWithoutLinksFromCourseDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  | { name: 'linksToCourse', alias?: string  } 
  | { name: 'concepts', alias?: string  } 
  | { name: 'workspace', alias?: string  } 
  
export interface WorkspaceUpdateOneRequiredWithoutCoursesInput {
  create?: WorkspaceCreateWithoutCoursesInput | null
  update?: WorkspaceUpdateWithoutCoursesDataInput | null
  upsert?: WorkspaceUpsertWithoutCoursesInput | null
  connect?: WorkspaceWhereUniqueInput | null
}
export type WorkspaceUpdateOneRequiredWithoutCoursesInputInputObject =
  | Extract<keyof WorkspaceUpdateOneRequiredWithoutCoursesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface WorkspaceUpdateWithoutCoursesDataInput {
  name?: string | null
  project?: ProjectUpdateOneWithoutWorkspacesInput | null
  owner?: UserUpdateOneWithoutAsWorkspaceOwnerInput | null
  public?: boolean | null
  defaultCourse?: CourseUpdateOneInput | null
  concepts?: ConceptUpdateManyWithoutWorkspaceInput | null
  conceptLinks?: ConceptLinkUpdateManyWithoutWorkspaceInput | null
  courseLinks?: CourseLinkUpdateManyWithoutWorkspaceInput | null
}
export type WorkspaceUpdateWithoutCoursesDataInputInputObject =
  | Extract<keyof WorkspaceUpdateWithoutCoursesDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'project', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'public', alias?: string  } 
  | { name: 'defaultCourse', alias?: string  } 
  | { name: 'concepts', alias?: string  } 
  | { name: 'conceptLinks', alias?: string  } 
  | { name: 'courseLinks', alias?: string  } 
  
export interface ConceptUpdateManyWithoutWorkspaceInput {
  create?: ConceptCreateWithoutWorkspaceInput[]
  delete?: ConceptWhereUniqueInput[]
  connect?: ConceptWhereUniqueInput[]
  set?: ConceptWhereUniqueInput[]
  disconnect?: ConceptWhereUniqueInput[]
  update?: ConceptUpdateWithWhereUniqueWithoutWorkspaceInput[]
  upsert?: ConceptUpsertWithWhereUniqueWithoutWorkspaceInput[]
  deleteMany?: ConceptScalarWhereInput[]
  updateMany?: ConceptUpdateManyWithWhereNestedInput[]
}
export type ConceptUpdateManyWithoutWorkspaceInputInputObject =
  | Extract<keyof ConceptUpdateManyWithoutWorkspaceInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ConceptUpdateWithWhereUniqueWithoutWorkspaceInput {
  where?: ConceptWhereUniqueInput
  data?: ConceptUpdateWithoutWorkspaceDataInput
}
export type ConceptUpdateWithWhereUniqueWithoutWorkspaceInputInputObject =
  | Extract<keyof ConceptUpdateWithWhereUniqueWithoutWorkspaceInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ConceptUpdateWithoutWorkspaceDataInput {
  name?: string | null
  description?: string | null
  official?: boolean | null
  createdBy?: UserUpdateOneRequiredInput | null
  linksFromConcept?: ConceptLinkUpdateManyWithoutFromInput | null
  linksToConcept?: ConceptLinkUpdateManyWithoutToInput | null
  courses?: CourseUpdateManyWithoutConceptsInput | null
  resources?: ResourceUpdateManyWithoutConceptInput | null
}
export type ConceptUpdateWithoutWorkspaceDataInputInputObject =
  | Extract<keyof ConceptUpdateWithoutWorkspaceDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'official', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  | { name: 'linksFromConcept', alias?: string  } 
  | { name: 'linksToConcept', alias?: string  } 
  | { name: 'courses', alias?: string  } 
  | { name: 'resources', alias?: string  } 
  
export interface ConceptLinkUpdateManyWithoutToInput {
  create?: ConceptLinkCreateWithoutToInput[]
  delete?: ConceptLinkWhereUniqueInput[]
  connect?: ConceptLinkWhereUniqueInput[]
  set?: ConceptLinkWhereUniqueInput[]
  disconnect?: ConceptLinkWhereUniqueInput[]
  update?: ConceptLinkUpdateWithWhereUniqueWithoutToInput[]
  upsert?: ConceptLinkUpsertWithWhereUniqueWithoutToInput[]
  deleteMany?: ConceptLinkScalarWhereInput[]
  updateMany?: ConceptLinkUpdateManyWithWhereNestedInput[]
}
export type ConceptLinkUpdateManyWithoutToInputInputObject =
  | Extract<keyof ConceptLinkUpdateManyWithoutToInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ConceptLinkUpdateWithWhereUniqueWithoutToInput {
  where?: ConceptLinkWhereUniqueInput
  data?: ConceptLinkUpdateWithoutToDataInput
}
export type ConceptLinkUpdateWithWhereUniqueWithoutToInputInputObject =
  | Extract<keyof ConceptLinkUpdateWithWhereUniqueWithoutToInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ConceptLinkUpdateWithoutToDataInput {
  from?: ConceptUpdateOneRequiredWithoutLinksFromConceptInput | null
  official?: boolean | null
  workspace?: WorkspaceUpdateOneRequiredWithoutConceptLinksInput | null
  createdBy?: UserUpdateOneRequiredInput | null
}
export type ConceptLinkUpdateWithoutToDataInputInputObject =
  | Extract<keyof ConceptLinkUpdateWithoutToDataInput, string>
  | { name: 'from', alias?: string  } 
  | { name: 'official', alias?: string  } 
  | { name: 'workspace', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  
export interface ConceptUpdateOneRequiredWithoutLinksFromConceptInput {
  create?: ConceptCreateWithoutLinksFromConceptInput | null
  update?: ConceptUpdateWithoutLinksFromConceptDataInput | null
  upsert?: ConceptUpsertWithoutLinksFromConceptInput | null
  connect?: ConceptWhereUniqueInput | null
}
export type ConceptUpdateOneRequiredWithoutLinksFromConceptInputInputObject =
  | Extract<keyof ConceptUpdateOneRequiredWithoutLinksFromConceptInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ConceptUpdateWithoutLinksFromConceptDataInput {
  name?: string | null
  description?: string | null
  official?: boolean | null
  createdBy?: UserUpdateOneRequiredInput | null
  linksToConcept?: ConceptLinkUpdateManyWithoutToInput | null
  courses?: CourseUpdateManyWithoutConceptsInput | null
  resources?: ResourceUpdateManyWithoutConceptInput | null
  workspace?: WorkspaceUpdateOneRequiredWithoutConceptsInput | null
}
export type ConceptUpdateWithoutLinksFromConceptDataInputInputObject =
  | Extract<keyof ConceptUpdateWithoutLinksFromConceptDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'official', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  | { name: 'linksToConcept', alias?: string  } 
  | { name: 'courses', alias?: string  } 
  | { name: 'resources', alias?: string  } 
  | { name: 'workspace', alias?: string  } 
  
export interface ResourceUpdateManyWithoutConceptInput {
  create?: ResourceCreateWithoutConceptInput[]
  delete?: ResourceWhereUniqueInput[]
  connect?: ResourceWhereUniqueInput[]
  set?: ResourceWhereUniqueInput[]
  disconnect?: ResourceWhereUniqueInput[]
  update?: ResourceUpdateWithWhereUniqueWithoutConceptInput[]
  upsert?: ResourceUpsertWithWhereUniqueWithoutConceptInput[]
  deleteMany?: ResourceScalarWhereInput[]
  updateMany?: ResourceUpdateManyWithWhereNestedInput[]
}
export type ResourceUpdateManyWithoutConceptInputInputObject =
  | Extract<keyof ResourceUpdateManyWithoutConceptInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ResourceUpdateWithWhereUniqueWithoutConceptInput {
  where?: ResourceWhereUniqueInput
  data?: ResourceUpdateWithoutConceptDataInput
}
export type ResourceUpdateWithWhereUniqueWithoutConceptInputInputObject =
  | Extract<keyof ResourceUpdateWithWhereUniqueWithoutConceptInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ResourceUpdateWithoutConceptDataInput {
  name?: string | null
  description?: string | null
  urls?: URLUpdateManyWithoutResourceInput | null
}
export type ResourceUpdateWithoutConceptDataInputInputObject =
  | Extract<keyof ResourceUpdateWithoutConceptDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'urls', alias?: string  } 
  
export interface URLUpdateManyWithoutResourceInput {
  create?: URLCreateWithoutResourceInput[]
  delete?: URLWhereUniqueInput[]
  connect?: URLWhereUniqueInput[]
  set?: URLWhereUniqueInput[]
  disconnect?: URLWhereUniqueInput[]
  update?: URLUpdateWithWhereUniqueWithoutResourceInput[]
  upsert?: URLUpsertWithWhereUniqueWithoutResourceInput[]
  deleteMany?: URLScalarWhereInput[]
  updateMany?: URLUpdateManyWithWhereNestedInput[]
}
export type URLUpdateManyWithoutResourceInputInputObject =
  | Extract<keyof URLUpdateManyWithoutResourceInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface URLUpdateWithWhereUniqueWithoutResourceInput {
  where?: URLWhereUniqueInput
  data?: URLUpdateWithoutResourceDataInput
}
export type URLUpdateWithWhereUniqueWithoutResourceInputInputObject =
  | Extract<keyof URLUpdateWithWhereUniqueWithoutResourceInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface URLUpdateWithoutResourceDataInput {
  address?: string | null
}
export type URLUpdateWithoutResourceDataInputInputObject =
  | Extract<keyof URLUpdateWithoutResourceDataInput, string>
  | { name: 'address', alias?: string  } 
  
export interface URLUpsertWithWhereUniqueWithoutResourceInput {
  where?: URLWhereUniqueInput
  update?: URLUpdateWithoutResourceDataInput
  create?: URLCreateWithoutResourceInput
}
export type URLUpsertWithWhereUniqueWithoutResourceInputInputObject =
  | Extract<keyof URLUpsertWithWhereUniqueWithoutResourceInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface URLScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  address?: string | null
  address_not?: string | null
  address_in?: string[]
  address_not_in?: string[]
  address_lt?: string | null
  address_lte?: string | null
  address_gt?: string | null
  address_gte?: string | null
  address_contains?: string | null
  address_not_contains?: string | null
  address_starts_with?: string | null
  address_not_starts_with?: string | null
  address_ends_with?: string | null
  address_not_ends_with?: string | null
  AND?: URLScalarWhereInput[]
  OR?: URLScalarWhereInput[]
  NOT?: URLScalarWhereInput[]
}
export type URLScalarWhereInputInputObject =
  | Extract<keyof URLScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'address_not', alias?: string  } 
  | { name: 'address_in', alias?: string  } 
  | { name: 'address_not_in', alias?: string  } 
  | { name: 'address_lt', alias?: string  } 
  | { name: 'address_lte', alias?: string  } 
  | { name: 'address_gt', alias?: string  } 
  | { name: 'address_gte', alias?: string  } 
  | { name: 'address_contains', alias?: string  } 
  | { name: 'address_not_contains', alias?: string  } 
  | { name: 'address_starts_with', alias?: string  } 
  | { name: 'address_not_starts_with', alias?: string  } 
  | { name: 'address_ends_with', alias?: string  } 
  | { name: 'address_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface URLUpdateManyWithWhereNestedInput {
  where?: URLScalarWhereInput
  data?: URLUpdateManyDataInput
}
export type URLUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof URLUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface URLUpdateManyDataInput {
  address?: string | null
}
export type URLUpdateManyDataInputInputObject =
  | Extract<keyof URLUpdateManyDataInput, string>
  | { name: 'address', alias?: string  } 
  
export interface ResourceUpsertWithWhereUniqueWithoutConceptInput {
  where?: ResourceWhereUniqueInput
  update?: ResourceUpdateWithoutConceptDataInput
  create?: ResourceCreateWithoutConceptInput
}
export type ResourceUpsertWithWhereUniqueWithoutConceptInputInputObject =
  | Extract<keyof ResourceUpsertWithWhereUniqueWithoutConceptInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ResourceScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  AND?: ResourceScalarWhereInput[]
  OR?: ResourceScalarWhereInput[]
  NOT?: ResourceScalarWhereInput[]
}
export type ResourceScalarWhereInputInputObject =
  | Extract<keyof ResourceScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ResourceUpdateManyWithWhereNestedInput {
  where?: ResourceScalarWhereInput
  data?: ResourceUpdateManyDataInput
}
export type ResourceUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof ResourceUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ResourceUpdateManyDataInput {
  name?: string | null
  description?: string | null
}
export type ResourceUpdateManyDataInputInputObject =
  | Extract<keyof ResourceUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  
export interface WorkspaceUpdateOneRequiredWithoutConceptsInput {
  create?: WorkspaceCreateWithoutConceptsInput | null
  update?: WorkspaceUpdateWithoutConceptsDataInput | null
  upsert?: WorkspaceUpsertWithoutConceptsInput | null
  connect?: WorkspaceWhereUniqueInput | null
}
export type WorkspaceUpdateOneRequiredWithoutConceptsInputInputObject =
  | Extract<keyof WorkspaceUpdateOneRequiredWithoutConceptsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface WorkspaceUpdateWithoutConceptsDataInput {
  name?: string | null
  project?: ProjectUpdateOneWithoutWorkspacesInput | null
  owner?: UserUpdateOneWithoutAsWorkspaceOwnerInput | null
  public?: boolean | null
  defaultCourse?: CourseUpdateOneInput | null
  courses?: CourseUpdateManyWithoutWorkspaceInput | null
  conceptLinks?: ConceptLinkUpdateManyWithoutWorkspaceInput | null
  courseLinks?: CourseLinkUpdateManyWithoutWorkspaceInput | null
}
export type WorkspaceUpdateWithoutConceptsDataInputInputObject =
  | Extract<keyof WorkspaceUpdateWithoutConceptsDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'project', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'public', alias?: string  } 
  | { name: 'defaultCourse', alias?: string  } 
  | { name: 'courses', alias?: string  } 
  | { name: 'conceptLinks', alias?: string  } 
  | { name: 'courseLinks', alias?: string  } 
  
export interface CourseUpdateManyWithoutWorkspaceInput {
  create?: CourseCreateWithoutWorkspaceInput[]
  delete?: CourseWhereUniqueInput[]
  connect?: CourseWhereUniqueInput[]
  set?: CourseWhereUniqueInput[]
  disconnect?: CourseWhereUniqueInput[]
  update?: CourseUpdateWithWhereUniqueWithoutWorkspaceInput[]
  upsert?: CourseUpsertWithWhereUniqueWithoutWorkspaceInput[]
  deleteMany?: CourseScalarWhereInput[]
  updateMany?: CourseUpdateManyWithWhereNestedInput[]
}
export type CourseUpdateManyWithoutWorkspaceInputInputObject =
  | Extract<keyof CourseUpdateManyWithoutWorkspaceInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface CourseUpdateWithWhereUniqueWithoutWorkspaceInput {
  where?: CourseWhereUniqueInput
  data?: CourseUpdateWithoutWorkspaceDataInput
}
export type CourseUpdateWithWhereUniqueWithoutWorkspaceInputInputObject =
  | Extract<keyof CourseUpdateWithWhereUniqueWithoutWorkspaceInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface CourseUpdateWithoutWorkspaceDataInput {
  name?: string | null
  createdBy?: UserUpdateOneRequiredInput | null
  linksFromCourse?: CourseLinkUpdateManyWithoutFromInput | null
  linksToCourse?: CourseLinkUpdateManyWithoutToInput | null
  concepts?: ConceptUpdateManyWithoutCoursesInput | null
}
export type CourseUpdateWithoutWorkspaceDataInputInputObject =
  | Extract<keyof CourseUpdateWithoutWorkspaceDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  | { name: 'linksFromCourse', alias?: string  } 
  | { name: 'linksToCourse', alias?: string  } 
  | { name: 'concepts', alias?: string  } 
  
export interface CourseUpsertWithWhereUniqueWithoutWorkspaceInput {
  where?: CourseWhereUniqueInput
  update?: CourseUpdateWithoutWorkspaceDataInput
  create?: CourseCreateWithoutWorkspaceInput
}
export type CourseUpsertWithWhereUniqueWithoutWorkspaceInputInputObject =
  | Extract<keyof CourseUpsertWithWhereUniqueWithoutWorkspaceInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CourseScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  AND?: CourseScalarWhereInput[]
  OR?: CourseScalarWhereInput[]
  NOT?: CourseScalarWhereInput[]
}
export type CourseScalarWhereInputInputObject =
  | Extract<keyof CourseScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CourseUpdateManyWithWhereNestedInput {
  where?: CourseScalarWhereInput
  data?: CourseUpdateManyDataInput
}
export type CourseUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof CourseUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface CourseUpdateManyDataInput {
  name?: string | null
}
export type CourseUpdateManyDataInputInputObject =
  | Extract<keyof CourseUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  
export interface ConceptLinkUpdateManyWithoutWorkspaceInput {
  create?: ConceptLinkCreateWithoutWorkspaceInput[]
  delete?: ConceptLinkWhereUniqueInput[]
  connect?: ConceptLinkWhereUniqueInput[]
  set?: ConceptLinkWhereUniqueInput[]
  disconnect?: ConceptLinkWhereUniqueInput[]
  update?: ConceptLinkUpdateWithWhereUniqueWithoutWorkspaceInput[]
  upsert?: ConceptLinkUpsertWithWhereUniqueWithoutWorkspaceInput[]
  deleteMany?: ConceptLinkScalarWhereInput[]
  updateMany?: ConceptLinkUpdateManyWithWhereNestedInput[]
}
export type ConceptLinkUpdateManyWithoutWorkspaceInputInputObject =
  | Extract<keyof ConceptLinkUpdateManyWithoutWorkspaceInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ConceptLinkUpdateWithWhereUniqueWithoutWorkspaceInput {
  where?: ConceptLinkWhereUniqueInput
  data?: ConceptLinkUpdateWithoutWorkspaceDataInput
}
export type ConceptLinkUpdateWithWhereUniqueWithoutWorkspaceInputInputObject =
  | Extract<keyof ConceptLinkUpdateWithWhereUniqueWithoutWorkspaceInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ConceptLinkUpdateWithoutWorkspaceDataInput {
  from?: ConceptUpdateOneRequiredWithoutLinksFromConceptInput | null
  to?: ConceptUpdateOneRequiredWithoutLinksToConceptInput | null
  official?: boolean | null
  createdBy?: UserUpdateOneRequiredInput | null
}
export type ConceptLinkUpdateWithoutWorkspaceDataInputInputObject =
  | Extract<keyof ConceptLinkUpdateWithoutWorkspaceDataInput, string>
  | { name: 'from', alias?: string  } 
  | { name: 'to', alias?: string  } 
  | { name: 'official', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  
export interface ConceptLinkUpsertWithWhereUniqueWithoutWorkspaceInput {
  where?: ConceptLinkWhereUniqueInput
  update?: ConceptLinkUpdateWithoutWorkspaceDataInput
  create?: ConceptLinkCreateWithoutWorkspaceInput
}
export type ConceptLinkUpsertWithWhereUniqueWithoutWorkspaceInputInputObject =
  | Extract<keyof ConceptLinkUpsertWithWhereUniqueWithoutWorkspaceInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ConceptLinkScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  official?: boolean | null
  official_not?: boolean | null
  AND?: ConceptLinkScalarWhereInput[]
  OR?: ConceptLinkScalarWhereInput[]
  NOT?: ConceptLinkScalarWhereInput[]
}
export type ConceptLinkScalarWhereInputInputObject =
  | Extract<keyof ConceptLinkScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'official', alias?: string  } 
  | { name: 'official_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ConceptLinkUpdateManyWithWhereNestedInput {
  where?: ConceptLinkScalarWhereInput
  data?: ConceptLinkUpdateManyDataInput
}
export type ConceptLinkUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof ConceptLinkUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ConceptLinkUpdateManyDataInput {
  official?: boolean | null
}
export type ConceptLinkUpdateManyDataInputInputObject =
  | Extract<keyof ConceptLinkUpdateManyDataInput, string>
  | { name: 'official', alias?: string  } 
  
export interface CourseLinkUpdateManyWithoutWorkspaceInput {
  create?: CourseLinkCreateWithoutWorkspaceInput[]
  delete?: CourseLinkWhereUniqueInput[]
  connect?: CourseLinkWhereUniqueInput[]
  set?: CourseLinkWhereUniqueInput[]
  disconnect?: CourseLinkWhereUniqueInput[]
  update?: CourseLinkUpdateWithWhereUniqueWithoutWorkspaceInput[]
  upsert?: CourseLinkUpsertWithWhereUniqueWithoutWorkspaceInput[]
  deleteMany?: CourseLinkScalarWhereInput[]
  updateMany?: CourseLinkUpdateManyWithWhereNestedInput[]
}
export type CourseLinkUpdateManyWithoutWorkspaceInputInputObject =
  | Extract<keyof CourseLinkUpdateManyWithoutWorkspaceInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface CourseLinkUpdateWithWhereUniqueWithoutWorkspaceInput {
  where?: CourseLinkWhereUniqueInput
  data?: CourseLinkUpdateWithoutWorkspaceDataInput
}
export type CourseLinkUpdateWithWhereUniqueWithoutWorkspaceInputInputObject =
  | Extract<keyof CourseLinkUpdateWithWhereUniqueWithoutWorkspaceInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface CourseLinkUpdateWithoutWorkspaceDataInput {
  from?: CourseUpdateOneRequiredWithoutLinksFromCourseInput | null
  to?: CourseUpdateOneRequiredWithoutLinksToCourseInput | null
  official?: boolean | null
  createdBy?: UserUpdateOneRequiredInput | null
}
export type CourseLinkUpdateWithoutWorkspaceDataInputInputObject =
  | Extract<keyof CourseLinkUpdateWithoutWorkspaceDataInput, string>
  | { name: 'from', alias?: string  } 
  | { name: 'to', alias?: string  } 
  | { name: 'official', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  
export interface CourseLinkUpsertWithWhereUniqueWithoutWorkspaceInput {
  where?: CourseLinkWhereUniqueInput
  update?: CourseLinkUpdateWithoutWorkspaceDataInput
  create?: CourseLinkCreateWithoutWorkspaceInput
}
export type CourseLinkUpsertWithWhereUniqueWithoutWorkspaceInputInputObject =
  | Extract<keyof CourseLinkUpsertWithWhereUniqueWithoutWorkspaceInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CourseLinkScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  official?: boolean | null
  official_not?: boolean | null
  AND?: CourseLinkScalarWhereInput[]
  OR?: CourseLinkScalarWhereInput[]
  NOT?: CourseLinkScalarWhereInput[]
}
export type CourseLinkScalarWhereInputInputObject =
  | Extract<keyof CourseLinkScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'official', alias?: string  } 
  | { name: 'official_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CourseLinkUpdateManyWithWhereNestedInput {
  where?: CourseLinkScalarWhereInput
  data?: CourseLinkUpdateManyDataInput
}
export type CourseLinkUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof CourseLinkUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface CourseLinkUpdateManyDataInput {
  official?: boolean | null
}
export type CourseLinkUpdateManyDataInputInputObject =
  | Extract<keyof CourseLinkUpdateManyDataInput, string>
  | { name: 'official', alias?: string  } 
  
export interface WorkspaceUpsertWithoutConceptsInput {
  update?: WorkspaceUpdateWithoutConceptsDataInput
  create?: WorkspaceCreateWithoutConceptsInput
}
export type WorkspaceUpsertWithoutConceptsInputInputObject =
  | Extract<keyof WorkspaceUpsertWithoutConceptsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ConceptUpsertWithoutLinksFromConceptInput {
  update?: ConceptUpdateWithoutLinksFromConceptDataInput
  create?: ConceptCreateWithoutLinksFromConceptInput
}
export type ConceptUpsertWithoutLinksFromConceptInputInputObject =
  | Extract<keyof ConceptUpsertWithoutLinksFromConceptInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface WorkspaceUpdateOneRequiredWithoutConceptLinksInput {
  create?: WorkspaceCreateWithoutConceptLinksInput | null
  update?: WorkspaceUpdateWithoutConceptLinksDataInput | null
  upsert?: WorkspaceUpsertWithoutConceptLinksInput | null
  connect?: WorkspaceWhereUniqueInput | null
}
export type WorkspaceUpdateOneRequiredWithoutConceptLinksInputInputObject =
  | Extract<keyof WorkspaceUpdateOneRequiredWithoutConceptLinksInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface WorkspaceUpdateWithoutConceptLinksDataInput {
  name?: string | null
  project?: ProjectUpdateOneWithoutWorkspacesInput | null
  owner?: UserUpdateOneWithoutAsWorkspaceOwnerInput | null
  public?: boolean | null
  defaultCourse?: CourseUpdateOneInput | null
  courses?: CourseUpdateManyWithoutWorkspaceInput | null
  concepts?: ConceptUpdateManyWithoutWorkspaceInput | null
  courseLinks?: CourseLinkUpdateManyWithoutWorkspaceInput | null
}
export type WorkspaceUpdateWithoutConceptLinksDataInputInputObject =
  | Extract<keyof WorkspaceUpdateWithoutConceptLinksDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'project', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'public', alias?: string  } 
  | { name: 'defaultCourse', alias?: string  } 
  | { name: 'courses', alias?: string  } 
  | { name: 'concepts', alias?: string  } 
  | { name: 'courseLinks', alias?: string  } 
  
export interface WorkspaceUpsertWithoutConceptLinksInput {
  update?: WorkspaceUpdateWithoutConceptLinksDataInput
  create?: WorkspaceCreateWithoutConceptLinksInput
}
export type WorkspaceUpsertWithoutConceptLinksInputInputObject =
  | Extract<keyof WorkspaceUpsertWithoutConceptLinksInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ConceptLinkUpsertWithWhereUniqueWithoutToInput {
  where?: ConceptLinkWhereUniqueInput
  update?: ConceptLinkUpdateWithoutToDataInput
  create?: ConceptLinkCreateWithoutToInput
}
export type ConceptLinkUpsertWithWhereUniqueWithoutToInputInputObject =
  | Extract<keyof ConceptLinkUpsertWithWhereUniqueWithoutToInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ConceptUpsertWithWhereUniqueWithoutWorkspaceInput {
  where?: ConceptWhereUniqueInput
  update?: ConceptUpdateWithoutWorkspaceDataInput
  create?: ConceptCreateWithoutWorkspaceInput
}
export type ConceptUpsertWithWhereUniqueWithoutWorkspaceInputInputObject =
  | Extract<keyof ConceptUpsertWithWhereUniqueWithoutWorkspaceInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ConceptScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  official?: boolean | null
  official_not?: boolean | null
  AND?: ConceptScalarWhereInput[]
  OR?: ConceptScalarWhereInput[]
  NOT?: ConceptScalarWhereInput[]
}
export type ConceptScalarWhereInputInputObject =
  | Extract<keyof ConceptScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'official', alias?: string  } 
  | { name: 'official_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ConceptUpdateManyWithWhereNestedInput {
  where?: ConceptScalarWhereInput
  data?: ConceptUpdateManyDataInput
}
export type ConceptUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof ConceptUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ConceptUpdateManyDataInput {
  name?: string | null
  description?: string | null
  official?: boolean | null
}
export type ConceptUpdateManyDataInputInputObject =
  | Extract<keyof ConceptUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'official', alias?: string  } 
  
export interface WorkspaceUpsertWithoutCoursesInput {
  update?: WorkspaceUpdateWithoutCoursesDataInput
  create?: WorkspaceCreateWithoutCoursesInput
}
export type WorkspaceUpsertWithoutCoursesInputInputObject =
  | Extract<keyof WorkspaceUpsertWithoutCoursesInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CourseUpsertWithoutLinksFromCourseInput {
  update?: CourseUpdateWithoutLinksFromCourseDataInput
  create?: CourseCreateWithoutLinksFromCourseInput
}
export type CourseUpsertWithoutLinksFromCourseInputInputObject =
  | Extract<keyof CourseUpsertWithoutLinksFromCourseInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface WorkspaceUpdateOneRequiredWithoutCourseLinksInput {
  create?: WorkspaceCreateWithoutCourseLinksInput | null
  update?: WorkspaceUpdateWithoutCourseLinksDataInput | null
  upsert?: WorkspaceUpsertWithoutCourseLinksInput | null
  connect?: WorkspaceWhereUniqueInput | null
}
export type WorkspaceUpdateOneRequiredWithoutCourseLinksInputInputObject =
  | Extract<keyof WorkspaceUpdateOneRequiredWithoutCourseLinksInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface WorkspaceUpdateWithoutCourseLinksDataInput {
  name?: string | null
  project?: ProjectUpdateOneWithoutWorkspacesInput | null
  owner?: UserUpdateOneWithoutAsWorkspaceOwnerInput | null
  public?: boolean | null
  defaultCourse?: CourseUpdateOneInput | null
  courses?: CourseUpdateManyWithoutWorkspaceInput | null
  concepts?: ConceptUpdateManyWithoutWorkspaceInput | null
  conceptLinks?: ConceptLinkUpdateManyWithoutWorkspaceInput | null
}
export type WorkspaceUpdateWithoutCourseLinksDataInputInputObject =
  | Extract<keyof WorkspaceUpdateWithoutCourseLinksDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'project', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'public', alias?: string  } 
  | { name: 'defaultCourse', alias?: string  } 
  | { name: 'courses', alias?: string  } 
  | { name: 'concepts', alias?: string  } 
  | { name: 'conceptLinks', alias?: string  } 
  
export interface WorkspaceUpsertWithoutCourseLinksInput {
  update?: WorkspaceUpdateWithoutCourseLinksDataInput
  create?: WorkspaceCreateWithoutCourseLinksInput
}
export type WorkspaceUpsertWithoutCourseLinksInputInputObject =
  | Extract<keyof WorkspaceUpsertWithoutCourseLinksInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CourseLinkUpsertWithWhereUniqueWithoutToInput {
  where?: CourseLinkWhereUniqueInput
  update?: CourseLinkUpdateWithoutToDataInput
  create?: CourseLinkCreateWithoutToInput
}
export type CourseLinkUpsertWithWhereUniqueWithoutToInputInputObject =
  | Extract<keyof CourseLinkUpsertWithWhereUniqueWithoutToInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CourseUpsertWithWhereUniqueWithoutConceptsInput {
  where?: CourseWhereUniqueInput
  update?: CourseUpdateWithoutConceptsDataInput
  create?: CourseCreateWithoutConceptsInput
}
export type CourseUpsertWithWhereUniqueWithoutConceptsInputInputObject =
  | Extract<keyof CourseUpsertWithWhereUniqueWithoutConceptsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ConceptUpsertWithoutLinksToConceptInput {
  update?: ConceptUpdateWithoutLinksToConceptDataInput
  create?: ConceptCreateWithoutLinksToConceptInput
}
export type ConceptUpsertWithoutLinksToConceptInputInputObject =
  | Extract<keyof ConceptUpsertWithoutLinksToConceptInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ConceptLinkUpsertWithWhereUniqueWithoutFromInput {
  where?: ConceptLinkWhereUniqueInput
  update?: ConceptLinkUpdateWithoutFromDataInput
  create?: ConceptLinkCreateWithoutFromInput
}
export type ConceptLinkUpsertWithWhereUniqueWithoutFromInputInputObject =
  | Extract<keyof ConceptLinkUpsertWithWhereUniqueWithoutFromInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ConceptUpsertWithWhereUniqueWithoutCoursesInput {
  where?: ConceptWhereUniqueInput
  update?: ConceptUpdateWithoutCoursesDataInput
  create?: ConceptCreateWithoutCoursesInput
}
export type ConceptUpsertWithWhereUniqueWithoutCoursesInputInputObject =
  | Extract<keyof ConceptUpsertWithWhereUniqueWithoutCoursesInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CourseUpsertWithoutLinksToCourseInput {
  update?: CourseUpdateWithoutLinksToCourseDataInput
  create?: CourseCreateWithoutLinksToCourseInput
}
export type CourseUpsertWithoutLinksToCourseInputInputObject =
  | Extract<keyof CourseUpsertWithoutLinksToCourseInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CourseLinkUpsertWithWhereUniqueWithoutFromInput {
  where?: CourseLinkWhereUniqueInput
  update?: CourseLinkUpdateWithoutFromDataInput
  create?: CourseLinkCreateWithoutFromInput
}
export type CourseLinkUpsertWithWhereUniqueWithoutFromInputInputObject =
  | Extract<keyof CourseLinkUpsertWithWhereUniqueWithoutFromInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CourseUpsertNestedInput {
  update?: CourseUpdateDataInput
  create?: CourseCreateInput
}
export type CourseUpsertNestedInputInputObject =
  | Extract<keyof CourseUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface WorkspaceUpsertNestedInput {
  update?: WorkspaceUpdateDataInput
  create?: WorkspaceCreateInput
}
export type WorkspaceUpsertNestedInputInputObject =
  | Extract<keyof WorkspaceUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProjectUpsertWithWhereUniqueWithoutOwnerInput {
  where?: ProjectWhereUniqueInput
  update?: ProjectUpdateWithoutOwnerDataInput
  create?: ProjectCreateWithoutOwnerInput
}
export type ProjectUpsertWithWhereUniqueWithoutOwnerInputInputObject =
  | Extract<keyof ProjectUpsertWithWhereUniqueWithoutOwnerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProjectScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  AND?: ProjectScalarWhereInput[]
  OR?: ProjectScalarWhereInput[]
  NOT?: ProjectScalarWhereInput[]
}
export type ProjectScalarWhereInputInputObject =
  | Extract<keyof ProjectScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectUpdateManyWithWhereNestedInput {
  where?: ProjectScalarWhereInput
  data?: ProjectUpdateManyDataInput
}
export type ProjectUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof ProjectUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProjectUpdateManyDataInput {
  name?: string | null
}
export type ProjectUpdateManyDataInputInputObject =
  | Extract<keyof ProjectUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  
export interface UserUpsertWithoutAsWorkspaceOwnerInput {
  update?: UserUpdateWithoutAsWorkspaceOwnerDataInput
  create?: UserCreateWithoutAsWorkspaceOwnerInput
}
export type UserUpsertWithoutAsWorkspaceOwnerInputInputObject =
  | Extract<keyof UserUpsertWithoutAsWorkspaceOwnerInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface WorkspaceUpsertWithWhereUniqueWithoutProjectInput {
  where?: WorkspaceWhereUniqueInput
  update?: WorkspaceUpdateWithoutProjectDataInput
  create?: WorkspaceCreateWithoutProjectInput
}
export type WorkspaceUpsertWithWhereUniqueWithoutProjectInputInputObject =
  | Extract<keyof WorkspaceUpsertWithWhereUniqueWithoutProjectInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface WorkspaceScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  public?: boolean | null
  public_not?: boolean | null
  AND?: WorkspaceScalarWhereInput[]
  OR?: WorkspaceScalarWhereInput[]
  NOT?: WorkspaceScalarWhereInput[]
}
export type WorkspaceScalarWhereInputInputObject =
  | Extract<keyof WorkspaceScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'public', alias?: string  } 
  | { name: 'public_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface WorkspaceUpdateManyWithWhereNestedInput {
  where?: WorkspaceScalarWhereInput
  data?: WorkspaceUpdateManyDataInput
}
export type WorkspaceUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof WorkspaceUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface WorkspaceUpdateManyDataInput {
  name?: string | null
  public?: boolean | null
}
export type WorkspaceUpdateManyDataInputInputObject =
  | Extract<keyof WorkspaceUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'public', alias?: string  } 
  
export interface ProjectUpsertWithWhereUniqueWithoutParticipantsInput {
  where?: ProjectWhereUniqueInput
  update?: ProjectUpdateWithoutParticipantsDataInput
  create?: ProjectCreateWithoutParticipantsInput
}
export type ProjectUpsertWithWhereUniqueWithoutParticipantsInputInputObject =
  | Extract<keyof ProjectUpsertWithWhereUniqueWithoutParticipantsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserUpsertWithoutAsProjectOwnerInput {
  update?: UserUpdateWithoutAsProjectOwnerDataInput
  create?: UserCreateWithoutAsProjectOwnerInput
}
export type UserUpsertWithoutAsProjectOwnerInputInputObject =
  | Extract<keyof UserUpsertWithoutAsProjectOwnerInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProjectUpsertWithoutWorkspacesInput {
  update?: ProjectUpdateWithoutWorkspacesDataInput
  create?: ProjectCreateWithoutWorkspacesInput
}
export type ProjectUpsertWithoutWorkspacesInputInputObject =
  | Extract<keyof ProjectUpsertWithoutWorkspacesInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface WorkspaceUpsertWithWhereUniqueWithoutOwnerInput {
  where?: WorkspaceWhereUniqueInput
  update?: WorkspaceUpdateWithoutOwnerDataInput
  create?: WorkspaceCreateWithoutOwnerInput
}
export type WorkspaceUpsertWithWhereUniqueWithoutOwnerInputInputObject =
  | Extract<keyof WorkspaceUpsertWithWhereUniqueWithoutOwnerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  tmcId?: number | null
  role?: prisma.Role | null
  guideProgress?: number | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'tmcId', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'guideProgress', alias?: string  } 
  
export interface ProjectCreateInput {
  id?: string | null
  name?: string
  owner?: UserCreateOneWithoutAsProjectOwnerInput
  participants?: UserCreateManyWithoutAsProjectParticipantInput | null
  workspaces?: WorkspaceCreateManyWithoutProjectInput | null
  template?: WorkspaceCreateOneInput | null
}
export type ProjectCreateInputInputObject =
  | Extract<keyof ProjectCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'participants', alias?: string  } 
  | { name: 'workspaces', alias?: string  } 
  | { name: 'template', alias?: string  } 
  
export interface ProjectUpdateInput {
  name?: string | null
  owner?: UserUpdateOneRequiredWithoutAsProjectOwnerInput | null
  participants?: UserUpdateManyWithoutAsProjectParticipantInput | null
  workspaces?: WorkspaceUpdateManyWithoutProjectInput | null
  template?: WorkspaceUpdateOneInput | null
}
export type ProjectUpdateInputInputObject =
  | Extract<keyof ProjectUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'participants', alias?: string  } 
  | { name: 'workspaces', alias?: string  } 
  | { name: 'template', alias?: string  } 
  
export interface ProjectUpdateManyMutationInput {
  name?: string | null
}
export type ProjectUpdateManyMutationInputInputObject =
  | Extract<keyof ProjectUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  
export interface WorkspaceUpdateInput {
  name?: string | null
  project?: ProjectUpdateOneWithoutWorkspacesInput | null
  owner?: UserUpdateOneWithoutAsWorkspaceOwnerInput | null
  public?: boolean | null
  defaultCourse?: CourseUpdateOneInput | null
  courses?: CourseUpdateManyWithoutWorkspaceInput | null
  concepts?: ConceptUpdateManyWithoutWorkspaceInput | null
  conceptLinks?: ConceptLinkUpdateManyWithoutWorkspaceInput | null
  courseLinks?: CourseLinkUpdateManyWithoutWorkspaceInput | null
}
export type WorkspaceUpdateInputInputObject =
  | Extract<keyof WorkspaceUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'project', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'public', alias?: string  } 
  | { name: 'defaultCourse', alias?: string  } 
  | { name: 'courses', alias?: string  } 
  | { name: 'concepts', alias?: string  } 
  | { name: 'conceptLinks', alias?: string  } 
  | { name: 'courseLinks', alias?: string  } 
  
export interface WorkspaceUpdateManyMutationInput {
  name?: string | null
  public?: boolean | null
}
export type WorkspaceUpdateManyMutationInputInputObject =
  | Extract<keyof WorkspaceUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'public', alias?: string  } 
  
export interface CourseLinkCreateInput {
  id?: string | null
  from?: CourseCreateOneWithoutLinksFromCourseInput
  to?: CourseCreateOneWithoutLinksToCourseInput
  official?: boolean | null
  createdBy?: UserCreateOneInput
  workspace?: WorkspaceCreateOneWithoutCourseLinksInput
}
export type CourseLinkCreateInputInputObject =
  | Extract<keyof CourseLinkCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'from', alias?: string  } 
  | { name: 'to', alias?: string  } 
  | { name: 'official', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  | { name: 'workspace', alias?: string  } 
  
export interface CourseLinkUpdateInput {
  from?: CourseUpdateOneRequiredWithoutLinksFromCourseInput | null
  to?: CourseUpdateOneRequiredWithoutLinksToCourseInput | null
  official?: boolean | null
  createdBy?: UserUpdateOneRequiredInput | null
  workspace?: WorkspaceUpdateOneRequiredWithoutCourseLinksInput | null
}
export type CourseLinkUpdateInputInputObject =
  | Extract<keyof CourseLinkUpdateInput, string>
  | { name: 'from', alias?: string  } 
  | { name: 'to', alias?: string  } 
  | { name: 'official', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  | { name: 'workspace', alias?: string  } 
  
export interface CourseLinkUpdateManyMutationInput {
  official?: boolean | null
}
export type CourseLinkUpdateManyMutationInputInputObject =
  | Extract<keyof CourseLinkUpdateManyMutationInput, string>
  | { name: 'official', alias?: string  } 
  
export interface CourseUpdateInput {
  name?: string | null
  createdBy?: UserUpdateOneRequiredInput | null
  linksFromCourse?: CourseLinkUpdateManyWithoutFromInput | null
  linksToCourse?: CourseLinkUpdateManyWithoutToInput | null
  concepts?: ConceptUpdateManyWithoutCoursesInput | null
  workspace?: WorkspaceUpdateOneRequiredWithoutCoursesInput | null
}
export type CourseUpdateInputInputObject =
  | Extract<keyof CourseUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  | { name: 'linksFromCourse', alias?: string  } 
  | { name: 'linksToCourse', alias?: string  } 
  | { name: 'concepts', alias?: string  } 
  | { name: 'workspace', alias?: string  } 
  
export interface CourseUpdateManyMutationInput {
  name?: string | null
}
export type CourseUpdateManyMutationInputInputObject =
  | Extract<keyof CourseUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  
export interface ConceptLinkCreateInput {
  id?: string | null
  from?: ConceptCreateOneWithoutLinksFromConceptInput
  to?: ConceptCreateOneWithoutLinksToConceptInput
  official?: boolean | null
  workspace?: WorkspaceCreateOneWithoutConceptLinksInput
  createdBy?: UserCreateOneInput
}
export type ConceptLinkCreateInputInputObject =
  | Extract<keyof ConceptLinkCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'from', alias?: string  } 
  | { name: 'to', alias?: string  } 
  | { name: 'official', alias?: string  } 
  | { name: 'workspace', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  
export interface ConceptLinkUpdateInput {
  from?: ConceptUpdateOneRequiredWithoutLinksFromConceptInput | null
  to?: ConceptUpdateOneRequiredWithoutLinksToConceptInput | null
  official?: boolean | null
  workspace?: WorkspaceUpdateOneRequiredWithoutConceptLinksInput | null
  createdBy?: UserUpdateOneRequiredInput | null
}
export type ConceptLinkUpdateInputInputObject =
  | Extract<keyof ConceptLinkUpdateInput, string>
  | { name: 'from', alias?: string  } 
  | { name: 'to', alias?: string  } 
  | { name: 'official', alias?: string  } 
  | { name: 'workspace', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  
export interface ConceptLinkUpdateManyMutationInput {
  official?: boolean | null
}
export type ConceptLinkUpdateManyMutationInputInputObject =
  | Extract<keyof ConceptLinkUpdateManyMutationInput, string>
  | { name: 'official', alias?: string  } 
  
export interface ConceptCreateInput {
  id?: string | null
  name?: string
  description?: string | null
  official?: boolean | null
  createdBy?: UserCreateOneInput
  linksFromConcept?: ConceptLinkCreateManyWithoutFromInput | null
  linksToConcept?: ConceptLinkCreateManyWithoutToInput | null
  courses?: CourseCreateManyWithoutConceptsInput | null
  resources?: ResourceCreateManyWithoutConceptInput | null
  workspace?: WorkspaceCreateOneWithoutConceptsInput
}
export type ConceptCreateInputInputObject =
  | Extract<keyof ConceptCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'official', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  | { name: 'linksFromConcept', alias?: string  } 
  | { name: 'linksToConcept', alias?: string  } 
  | { name: 'courses', alias?: string  } 
  | { name: 'resources', alias?: string  } 
  | { name: 'workspace', alias?: string  } 
  
export interface ConceptUpdateInput {
  name?: string | null
  description?: string | null
  official?: boolean | null
  createdBy?: UserUpdateOneRequiredInput | null
  linksFromConcept?: ConceptLinkUpdateManyWithoutFromInput | null
  linksToConcept?: ConceptLinkUpdateManyWithoutToInput | null
  courses?: CourseUpdateManyWithoutConceptsInput | null
  resources?: ResourceUpdateManyWithoutConceptInput | null
  workspace?: WorkspaceUpdateOneRequiredWithoutConceptsInput | null
}
export type ConceptUpdateInputInputObject =
  | Extract<keyof ConceptUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'official', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  | { name: 'linksFromConcept', alias?: string  } 
  | { name: 'linksToConcept', alias?: string  } 
  | { name: 'courses', alias?: string  } 
  | { name: 'resources', alias?: string  } 
  | { name: 'workspace', alias?: string  } 
  
export interface ConceptUpdateManyMutationInput {
  name?: string | null
  description?: string | null
  official?: boolean | null
}
export type ConceptUpdateManyMutationInputInputObject =
  | Extract<keyof ConceptUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'official', alias?: string  } 
  
export interface ResourceCreateInput {
  id?: string | null
  concept?: ConceptCreateOneWithoutResourcesInput
  name?: string
  description?: string
  urls?: URLCreateManyWithoutResourceInput | null
}
export type ResourceCreateInputInputObject =
  | Extract<keyof ResourceCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'concept', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'urls', alias?: string  } 
  
export interface ConceptCreateOneWithoutResourcesInput {
  create?: ConceptCreateWithoutResourcesInput | null
  connect?: ConceptWhereUniqueInput | null
}
export type ConceptCreateOneWithoutResourcesInputInputObject =
  | Extract<keyof ConceptCreateOneWithoutResourcesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ConceptCreateWithoutResourcesInput {
  id?: string | null
  name?: string
  description?: string | null
  official?: boolean | null
  createdBy?: UserCreateOneInput
  linksFromConcept?: ConceptLinkCreateManyWithoutFromInput | null
  linksToConcept?: ConceptLinkCreateManyWithoutToInput | null
  courses?: CourseCreateManyWithoutConceptsInput | null
  workspace?: WorkspaceCreateOneWithoutConceptsInput
}
export type ConceptCreateWithoutResourcesInputInputObject =
  | Extract<keyof ConceptCreateWithoutResourcesInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'official', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  | { name: 'linksFromConcept', alias?: string  } 
  | { name: 'linksToConcept', alias?: string  } 
  | { name: 'courses', alias?: string  } 
  | { name: 'workspace', alias?: string  } 
  
export interface ResourceUpdateInput {
  concept?: ConceptUpdateOneRequiredWithoutResourcesInput | null
  name?: string | null
  description?: string | null
  urls?: URLUpdateManyWithoutResourceInput | null
}
export type ResourceUpdateInputInputObject =
  | Extract<keyof ResourceUpdateInput, string>
  | { name: 'concept', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'urls', alias?: string  } 
  
export interface ConceptUpdateOneRequiredWithoutResourcesInput {
  create?: ConceptCreateWithoutResourcesInput | null
  update?: ConceptUpdateWithoutResourcesDataInput | null
  upsert?: ConceptUpsertWithoutResourcesInput | null
  connect?: ConceptWhereUniqueInput | null
}
export type ConceptUpdateOneRequiredWithoutResourcesInputInputObject =
  | Extract<keyof ConceptUpdateOneRequiredWithoutResourcesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ConceptUpdateWithoutResourcesDataInput {
  name?: string | null
  description?: string | null
  official?: boolean | null
  createdBy?: UserUpdateOneRequiredInput | null
  linksFromConcept?: ConceptLinkUpdateManyWithoutFromInput | null
  linksToConcept?: ConceptLinkUpdateManyWithoutToInput | null
  courses?: CourseUpdateManyWithoutConceptsInput | null
  workspace?: WorkspaceUpdateOneRequiredWithoutConceptsInput | null
}
export type ConceptUpdateWithoutResourcesDataInputInputObject =
  | Extract<keyof ConceptUpdateWithoutResourcesDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'official', alias?: string  } 
  | { name: 'createdBy', alias?: string  } 
  | { name: 'linksFromConcept', alias?: string  } 
  | { name: 'linksToConcept', alias?: string  } 
  | { name: 'courses', alias?: string  } 
  | { name: 'workspace', alias?: string  } 
  
export interface ConceptUpsertWithoutResourcesInput {
  update?: ConceptUpdateWithoutResourcesDataInput
  create?: ConceptCreateWithoutResourcesInput
}
export type ConceptUpsertWithoutResourcesInputInputObject =
  | Extract<keyof ConceptUpsertWithoutResourcesInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ResourceUpdateManyMutationInput {
  name?: string | null
  description?: string | null
}
export type ResourceUpdateManyMutationInputInputObject =
  | Extract<keyof ResourceUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  
export interface URLCreateInput {
  id?: string | null
  address?: string
  resource?: ResourceCreateOneWithoutUrlsInput
}
export type URLCreateInputInputObject =
  | Extract<keyof URLCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'resource', alias?: string  } 
  
export interface ResourceCreateOneWithoutUrlsInput {
  create?: ResourceCreateWithoutUrlsInput | null
  connect?: ResourceWhereUniqueInput | null
}
export type ResourceCreateOneWithoutUrlsInputInputObject =
  | Extract<keyof ResourceCreateOneWithoutUrlsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ResourceCreateWithoutUrlsInput {
  id?: string | null
  concept?: ConceptCreateOneWithoutResourcesInput
  name?: string
  description?: string
}
export type ResourceCreateWithoutUrlsInputInputObject =
  | Extract<keyof ResourceCreateWithoutUrlsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'concept', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  
export interface URLUpdateInput {
  address?: string | null
  resource?: ResourceUpdateOneRequiredWithoutUrlsInput | null
}
export type URLUpdateInputInputObject =
  | Extract<keyof URLUpdateInput, string>
  | { name: 'address', alias?: string  } 
  | { name: 'resource', alias?: string  } 
  
export interface ResourceUpdateOneRequiredWithoutUrlsInput {
  create?: ResourceCreateWithoutUrlsInput | null
  update?: ResourceUpdateWithoutUrlsDataInput | null
  upsert?: ResourceUpsertWithoutUrlsInput | null
  connect?: ResourceWhereUniqueInput | null
}
export type ResourceUpdateOneRequiredWithoutUrlsInputInputObject =
  | Extract<keyof ResourceUpdateOneRequiredWithoutUrlsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ResourceUpdateWithoutUrlsDataInput {
  concept?: ConceptUpdateOneRequiredWithoutResourcesInput | null
  name?: string | null
  description?: string | null
}
export type ResourceUpdateWithoutUrlsDataInputInputObject =
  | Extract<keyof ResourceUpdateWithoutUrlsDataInput, string>
  | { name: 'concept', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  
export interface ResourceUpsertWithoutUrlsInput {
  update?: ResourceUpdateWithoutUrlsDataInput
  create?: ResourceCreateWithoutUrlsInput
}
export type ResourceUpsertWithoutUrlsInputInputObject =
  | Extract<keyof ResourceUpsertWithoutUrlsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface URLUpdateManyMutationInput {
  address?: string | null
}
export type URLUpdateManyMutationInputInputObject =
  | Extract<keyof URLUpdateManyMutationInput, string>
  | { name: 'address', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ProjectWhereInput | null
  AND?: ProjectSubscriptionWhereInput[]
  OR?: ProjectSubscriptionWhereInput[]
  NOT?: ProjectSubscriptionWhereInput[]
}
export type ProjectSubscriptionWhereInputInputObject =
  | Extract<keyof ProjectSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface WorkspaceSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: WorkspaceWhereInput | null
  AND?: WorkspaceSubscriptionWhereInput[]
  OR?: WorkspaceSubscriptionWhereInput[]
  NOT?: WorkspaceSubscriptionWhereInput[]
}
export type WorkspaceSubscriptionWhereInputInputObject =
  | Extract<keyof WorkspaceSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CourseLinkSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: CourseLinkWhereInput | null
  AND?: CourseLinkSubscriptionWhereInput[]
  OR?: CourseLinkSubscriptionWhereInput[]
  NOT?: CourseLinkSubscriptionWhereInput[]
}
export type CourseLinkSubscriptionWhereInputInputObject =
  | Extract<keyof CourseLinkSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CourseSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: CourseWhereInput | null
  AND?: CourseSubscriptionWhereInput[]
  OR?: CourseSubscriptionWhereInput[]
  NOT?: CourseSubscriptionWhereInput[]
}
export type CourseSubscriptionWhereInputInputObject =
  | Extract<keyof CourseSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ConceptLinkSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ConceptLinkWhereInput | null
  AND?: ConceptLinkSubscriptionWhereInput[]
  OR?: ConceptLinkSubscriptionWhereInput[]
  NOT?: ConceptLinkSubscriptionWhereInput[]
}
export type ConceptLinkSubscriptionWhereInputInputObject =
  | Extract<keyof ConceptLinkSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ConceptSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ConceptWhereInput | null
  AND?: ConceptSubscriptionWhereInput[]
  OR?: ConceptSubscriptionWhereInput[]
  NOT?: ConceptSubscriptionWhereInput[]
}
export type ConceptSubscriptionWhereInputInputObject =
  | Extract<keyof ConceptSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ResourceSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ResourceWhereInput | null
  AND?: ResourceSubscriptionWhereInput[]
  OR?: ResourceSubscriptionWhereInput[]
  NOT?: ResourceSubscriptionWhereInput[]
}
export type ResourceSubscriptionWhereInputInputObject =
  | Extract<keyof ResourceSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface URLSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: URLWhereInput | null
  AND?: URLSubscriptionWhereInput[]
  OR?: URLSubscriptionWhereInput[]
  NOT?: URLSubscriptionWhereInput[]
}
export type URLSubscriptionWhereInputInputObject =
  | Extract<keyof URLSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type RoleValues =
  | 'GUEST'
  | 'STUDENT'
  | 'STAFF'
  | 'ADMIN'
  
export type WorkspaceOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'public_ASC'
  | 'public_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'tmcId_ASC'
  | 'tmcId_DESC'
  | 'role_ASC'
  | 'role_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'guideProgress_ASC'
  | 'guideProgress_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type CourseLinkOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'official_ASC'
  | 'official_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type ConceptOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'official_ASC'
  | 'official_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type ConceptLinkOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'official_ASC'
  | 'official_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type CourseOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type ResourceOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type URLOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'address_ASC'
  | 'address_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type ProjectOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  