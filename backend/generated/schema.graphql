### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type AggregateConcept {
  count: Int!
}

type AggregateConceptLink {
  count: Int!
}

type AggregateCourse {
  count: Int!
}

type AggregateCourseLink {
  count: Int!
}

type AggregateProject {
  count: Int!
}

type AggregateResource {
  count: Int!
}

type AggregateURL {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateWorkspace {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Concept {
  courses(after: String, before: String, first: Int, last: Int, orderBy: CourseOrderByInput, skip: Int, where: CourseWhereInput): [Course!]
  createdBy: User!
  description: String
  id: ID!
  linksFromConcept(after: String, before: String, first: Int, last: Int, orderBy: ConceptLinkOrderByInput, skip: Int, where: ConceptLinkWhereInput): [ConceptLink!]
  linksToConcept(after: String, before: String, first: Int, last: Int, orderBy: ConceptLinkOrderByInput, skip: Int, where: ConceptLinkWhereInput): [ConceptLink!]
  name: String!
  official: Boolean!
  resources(after: String, before: String, first: Int, last: Int, orderBy: ResourceOrderByInput, skip: Int, where: ResourceWhereInput): [Resource!]
  workspace: Workspace!
}

type ConceptConnection {
  aggregate: AggregateConcept!
  edges: [ConceptEdge!]!
  pageInfo: PageInfo!
}

input ConceptCreateInput {
  courses: CourseCreateManyWithoutConceptsInput
  createdBy: UserCreateOneInput!
  description: String
  id: ID
  linksFromConcept: ConceptLinkCreateManyWithoutFromInput
  linksToConcept: ConceptLinkCreateManyWithoutToInput
  name: String!
  official: Boolean
  resources: ResourceCreateManyWithoutConceptInput
  workspace: WorkspaceCreateOneWithoutConceptsInput!
}

input ConceptCreateManyWithoutCoursesInput {
  connect: [ConceptWhereUniqueInput!]
  create: [ConceptCreateWithoutCoursesInput!]
}

input ConceptCreateManyWithoutWorkspaceInput {
  connect: [ConceptWhereUniqueInput!]
  create: [ConceptCreateWithoutWorkspaceInput!]
}

input ConceptCreateOneWithoutLinksFromConceptInput {
  connect: ConceptWhereUniqueInput
  create: ConceptCreateWithoutLinksFromConceptInput
}

input ConceptCreateOneWithoutLinksToConceptInput {
  connect: ConceptWhereUniqueInput
  create: ConceptCreateWithoutLinksToConceptInput
}

input ConceptCreateOneWithoutResourcesInput {
  connect: ConceptWhereUniqueInput
  create: ConceptCreateWithoutResourcesInput
}

input ConceptCreateWithoutCoursesInput {
  createdBy: UserCreateOneInput!
  description: String
  id: ID
  linksFromConcept: ConceptLinkCreateManyWithoutFromInput
  linksToConcept: ConceptLinkCreateManyWithoutToInput
  name: String!
  official: Boolean
  resources: ResourceCreateManyWithoutConceptInput
  workspace: WorkspaceCreateOneWithoutConceptsInput!
}

input ConceptCreateWithoutLinksFromConceptInput {
  courses: CourseCreateManyWithoutConceptsInput
  createdBy: UserCreateOneInput!
  description: String
  id: ID
  linksToConcept: ConceptLinkCreateManyWithoutToInput
  name: String!
  official: Boolean
  resources: ResourceCreateManyWithoutConceptInput
  workspace: WorkspaceCreateOneWithoutConceptsInput!
}

input ConceptCreateWithoutLinksToConceptInput {
  courses: CourseCreateManyWithoutConceptsInput
  createdBy: UserCreateOneInput!
  description: String
  id: ID
  linksFromConcept: ConceptLinkCreateManyWithoutFromInput
  name: String!
  official: Boolean
  resources: ResourceCreateManyWithoutConceptInput
  workspace: WorkspaceCreateOneWithoutConceptsInput!
}

input ConceptCreateWithoutResourcesInput {
  courses: CourseCreateManyWithoutConceptsInput
  createdBy: UserCreateOneInput!
  description: String
  id: ID
  linksFromConcept: ConceptLinkCreateManyWithoutFromInput
  linksToConcept: ConceptLinkCreateManyWithoutToInput
  name: String!
  official: Boolean
  workspace: WorkspaceCreateOneWithoutConceptsInput!
}

input ConceptCreateWithoutWorkspaceInput {
  courses: CourseCreateManyWithoutConceptsInput
  createdBy: UserCreateOneInput!
  description: String
  id: ID
  linksFromConcept: ConceptLinkCreateManyWithoutFromInput
  linksToConcept: ConceptLinkCreateManyWithoutToInput
  name: String!
  official: Boolean
  resources: ResourceCreateManyWithoutConceptInput
}

type ConceptEdge {
  cursor: String!
  node: Concept!
}

type ConceptLink {
  createdBy: User!
  from: Concept!
  id: ID!
  official: Boolean!
  to: Concept!
  workspace: Workspace!
}

type ConceptLinkConnection {
  aggregate: AggregateConceptLink!
  edges: [ConceptLinkEdge!]!
  pageInfo: PageInfo!
}

input ConceptLinkCreateInput {
  createdBy: UserCreateOneInput!
  from: ConceptCreateOneWithoutLinksFromConceptInput!
  id: ID
  official: Boolean
  to: ConceptCreateOneWithoutLinksToConceptInput!
  workspace: WorkspaceCreateOneWithoutConceptLinksInput!
}

input ConceptLinkCreateManyWithoutFromInput {
  connect: [ConceptLinkWhereUniqueInput!]
  create: [ConceptLinkCreateWithoutFromInput!]
}

input ConceptLinkCreateManyWithoutToInput {
  connect: [ConceptLinkWhereUniqueInput!]
  create: [ConceptLinkCreateWithoutToInput!]
}

input ConceptLinkCreateManyWithoutWorkspaceInput {
  connect: [ConceptLinkWhereUniqueInput!]
  create: [ConceptLinkCreateWithoutWorkspaceInput!]
}

input ConceptLinkCreateWithoutFromInput {
  createdBy: UserCreateOneInput!
  id: ID
  official: Boolean
  to: ConceptCreateOneWithoutLinksToConceptInput!
  workspace: WorkspaceCreateOneWithoutConceptLinksInput!
}

input ConceptLinkCreateWithoutToInput {
  createdBy: UserCreateOneInput!
  from: ConceptCreateOneWithoutLinksFromConceptInput!
  id: ID
  official: Boolean
  workspace: WorkspaceCreateOneWithoutConceptLinksInput!
}

input ConceptLinkCreateWithoutWorkspaceInput {
  createdBy: UserCreateOneInput!
  from: ConceptCreateOneWithoutLinksFromConceptInput!
  id: ID
  official: Boolean
  to: ConceptCreateOneWithoutLinksToConceptInput!
}

type ConceptLinkEdge {
  cursor: String!
  node: ConceptLink!
}

enum ConceptLinkOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  official_ASC
  official_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input ConceptLinkScalarWhereInput {
  AND: [ConceptLinkScalarWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [ConceptLinkScalarWhereInput!]
  official: Boolean
  official_not: Boolean
  OR: [ConceptLinkScalarWhereInput!]
}

input ConceptLinkUpdateInput {
  createdBy: UserUpdateOneRequiredInput
  from: ConceptUpdateOneRequiredWithoutLinksFromConceptInput
  official: Boolean
  to: ConceptUpdateOneRequiredWithoutLinksToConceptInput
  workspace: WorkspaceUpdateOneRequiredWithoutConceptLinksInput
}

input ConceptLinkUpdateManyDataInput {
  official: Boolean
}

input ConceptLinkUpdateManyMutationInput {
  official: Boolean
}

input ConceptLinkUpdateManyWithoutFromInput {
  connect: [ConceptLinkWhereUniqueInput!]
  create: [ConceptLinkCreateWithoutFromInput!]
  delete: [ConceptLinkWhereUniqueInput!]
  deleteMany: [ConceptLinkScalarWhereInput!]
  disconnect: [ConceptLinkWhereUniqueInput!]
  set: [ConceptLinkWhereUniqueInput!]
  update: [ConceptLinkUpdateWithWhereUniqueWithoutFromInput!]
  updateMany: [ConceptLinkUpdateManyWithWhereNestedInput!]
  upsert: [ConceptLinkUpsertWithWhereUniqueWithoutFromInput!]
}

input ConceptLinkUpdateManyWithoutToInput {
  connect: [ConceptLinkWhereUniqueInput!]
  create: [ConceptLinkCreateWithoutToInput!]
  delete: [ConceptLinkWhereUniqueInput!]
  deleteMany: [ConceptLinkScalarWhereInput!]
  disconnect: [ConceptLinkWhereUniqueInput!]
  set: [ConceptLinkWhereUniqueInput!]
  update: [ConceptLinkUpdateWithWhereUniqueWithoutToInput!]
  updateMany: [ConceptLinkUpdateManyWithWhereNestedInput!]
  upsert: [ConceptLinkUpsertWithWhereUniqueWithoutToInput!]
}

input ConceptLinkUpdateManyWithoutWorkspaceInput {
  connect: [ConceptLinkWhereUniqueInput!]
  create: [ConceptLinkCreateWithoutWorkspaceInput!]
  delete: [ConceptLinkWhereUniqueInput!]
  deleteMany: [ConceptLinkScalarWhereInput!]
  disconnect: [ConceptLinkWhereUniqueInput!]
  set: [ConceptLinkWhereUniqueInput!]
  update: [ConceptLinkUpdateWithWhereUniqueWithoutWorkspaceInput!]
  updateMany: [ConceptLinkUpdateManyWithWhereNestedInput!]
  upsert: [ConceptLinkUpsertWithWhereUniqueWithoutWorkspaceInput!]
}

input ConceptLinkUpdateManyWithWhereNestedInput {
  data: ConceptLinkUpdateManyDataInput!
  where: ConceptLinkScalarWhereInput!
}

input ConceptLinkUpdateWithoutFromDataInput {
  createdBy: UserUpdateOneRequiredInput
  official: Boolean
  to: ConceptUpdateOneRequiredWithoutLinksToConceptInput
  workspace: WorkspaceUpdateOneRequiredWithoutConceptLinksInput
}

input ConceptLinkUpdateWithoutToDataInput {
  createdBy: UserUpdateOneRequiredInput
  from: ConceptUpdateOneRequiredWithoutLinksFromConceptInput
  official: Boolean
  workspace: WorkspaceUpdateOneRequiredWithoutConceptLinksInput
}

input ConceptLinkUpdateWithoutWorkspaceDataInput {
  createdBy: UserUpdateOneRequiredInput
  from: ConceptUpdateOneRequiredWithoutLinksFromConceptInput
  official: Boolean
  to: ConceptUpdateOneRequiredWithoutLinksToConceptInput
}

input ConceptLinkUpdateWithWhereUniqueWithoutFromInput {
  data: ConceptLinkUpdateWithoutFromDataInput!
  where: ConceptLinkWhereUniqueInput!
}

input ConceptLinkUpdateWithWhereUniqueWithoutToInput {
  data: ConceptLinkUpdateWithoutToDataInput!
  where: ConceptLinkWhereUniqueInput!
}

input ConceptLinkUpdateWithWhereUniqueWithoutWorkspaceInput {
  data: ConceptLinkUpdateWithoutWorkspaceDataInput!
  where: ConceptLinkWhereUniqueInput!
}

input ConceptLinkUpsertWithWhereUniqueWithoutFromInput {
  create: ConceptLinkCreateWithoutFromInput!
  update: ConceptLinkUpdateWithoutFromDataInput!
  where: ConceptLinkWhereUniqueInput!
}

input ConceptLinkUpsertWithWhereUniqueWithoutToInput {
  create: ConceptLinkCreateWithoutToInput!
  update: ConceptLinkUpdateWithoutToDataInput!
  where: ConceptLinkWhereUniqueInput!
}

input ConceptLinkUpsertWithWhereUniqueWithoutWorkspaceInput {
  create: ConceptLinkCreateWithoutWorkspaceInput!
  update: ConceptLinkUpdateWithoutWorkspaceDataInput!
  where: ConceptLinkWhereUniqueInput!
}

input ConceptLinkWhereInput {
  AND: [ConceptLinkWhereInput!]
  createdBy: UserWhereInput
  from: ConceptWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [ConceptLinkWhereInput!]
  official: Boolean
  official_not: Boolean
  OR: [ConceptLinkWhereInput!]
  to: ConceptWhereInput
  workspace: WorkspaceWhereInput
}

input ConceptLinkWhereUniqueInput {
  id: ID
}

enum ConceptOrderByInput {
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  official_ASC
  official_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input ConceptScalarWhereInput {
  AND: [ConceptScalarWhereInput!]
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [ConceptScalarWhereInput!]
  official: Boolean
  official_not: Boolean
  OR: [ConceptScalarWhereInput!]
}

input ConceptUpdateInput {
  courses: CourseUpdateManyWithoutConceptsInput
  createdBy: UserUpdateOneRequiredInput
  description: String
  linksFromConcept: ConceptLinkUpdateManyWithoutFromInput
  linksToConcept: ConceptLinkUpdateManyWithoutToInput
  name: String
  official: Boolean
  resources: ResourceUpdateManyWithoutConceptInput
  workspace: WorkspaceUpdateOneRequiredWithoutConceptsInput
}

input ConceptUpdateManyDataInput {
  description: String
  name: String
  official: Boolean
}

input ConceptUpdateManyMutationInput {
  description: String
  name: String
  official: Boolean
}

input ConceptUpdateManyWithoutCoursesInput {
  connect: [ConceptWhereUniqueInput!]
  create: [ConceptCreateWithoutCoursesInput!]
  delete: [ConceptWhereUniqueInput!]
  deleteMany: [ConceptScalarWhereInput!]
  disconnect: [ConceptWhereUniqueInput!]
  set: [ConceptWhereUniqueInput!]
  update: [ConceptUpdateWithWhereUniqueWithoutCoursesInput!]
  updateMany: [ConceptUpdateManyWithWhereNestedInput!]
  upsert: [ConceptUpsertWithWhereUniqueWithoutCoursesInput!]
}

input ConceptUpdateManyWithoutWorkspaceInput {
  connect: [ConceptWhereUniqueInput!]
  create: [ConceptCreateWithoutWorkspaceInput!]
  delete: [ConceptWhereUniqueInput!]
  deleteMany: [ConceptScalarWhereInput!]
  disconnect: [ConceptWhereUniqueInput!]
  set: [ConceptWhereUniqueInput!]
  update: [ConceptUpdateWithWhereUniqueWithoutWorkspaceInput!]
  updateMany: [ConceptUpdateManyWithWhereNestedInput!]
  upsert: [ConceptUpsertWithWhereUniqueWithoutWorkspaceInput!]
}

input ConceptUpdateManyWithWhereNestedInput {
  data: ConceptUpdateManyDataInput!
  where: ConceptScalarWhereInput!
}

input ConceptUpdateOneRequiredWithoutLinksFromConceptInput {
  connect: ConceptWhereUniqueInput
  create: ConceptCreateWithoutLinksFromConceptInput
  update: ConceptUpdateWithoutLinksFromConceptDataInput
  upsert: ConceptUpsertWithoutLinksFromConceptInput
}

input ConceptUpdateOneRequiredWithoutLinksToConceptInput {
  connect: ConceptWhereUniqueInput
  create: ConceptCreateWithoutLinksToConceptInput
  update: ConceptUpdateWithoutLinksToConceptDataInput
  upsert: ConceptUpsertWithoutLinksToConceptInput
}

input ConceptUpdateOneRequiredWithoutResourcesInput {
  connect: ConceptWhereUniqueInput
  create: ConceptCreateWithoutResourcesInput
  update: ConceptUpdateWithoutResourcesDataInput
  upsert: ConceptUpsertWithoutResourcesInput
}

input ConceptUpdateWithoutCoursesDataInput {
  createdBy: UserUpdateOneRequiredInput
  description: String
  linksFromConcept: ConceptLinkUpdateManyWithoutFromInput
  linksToConcept: ConceptLinkUpdateManyWithoutToInput
  name: String
  official: Boolean
  resources: ResourceUpdateManyWithoutConceptInput
  workspace: WorkspaceUpdateOneRequiredWithoutConceptsInput
}

input ConceptUpdateWithoutLinksFromConceptDataInput {
  courses: CourseUpdateManyWithoutConceptsInput
  createdBy: UserUpdateOneRequiredInput
  description: String
  linksToConcept: ConceptLinkUpdateManyWithoutToInput
  name: String
  official: Boolean
  resources: ResourceUpdateManyWithoutConceptInput
  workspace: WorkspaceUpdateOneRequiredWithoutConceptsInput
}

input ConceptUpdateWithoutLinksToConceptDataInput {
  courses: CourseUpdateManyWithoutConceptsInput
  createdBy: UserUpdateOneRequiredInput
  description: String
  linksFromConcept: ConceptLinkUpdateManyWithoutFromInput
  name: String
  official: Boolean
  resources: ResourceUpdateManyWithoutConceptInput
  workspace: WorkspaceUpdateOneRequiredWithoutConceptsInput
}

input ConceptUpdateWithoutResourcesDataInput {
  courses: CourseUpdateManyWithoutConceptsInput
  createdBy: UserUpdateOneRequiredInput
  description: String
  linksFromConcept: ConceptLinkUpdateManyWithoutFromInput
  linksToConcept: ConceptLinkUpdateManyWithoutToInput
  name: String
  official: Boolean
  workspace: WorkspaceUpdateOneRequiredWithoutConceptsInput
}

input ConceptUpdateWithoutWorkspaceDataInput {
  courses: CourseUpdateManyWithoutConceptsInput
  createdBy: UserUpdateOneRequiredInput
  description: String
  linksFromConcept: ConceptLinkUpdateManyWithoutFromInput
  linksToConcept: ConceptLinkUpdateManyWithoutToInput
  name: String
  official: Boolean
  resources: ResourceUpdateManyWithoutConceptInput
}

input ConceptUpdateWithWhereUniqueWithoutCoursesInput {
  data: ConceptUpdateWithoutCoursesDataInput!
  where: ConceptWhereUniqueInput!
}

input ConceptUpdateWithWhereUniqueWithoutWorkspaceInput {
  data: ConceptUpdateWithoutWorkspaceDataInput!
  where: ConceptWhereUniqueInput!
}

input ConceptUpsertWithoutLinksFromConceptInput {
  create: ConceptCreateWithoutLinksFromConceptInput!
  update: ConceptUpdateWithoutLinksFromConceptDataInput!
}

input ConceptUpsertWithoutLinksToConceptInput {
  create: ConceptCreateWithoutLinksToConceptInput!
  update: ConceptUpdateWithoutLinksToConceptDataInput!
}

input ConceptUpsertWithoutResourcesInput {
  create: ConceptCreateWithoutResourcesInput!
  update: ConceptUpdateWithoutResourcesDataInput!
}

input ConceptUpsertWithWhereUniqueWithoutCoursesInput {
  create: ConceptCreateWithoutCoursesInput!
  update: ConceptUpdateWithoutCoursesDataInput!
  where: ConceptWhereUniqueInput!
}

input ConceptUpsertWithWhereUniqueWithoutWorkspaceInput {
  create: ConceptCreateWithoutWorkspaceInput!
  update: ConceptUpdateWithoutWorkspaceDataInput!
  where: ConceptWhereUniqueInput!
}

input ConceptWhereInput {
  AND: [ConceptWhereInput!]
  courses_every: CourseWhereInput
  courses_none: CourseWhereInput
  courses_some: CourseWhereInput
  createdBy: UserWhereInput
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  linksFromConcept_every: ConceptLinkWhereInput
  linksFromConcept_none: ConceptLinkWhereInput
  linksFromConcept_some: ConceptLinkWhereInput
  linksToConcept_every: ConceptLinkWhereInput
  linksToConcept_none: ConceptLinkWhereInput
  linksToConcept_some: ConceptLinkWhereInput
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [ConceptWhereInput!]
  official: Boolean
  official_not: Boolean
  OR: [ConceptWhereInput!]
  resources_every: ResourceWhereInput
  resources_none: ResourceWhereInput
  resources_some: ResourceWhereInput
  workspace: WorkspaceWhereInput
}

input ConceptWhereUniqueInput {
  id: ID
}

type Course {
  concepts(after: String, before: String, first: Int, last: Int, orderBy: ConceptOrderByInput, skip: Int, where: ConceptWhereInput): [Concept!]
  createdBy: User!
  id: ID!
  linksFromCourse(after: String, before: String, first: Int, last: Int, orderBy: CourseLinkOrderByInput, skip: Int, where: CourseLinkWhereInput): [CourseLink!]
  linksToCourse(after: String, before: String, first: Int, last: Int, orderBy: CourseLinkOrderByInput, skip: Int, where: CourseLinkWhereInput): [CourseLink!]
  name: String!
  workspace: Workspace!
}

type CourseConnection {
  aggregate: AggregateCourse!
  edges: [CourseEdge!]!
  pageInfo: PageInfo!
}

input CourseCreateInput {
  concepts: ConceptCreateManyWithoutCoursesInput
  createdBy: UserCreateOneInput!
  id: ID
  linksFromCourse: CourseLinkCreateManyWithoutFromInput
  linksToCourse: CourseLinkCreateManyWithoutToInput
  name: String!
  workspace: WorkspaceCreateOneWithoutCoursesInput!
}

input CourseCreateManyWithoutConceptsInput {
  connect: [CourseWhereUniqueInput!]
  create: [CourseCreateWithoutConceptsInput!]
}

input CourseCreateManyWithoutWorkspaceInput {
  connect: [CourseWhereUniqueInput!]
  create: [CourseCreateWithoutWorkspaceInput!]
}

input CourseCreateOneInput {
  connect: CourseWhereUniqueInput
  create: CourseCreateInput
}

input CourseCreateOneWithoutLinksFromCourseInput {
  connect: CourseWhereUniqueInput
  create: CourseCreateWithoutLinksFromCourseInput
}

input CourseCreateOneWithoutLinksToCourseInput {
  connect: CourseWhereUniqueInput
  create: CourseCreateWithoutLinksToCourseInput
}

input CourseCreateWithoutConceptsInput {
  createdBy: UserCreateOneInput!
  id: ID
  linksFromCourse: CourseLinkCreateManyWithoutFromInput
  linksToCourse: CourseLinkCreateManyWithoutToInput
  name: String!
  workspace: WorkspaceCreateOneWithoutCoursesInput!
}

input CourseCreateWithoutLinksFromCourseInput {
  concepts: ConceptCreateManyWithoutCoursesInput
  createdBy: UserCreateOneInput!
  id: ID
  linksToCourse: CourseLinkCreateManyWithoutToInput
  name: String!
  workspace: WorkspaceCreateOneWithoutCoursesInput!
}

input CourseCreateWithoutLinksToCourseInput {
  concepts: ConceptCreateManyWithoutCoursesInput
  createdBy: UserCreateOneInput!
  id: ID
  linksFromCourse: CourseLinkCreateManyWithoutFromInput
  name: String!
  workspace: WorkspaceCreateOneWithoutCoursesInput!
}

input CourseCreateWithoutWorkspaceInput {
  concepts: ConceptCreateManyWithoutCoursesInput
  createdBy: UserCreateOneInput!
  id: ID
  linksFromCourse: CourseLinkCreateManyWithoutFromInput
  linksToCourse: CourseLinkCreateManyWithoutToInput
  name: String!
}

type CourseEdge {
  cursor: String!
  node: Course!
}

type CourseLink {
  createdBy: User!
  from: Course!
  id: ID!
  official: Boolean!
  to: Course!
  workspace: Workspace!
}

type CourseLinkConnection {
  aggregate: AggregateCourseLink!
  edges: [CourseLinkEdge!]!
  pageInfo: PageInfo!
}

input CourseLinkCreateInput {
  createdBy: UserCreateOneInput!
  from: CourseCreateOneWithoutLinksFromCourseInput!
  id: ID
  official: Boolean
  to: CourseCreateOneWithoutLinksToCourseInput!
  workspace: WorkspaceCreateOneWithoutCourseLinksInput!
}

input CourseLinkCreateManyWithoutFromInput {
  connect: [CourseLinkWhereUniqueInput!]
  create: [CourseLinkCreateWithoutFromInput!]
}

input CourseLinkCreateManyWithoutToInput {
  connect: [CourseLinkWhereUniqueInput!]
  create: [CourseLinkCreateWithoutToInput!]
}

input CourseLinkCreateManyWithoutWorkspaceInput {
  connect: [CourseLinkWhereUniqueInput!]
  create: [CourseLinkCreateWithoutWorkspaceInput!]
}

input CourseLinkCreateWithoutFromInput {
  createdBy: UserCreateOneInput!
  id: ID
  official: Boolean
  to: CourseCreateOneWithoutLinksToCourseInput!
  workspace: WorkspaceCreateOneWithoutCourseLinksInput!
}

input CourseLinkCreateWithoutToInput {
  createdBy: UserCreateOneInput!
  from: CourseCreateOneWithoutLinksFromCourseInput!
  id: ID
  official: Boolean
  workspace: WorkspaceCreateOneWithoutCourseLinksInput!
}

input CourseLinkCreateWithoutWorkspaceInput {
  createdBy: UserCreateOneInput!
  from: CourseCreateOneWithoutLinksFromCourseInput!
  id: ID
  official: Boolean
  to: CourseCreateOneWithoutLinksToCourseInput!
}

type CourseLinkEdge {
  cursor: String!
  node: CourseLink!
}

enum CourseLinkOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  official_ASC
  official_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input CourseLinkScalarWhereInput {
  AND: [CourseLinkScalarWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [CourseLinkScalarWhereInput!]
  official: Boolean
  official_not: Boolean
  OR: [CourseLinkScalarWhereInput!]
}

input CourseLinkUpdateInput {
  createdBy: UserUpdateOneRequiredInput
  from: CourseUpdateOneRequiredWithoutLinksFromCourseInput
  official: Boolean
  to: CourseUpdateOneRequiredWithoutLinksToCourseInput
  workspace: WorkspaceUpdateOneRequiredWithoutCourseLinksInput
}

input CourseLinkUpdateManyDataInput {
  official: Boolean
}

input CourseLinkUpdateManyMutationInput {
  official: Boolean
}

input CourseLinkUpdateManyWithoutFromInput {
  connect: [CourseLinkWhereUniqueInput!]
  create: [CourseLinkCreateWithoutFromInput!]
  delete: [CourseLinkWhereUniqueInput!]
  deleteMany: [CourseLinkScalarWhereInput!]
  disconnect: [CourseLinkWhereUniqueInput!]
  set: [CourseLinkWhereUniqueInput!]
  update: [CourseLinkUpdateWithWhereUniqueWithoutFromInput!]
  updateMany: [CourseLinkUpdateManyWithWhereNestedInput!]
  upsert: [CourseLinkUpsertWithWhereUniqueWithoutFromInput!]
}

input CourseLinkUpdateManyWithoutToInput {
  connect: [CourseLinkWhereUniqueInput!]
  create: [CourseLinkCreateWithoutToInput!]
  delete: [CourseLinkWhereUniqueInput!]
  deleteMany: [CourseLinkScalarWhereInput!]
  disconnect: [CourseLinkWhereUniqueInput!]
  set: [CourseLinkWhereUniqueInput!]
  update: [CourseLinkUpdateWithWhereUniqueWithoutToInput!]
  updateMany: [CourseLinkUpdateManyWithWhereNestedInput!]
  upsert: [CourseLinkUpsertWithWhereUniqueWithoutToInput!]
}

input CourseLinkUpdateManyWithoutWorkspaceInput {
  connect: [CourseLinkWhereUniqueInput!]
  create: [CourseLinkCreateWithoutWorkspaceInput!]
  delete: [CourseLinkWhereUniqueInput!]
  deleteMany: [CourseLinkScalarWhereInput!]
  disconnect: [CourseLinkWhereUniqueInput!]
  set: [CourseLinkWhereUniqueInput!]
  update: [CourseLinkUpdateWithWhereUniqueWithoutWorkspaceInput!]
  updateMany: [CourseLinkUpdateManyWithWhereNestedInput!]
  upsert: [CourseLinkUpsertWithWhereUniqueWithoutWorkspaceInput!]
}

input CourseLinkUpdateManyWithWhereNestedInput {
  data: CourseLinkUpdateManyDataInput!
  where: CourseLinkScalarWhereInput!
}

input CourseLinkUpdateWithoutFromDataInput {
  createdBy: UserUpdateOneRequiredInput
  official: Boolean
  to: CourseUpdateOneRequiredWithoutLinksToCourseInput
  workspace: WorkspaceUpdateOneRequiredWithoutCourseLinksInput
}

input CourseLinkUpdateWithoutToDataInput {
  createdBy: UserUpdateOneRequiredInput
  from: CourseUpdateOneRequiredWithoutLinksFromCourseInput
  official: Boolean
  workspace: WorkspaceUpdateOneRequiredWithoutCourseLinksInput
}

input CourseLinkUpdateWithoutWorkspaceDataInput {
  createdBy: UserUpdateOneRequiredInput
  from: CourseUpdateOneRequiredWithoutLinksFromCourseInput
  official: Boolean
  to: CourseUpdateOneRequiredWithoutLinksToCourseInput
}

input CourseLinkUpdateWithWhereUniqueWithoutFromInput {
  data: CourseLinkUpdateWithoutFromDataInput!
  where: CourseLinkWhereUniqueInput!
}

input CourseLinkUpdateWithWhereUniqueWithoutToInput {
  data: CourseLinkUpdateWithoutToDataInput!
  where: CourseLinkWhereUniqueInput!
}

input CourseLinkUpdateWithWhereUniqueWithoutWorkspaceInput {
  data: CourseLinkUpdateWithoutWorkspaceDataInput!
  where: CourseLinkWhereUniqueInput!
}

input CourseLinkUpsertWithWhereUniqueWithoutFromInput {
  create: CourseLinkCreateWithoutFromInput!
  update: CourseLinkUpdateWithoutFromDataInput!
  where: CourseLinkWhereUniqueInput!
}

input CourseLinkUpsertWithWhereUniqueWithoutToInput {
  create: CourseLinkCreateWithoutToInput!
  update: CourseLinkUpdateWithoutToDataInput!
  where: CourseLinkWhereUniqueInput!
}

input CourseLinkUpsertWithWhereUniqueWithoutWorkspaceInput {
  create: CourseLinkCreateWithoutWorkspaceInput!
  update: CourseLinkUpdateWithoutWorkspaceDataInput!
  where: CourseLinkWhereUniqueInput!
}

input CourseLinkWhereInput {
  AND: [CourseLinkWhereInput!]
  createdBy: UserWhereInput
  from: CourseWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [CourseLinkWhereInput!]
  official: Boolean
  official_not: Boolean
  OR: [CourseLinkWhereInput!]
  to: CourseWhereInput
  workspace: WorkspaceWhereInput
}

input CourseLinkWhereUniqueInput {
  id: ID
}

enum CourseOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input CourseScalarWhereInput {
  AND: [CourseScalarWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [CourseScalarWhereInput!]
  OR: [CourseScalarWhereInput!]
}

input CourseUpdateDataInput {
  concepts: ConceptUpdateManyWithoutCoursesInput
  createdBy: UserUpdateOneRequiredInput
  linksFromCourse: CourseLinkUpdateManyWithoutFromInput
  linksToCourse: CourseLinkUpdateManyWithoutToInput
  name: String
  workspace: WorkspaceUpdateOneRequiredWithoutCoursesInput
}

input CourseUpdateInput {
  concepts: ConceptUpdateManyWithoutCoursesInput
  createdBy: UserUpdateOneRequiredInput
  linksFromCourse: CourseLinkUpdateManyWithoutFromInput
  linksToCourse: CourseLinkUpdateManyWithoutToInput
  name: String
  workspace: WorkspaceUpdateOneRequiredWithoutCoursesInput
}

input CourseUpdateManyDataInput {
  name: String
}

input CourseUpdateManyMutationInput {
  name: String
}

input CourseUpdateManyWithoutConceptsInput {
  connect: [CourseWhereUniqueInput!]
  create: [CourseCreateWithoutConceptsInput!]
  delete: [CourseWhereUniqueInput!]
  deleteMany: [CourseScalarWhereInput!]
  disconnect: [CourseWhereUniqueInput!]
  set: [CourseWhereUniqueInput!]
  update: [CourseUpdateWithWhereUniqueWithoutConceptsInput!]
  updateMany: [CourseUpdateManyWithWhereNestedInput!]
  upsert: [CourseUpsertWithWhereUniqueWithoutConceptsInput!]
}

input CourseUpdateManyWithoutWorkspaceInput {
  connect: [CourseWhereUniqueInput!]
  create: [CourseCreateWithoutWorkspaceInput!]
  delete: [CourseWhereUniqueInput!]
  deleteMany: [CourseScalarWhereInput!]
  disconnect: [CourseWhereUniqueInput!]
  set: [CourseWhereUniqueInput!]
  update: [CourseUpdateWithWhereUniqueWithoutWorkspaceInput!]
  updateMany: [CourseUpdateManyWithWhereNestedInput!]
  upsert: [CourseUpsertWithWhereUniqueWithoutWorkspaceInput!]
}

input CourseUpdateManyWithWhereNestedInput {
  data: CourseUpdateManyDataInput!
  where: CourseScalarWhereInput!
}

input CourseUpdateOneInput {
  connect: CourseWhereUniqueInput
  create: CourseCreateInput
  delete: Boolean
  disconnect: Boolean
  update: CourseUpdateDataInput
  upsert: CourseUpsertNestedInput
}

input CourseUpdateOneRequiredWithoutLinksFromCourseInput {
  connect: CourseWhereUniqueInput
  create: CourseCreateWithoutLinksFromCourseInput
  update: CourseUpdateWithoutLinksFromCourseDataInput
  upsert: CourseUpsertWithoutLinksFromCourseInput
}

input CourseUpdateOneRequiredWithoutLinksToCourseInput {
  connect: CourseWhereUniqueInput
  create: CourseCreateWithoutLinksToCourseInput
  update: CourseUpdateWithoutLinksToCourseDataInput
  upsert: CourseUpsertWithoutLinksToCourseInput
}

input CourseUpdateWithoutConceptsDataInput {
  createdBy: UserUpdateOneRequiredInput
  linksFromCourse: CourseLinkUpdateManyWithoutFromInput
  linksToCourse: CourseLinkUpdateManyWithoutToInput
  name: String
  workspace: WorkspaceUpdateOneRequiredWithoutCoursesInput
}

input CourseUpdateWithoutLinksFromCourseDataInput {
  concepts: ConceptUpdateManyWithoutCoursesInput
  createdBy: UserUpdateOneRequiredInput
  linksToCourse: CourseLinkUpdateManyWithoutToInput
  name: String
  workspace: WorkspaceUpdateOneRequiredWithoutCoursesInput
}

input CourseUpdateWithoutLinksToCourseDataInput {
  concepts: ConceptUpdateManyWithoutCoursesInput
  createdBy: UserUpdateOneRequiredInput
  linksFromCourse: CourseLinkUpdateManyWithoutFromInput
  name: String
  workspace: WorkspaceUpdateOneRequiredWithoutCoursesInput
}

input CourseUpdateWithoutWorkspaceDataInput {
  concepts: ConceptUpdateManyWithoutCoursesInput
  createdBy: UserUpdateOneRequiredInput
  linksFromCourse: CourseLinkUpdateManyWithoutFromInput
  linksToCourse: CourseLinkUpdateManyWithoutToInput
  name: String
}

input CourseUpdateWithWhereUniqueWithoutConceptsInput {
  data: CourseUpdateWithoutConceptsDataInput!
  where: CourseWhereUniqueInput!
}

input CourseUpdateWithWhereUniqueWithoutWorkspaceInput {
  data: CourseUpdateWithoutWorkspaceDataInput!
  where: CourseWhereUniqueInput!
}

input CourseUpsertNestedInput {
  create: CourseCreateInput!
  update: CourseUpdateDataInput!
}

input CourseUpsertWithoutLinksFromCourseInput {
  create: CourseCreateWithoutLinksFromCourseInput!
  update: CourseUpdateWithoutLinksFromCourseDataInput!
}

input CourseUpsertWithoutLinksToCourseInput {
  create: CourseCreateWithoutLinksToCourseInput!
  update: CourseUpdateWithoutLinksToCourseDataInput!
}

input CourseUpsertWithWhereUniqueWithoutConceptsInput {
  create: CourseCreateWithoutConceptsInput!
  update: CourseUpdateWithoutConceptsDataInput!
  where: CourseWhereUniqueInput!
}

input CourseUpsertWithWhereUniqueWithoutWorkspaceInput {
  create: CourseCreateWithoutWorkspaceInput!
  update: CourseUpdateWithoutWorkspaceDataInput!
  where: CourseWhereUniqueInput!
}

input CourseWhereInput {
  AND: [CourseWhereInput!]
  concepts_every: ConceptWhereInput
  concepts_none: ConceptWhereInput
  concepts_some: ConceptWhereInput
  createdBy: UserWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  linksFromCourse_every: CourseLinkWhereInput
  linksFromCourse_none: CourseLinkWhereInput
  linksFromCourse_some: CourseLinkWhereInput
  linksToCourse_every: CourseLinkWhereInput
  linksToCourse_none: CourseLinkWhereInput
  linksToCourse_some: CourseLinkWhereInput
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [CourseWhereInput!]
  OR: [CourseWhereInput!]
  workspace: WorkspaceWhereInput
}

input CourseWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Long

type Mutation {
  createConcept(data: ConceptCreateInput!): Concept!
  createConceptLink(data: ConceptLinkCreateInput!): ConceptLink!
  createCourse(data: CourseCreateInput!): Course!
  createCourseLink(data: CourseLinkCreateInput!): CourseLink!
  createProject(data: ProjectCreateInput!): Project!
  createResource(data: ResourceCreateInput!): Resource!
  createURL(data: URLCreateInput!): URL!
  createUser(data: UserCreateInput!): User!
  createWorkspace(data: WorkspaceCreateInput!): Workspace!
  deleteConcept(where: ConceptWhereUniqueInput!): Concept
  deleteConceptLink(where: ConceptLinkWhereUniqueInput!): ConceptLink
  deleteCourse(where: CourseWhereUniqueInput!): Course
  deleteCourseLink(where: CourseLinkWhereUniqueInput!): CourseLink
  deleteManyConceptLinks(where: ConceptLinkWhereInput): BatchPayload!
  deleteManyConcepts(where: ConceptWhereInput): BatchPayload!
  deleteManyCourseLinks(where: CourseLinkWhereInput): BatchPayload!
  deleteManyCourses(where: CourseWhereInput): BatchPayload!
  deleteManyProjects(where: ProjectWhereInput): BatchPayload!
  deleteManyResources(where: ResourceWhereInput): BatchPayload!
  deleteManyURLs(where: URLWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyWorkspaces(where: WorkspaceWhereInput): BatchPayload!
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteResource(where: ResourceWhereUniqueInput!): Resource
  deleteURL(where: URLWhereUniqueInput!): URL
  deleteUser(where: UserWhereUniqueInput!): User
  deleteWorkspace(where: WorkspaceWhereUniqueInput!): Workspace
  updateConcept(data: ConceptUpdateInput!, where: ConceptWhereUniqueInput!): Concept
  updateConceptLink(data: ConceptLinkUpdateInput!, where: ConceptLinkWhereUniqueInput!): ConceptLink
  updateCourse(data: CourseUpdateInput!, where: CourseWhereUniqueInput!): Course
  updateCourseLink(data: CourseLinkUpdateInput!, where: CourseLinkWhereUniqueInput!): CourseLink
  updateManyConceptLinks(data: ConceptLinkUpdateManyMutationInput!, where: ConceptLinkWhereInput): BatchPayload!
  updateManyConcepts(data: ConceptUpdateManyMutationInput!, where: ConceptWhereInput): BatchPayload!
  updateManyCourseLinks(data: CourseLinkUpdateManyMutationInput!, where: CourseLinkWhereInput): BatchPayload!
  updateManyCourses(data: CourseUpdateManyMutationInput!, where: CourseWhereInput): BatchPayload!
  updateManyProjects(data: ProjectUpdateManyMutationInput!, where: ProjectWhereInput): BatchPayload!
  updateManyResources(data: ResourceUpdateManyMutationInput!, where: ResourceWhereInput): BatchPayload!
  updateManyURLs(data: URLUpdateManyMutationInput!, where: URLWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyWorkspaces(data: WorkspaceUpdateManyMutationInput!, where: WorkspaceWhereInput): BatchPayload!
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateResource(data: ResourceUpdateInput!, where: ResourceWhereUniqueInput!): Resource
  updateURL(data: URLUpdateInput!, where: URLWhereUniqueInput!): URL
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateWorkspace(data: WorkspaceUpdateInput!, where: WorkspaceWhereUniqueInput!): Workspace
  upsertConcept(create: ConceptCreateInput!, update: ConceptUpdateInput!, where: ConceptWhereUniqueInput!): Concept!
  upsertConceptLink(create: ConceptLinkCreateInput!, update: ConceptLinkUpdateInput!, where: ConceptLinkWhereUniqueInput!): ConceptLink!
  upsertCourse(create: CourseCreateInput!, update: CourseUpdateInput!, where: CourseWhereUniqueInput!): Course!
  upsertCourseLink(create: CourseLinkCreateInput!, update: CourseLinkUpdateInput!, where: CourseLinkWhereUniqueInput!): CourseLink!
  upsertProject(create: ProjectCreateInput!, update: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project!
  upsertResource(create: ResourceCreateInput!, update: ResourceUpdateInput!, where: ResourceWhereUniqueInput!): Resource!
  upsertURL(create: URLCreateInput!, update: URLUpdateInput!, where: URLWhereUniqueInput!): URL!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  upsertWorkspace(create: WorkspaceCreateInput!, update: WorkspaceUpdateInput!, where: WorkspaceWhereUniqueInput!): Workspace!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Project {
  id: ID!
  name: String!
  owner: User!
  participants(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]
  template: Workspace
  workspaces(after: String, before: String, first: Int, last: Int, orderBy: WorkspaceOrderByInput, skip: Int, where: WorkspaceWhereInput): [Workspace!]
}

type ProjectConnection {
  aggregate: AggregateProject!
  edges: [ProjectEdge!]!
  pageInfo: PageInfo!
}

input ProjectCreateInput {
  id: ID
  name: String!
  owner: UserCreateOneWithoutAsProjectOwnerInput!
  participants: UserCreateManyWithoutAsProjectParticipantInput
  template: WorkspaceCreateOneInput
  workspaces: WorkspaceCreateManyWithoutProjectInput
}

input ProjectCreateManyWithoutOwnerInput {
  connect: [ProjectWhereUniqueInput!]
  create: [ProjectCreateWithoutOwnerInput!]
}

input ProjectCreateManyWithoutParticipantsInput {
  connect: [ProjectWhereUniqueInput!]
  create: [ProjectCreateWithoutParticipantsInput!]
}

input ProjectCreateOneWithoutWorkspacesInput {
  connect: ProjectWhereUniqueInput
  create: ProjectCreateWithoutWorkspacesInput
}

input ProjectCreateWithoutOwnerInput {
  id: ID
  name: String!
  participants: UserCreateManyWithoutAsProjectParticipantInput
  template: WorkspaceCreateOneInput
  workspaces: WorkspaceCreateManyWithoutProjectInput
}

input ProjectCreateWithoutParticipantsInput {
  id: ID
  name: String!
  owner: UserCreateOneWithoutAsProjectOwnerInput!
  template: WorkspaceCreateOneInput
  workspaces: WorkspaceCreateManyWithoutProjectInput
}

input ProjectCreateWithoutWorkspacesInput {
  id: ID
  name: String!
  owner: UserCreateOneWithoutAsProjectOwnerInput!
  participants: UserCreateManyWithoutAsProjectParticipantInput
  template: WorkspaceCreateOneInput
}

type ProjectEdge {
  cursor: String!
  node: Project!
}

enum ProjectOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input ProjectScalarWhereInput {
  AND: [ProjectScalarWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [ProjectScalarWhereInput!]
  OR: [ProjectScalarWhereInput!]
}

input ProjectUpdateInput {
  name: String
  owner: UserUpdateOneRequiredWithoutAsProjectOwnerInput
  participants: UserUpdateManyWithoutAsProjectParticipantInput
  template: WorkspaceUpdateOneInput
  workspaces: WorkspaceUpdateManyWithoutProjectInput
}

input ProjectUpdateManyDataInput {
  name: String
}

input ProjectUpdateManyMutationInput {
  name: String
}

input ProjectUpdateManyWithoutOwnerInput {
  connect: [ProjectWhereUniqueInput!]
  create: [ProjectCreateWithoutOwnerInput!]
  delete: [ProjectWhereUniqueInput!]
  deleteMany: [ProjectScalarWhereInput!]
  disconnect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [ProjectUpdateManyWithWhereNestedInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutOwnerInput!]
}

input ProjectUpdateManyWithoutParticipantsInput {
  connect: [ProjectWhereUniqueInput!]
  create: [ProjectCreateWithoutParticipantsInput!]
  delete: [ProjectWhereUniqueInput!]
  deleteMany: [ProjectScalarWhereInput!]
  disconnect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutParticipantsInput!]
  updateMany: [ProjectUpdateManyWithWhereNestedInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutParticipantsInput!]
}

input ProjectUpdateManyWithWhereNestedInput {
  data: ProjectUpdateManyDataInput!
  where: ProjectScalarWhereInput!
}

input ProjectUpdateOneWithoutWorkspacesInput {
  connect: ProjectWhereUniqueInput
  create: ProjectCreateWithoutWorkspacesInput
  delete: Boolean
  disconnect: Boolean
  update: ProjectUpdateWithoutWorkspacesDataInput
  upsert: ProjectUpsertWithoutWorkspacesInput
}

input ProjectUpdateWithoutOwnerDataInput {
  name: String
  participants: UserUpdateManyWithoutAsProjectParticipantInput
  template: WorkspaceUpdateOneInput
  workspaces: WorkspaceUpdateManyWithoutProjectInput
}

input ProjectUpdateWithoutParticipantsDataInput {
  name: String
  owner: UserUpdateOneRequiredWithoutAsProjectOwnerInput
  template: WorkspaceUpdateOneInput
  workspaces: WorkspaceUpdateManyWithoutProjectInput
}

input ProjectUpdateWithoutWorkspacesDataInput {
  name: String
  owner: UserUpdateOneRequiredWithoutAsProjectOwnerInput
  participants: UserUpdateManyWithoutAsProjectParticipantInput
  template: WorkspaceUpdateOneInput
}

input ProjectUpdateWithWhereUniqueWithoutOwnerInput {
  data: ProjectUpdateWithoutOwnerDataInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpdateWithWhereUniqueWithoutParticipantsInput {
  data: ProjectUpdateWithoutParticipantsDataInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpsertWithoutWorkspacesInput {
  create: ProjectCreateWithoutWorkspacesInput!
  update: ProjectUpdateWithoutWorkspacesDataInput!
}

input ProjectUpsertWithWhereUniqueWithoutOwnerInput {
  create: ProjectCreateWithoutOwnerInput!
  update: ProjectUpdateWithoutOwnerDataInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpsertWithWhereUniqueWithoutParticipantsInput {
  create: ProjectCreateWithoutParticipantsInput!
  update: ProjectUpdateWithoutParticipantsDataInput!
  where: ProjectWhereUniqueInput!
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  owner: UserWhereInput
  participants_every: UserWhereInput
  participants_none: UserWhereInput
  participants_some: UserWhereInput
  template: WorkspaceWhereInput
  workspaces_every: WorkspaceWhereInput
  workspaces_none: WorkspaceWhereInput
  workspaces_some: WorkspaceWhereInput
}

input ProjectWhereUniqueInput {
  id: ID
}

type Query {
  concept(where: ConceptWhereUniqueInput!): Concept
  conceptLink(where: ConceptLinkWhereUniqueInput!): ConceptLink
  conceptLinks(after: String, before: String, first: Int, last: Int, orderBy: ConceptLinkOrderByInput, skip: Int, where: ConceptLinkWhereInput): [ConceptLink!]!
  conceptLinksConnection(after: String, before: String, first: Int, last: Int, orderBy: ConceptLinkOrderByInput, skip: Int, where: ConceptLinkWhereInput): ConceptLinkConnection!
  concepts(after: String, before: String, first: Int, last: Int, orderBy: ConceptOrderByInput, skip: Int, where: ConceptWhereInput): [Concept!]!
  conceptsConnection(after: String, before: String, first: Int, last: Int, orderBy: ConceptOrderByInput, skip: Int, where: ConceptWhereInput): ConceptConnection!
  course(where: CourseWhereUniqueInput!): Course
  courseLink(where: CourseLinkWhereUniqueInput!): CourseLink
  courseLinks(after: String, before: String, first: Int, last: Int, orderBy: CourseLinkOrderByInput, skip: Int, where: CourseLinkWhereInput): [CourseLink!]!
  courseLinksConnection(after: String, before: String, first: Int, last: Int, orderBy: CourseLinkOrderByInput, skip: Int, where: CourseLinkWhereInput): CourseLinkConnection!
  courses(after: String, before: String, first: Int, last: Int, orderBy: CourseOrderByInput, skip: Int, where: CourseWhereInput): [Course!]!
  coursesConnection(after: String, before: String, first: Int, last: Int, orderBy: CourseOrderByInput, skip: Int, where: CourseWhereInput): CourseConnection!
  project(where: ProjectWhereUniqueInput!): Project
  projects(after: String, before: String, first: Int, last: Int, orderBy: ProjectOrderByInput, skip: Int, where: ProjectWhereInput): [Project!]!
  projectsConnection(after: String, before: String, first: Int, last: Int, orderBy: ProjectOrderByInput, skip: Int, where: ProjectWhereInput): ProjectConnection!
  resource(where: ResourceWhereUniqueInput!): Resource
  resources(after: String, before: String, first: Int, last: Int, orderBy: ResourceOrderByInput, skip: Int, where: ResourceWhereInput): [Resource!]!
  resourcesConnection(after: String, before: String, first: Int, last: Int, orderBy: ResourceOrderByInput, skip: Int, where: ResourceWhereInput): ResourceConnection!
  uRL(where: URLWhereUniqueInput!): URL
  uRLs(after: String, before: String, first: Int, last: Int, orderBy: URLOrderByInput, skip: Int, where: URLWhereInput): [URL!]!
  uRLsConnection(after: String, before: String, first: Int, last: Int, orderBy: URLOrderByInput, skip: Int, where: URLWhereInput): URLConnection!
  user(where: UserWhereUniqueInput!): User
  users(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]!
  usersConnection(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): UserConnection!
  workspace(where: WorkspaceWhereUniqueInput!): Workspace
  workspaces(after: String, before: String, first: Int, last: Int, orderBy: WorkspaceOrderByInput, skip: Int, where: WorkspaceWhereInput): [Workspace!]!
  workspacesConnection(after: String, before: String, first: Int, last: Int, orderBy: WorkspaceOrderByInput, skip: Int, where: WorkspaceWhereInput): WorkspaceConnection!
}

type Resource {
  concept: Concept!
  description: String!
  id: ID!
  name: String!
  urls(after: String, before: String, first: Int, last: Int, orderBy: URLOrderByInput, skip: Int, where: URLWhereInput): [URL!]
}

type ResourceConnection {
  aggregate: AggregateResource!
  edges: [ResourceEdge!]!
  pageInfo: PageInfo!
}

input ResourceCreateInput {
  concept: ConceptCreateOneWithoutResourcesInput!
  description: String!
  id: ID
  name: String!
  urls: URLCreateManyWithoutResourceInput
}

input ResourceCreateManyWithoutConceptInput {
  connect: [ResourceWhereUniqueInput!]
  create: [ResourceCreateWithoutConceptInput!]
}

input ResourceCreateOneWithoutUrlsInput {
  connect: ResourceWhereUniqueInput
  create: ResourceCreateWithoutUrlsInput
}

input ResourceCreateWithoutConceptInput {
  description: String!
  id: ID
  name: String!
  urls: URLCreateManyWithoutResourceInput
}

input ResourceCreateWithoutUrlsInput {
  concept: ConceptCreateOneWithoutResourcesInput!
  description: String!
  id: ID
  name: String!
}

type ResourceEdge {
  cursor: String!
  node: Resource!
}

enum ResourceOrderByInput {
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input ResourceScalarWhereInput {
  AND: [ResourceScalarWhereInput!]
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [ResourceScalarWhereInput!]
  OR: [ResourceScalarWhereInput!]
}

input ResourceUpdateInput {
  concept: ConceptUpdateOneRequiredWithoutResourcesInput
  description: String
  name: String
  urls: URLUpdateManyWithoutResourceInput
}

input ResourceUpdateManyDataInput {
  description: String
  name: String
}

input ResourceUpdateManyMutationInput {
  description: String
  name: String
}

input ResourceUpdateManyWithoutConceptInput {
  connect: [ResourceWhereUniqueInput!]
  create: [ResourceCreateWithoutConceptInput!]
  delete: [ResourceWhereUniqueInput!]
  deleteMany: [ResourceScalarWhereInput!]
  disconnect: [ResourceWhereUniqueInput!]
  set: [ResourceWhereUniqueInput!]
  update: [ResourceUpdateWithWhereUniqueWithoutConceptInput!]
  updateMany: [ResourceUpdateManyWithWhereNestedInput!]
  upsert: [ResourceUpsertWithWhereUniqueWithoutConceptInput!]
}

input ResourceUpdateManyWithWhereNestedInput {
  data: ResourceUpdateManyDataInput!
  where: ResourceScalarWhereInput!
}

input ResourceUpdateOneRequiredWithoutUrlsInput {
  connect: ResourceWhereUniqueInput
  create: ResourceCreateWithoutUrlsInput
  update: ResourceUpdateWithoutUrlsDataInput
  upsert: ResourceUpsertWithoutUrlsInput
}

input ResourceUpdateWithoutConceptDataInput {
  description: String
  name: String
  urls: URLUpdateManyWithoutResourceInput
}

input ResourceUpdateWithoutUrlsDataInput {
  concept: ConceptUpdateOneRequiredWithoutResourcesInput
  description: String
  name: String
}

input ResourceUpdateWithWhereUniqueWithoutConceptInput {
  data: ResourceUpdateWithoutConceptDataInput!
  where: ResourceWhereUniqueInput!
}

input ResourceUpsertWithoutUrlsInput {
  create: ResourceCreateWithoutUrlsInput!
  update: ResourceUpdateWithoutUrlsDataInput!
}

input ResourceUpsertWithWhereUniqueWithoutConceptInput {
  create: ResourceCreateWithoutConceptInput!
  update: ResourceUpdateWithoutConceptDataInput!
  where: ResourceWhereUniqueInput!
}

input ResourceWhereInput {
  AND: [ResourceWhereInput!]
  concept: ConceptWhereInput
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [ResourceWhereInput!]
  OR: [ResourceWhereInput!]
  urls_every: URLWhereInput
  urls_none: URLWhereInput
  urls_some: URLWhereInput
}

input ResourceWhereUniqueInput {
  id: ID
}

enum Role {
  ADMIN
  GUEST
  STAFF
  STUDENT
}

type URL {
  address: String!
  id: ID!
  resource: Resource!
}

type URLConnection {
  aggregate: AggregateURL!
  edges: [URLEdge!]!
  pageInfo: PageInfo!
}

input URLCreateInput {
  address: String!
  id: ID
  resource: ResourceCreateOneWithoutUrlsInput!
}

input URLCreateManyWithoutResourceInput {
  connect: [URLWhereUniqueInput!]
  create: [URLCreateWithoutResourceInput!]
}

input URLCreateWithoutResourceInput {
  address: String!
  id: ID
}

type URLEdge {
  cursor: String!
  node: URL!
}

enum URLOrderByInput {
  address_ASC
  address_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input URLScalarWhereInput {
  address: String
  address_contains: String
  address_ends_with: String
  address_gt: String
  address_gte: String
  address_in: [String!]
  address_lt: String
  address_lte: String
  address_not: String
  address_not_contains: String
  address_not_ends_with: String
  address_not_in: [String!]
  address_not_starts_with: String
  address_starts_with: String
  AND: [URLScalarWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [URLScalarWhereInput!]
  OR: [URLScalarWhereInput!]
}

input URLUpdateInput {
  address: String
  resource: ResourceUpdateOneRequiredWithoutUrlsInput
}

input URLUpdateManyDataInput {
  address: String
}

input URLUpdateManyMutationInput {
  address: String
}

input URLUpdateManyWithoutResourceInput {
  connect: [URLWhereUniqueInput!]
  create: [URLCreateWithoutResourceInput!]
  delete: [URLWhereUniqueInput!]
  deleteMany: [URLScalarWhereInput!]
  disconnect: [URLWhereUniqueInput!]
  set: [URLWhereUniqueInput!]
  update: [URLUpdateWithWhereUniqueWithoutResourceInput!]
  updateMany: [URLUpdateManyWithWhereNestedInput!]
  upsert: [URLUpsertWithWhereUniqueWithoutResourceInput!]
}

input URLUpdateManyWithWhereNestedInput {
  data: URLUpdateManyDataInput!
  where: URLScalarWhereInput!
}

input URLUpdateWithoutResourceDataInput {
  address: String
}

input URLUpdateWithWhereUniqueWithoutResourceInput {
  data: URLUpdateWithoutResourceDataInput!
  where: URLWhereUniqueInput!
}

input URLUpsertWithWhereUniqueWithoutResourceInput {
  create: URLCreateWithoutResourceInput!
  update: URLUpdateWithoutResourceDataInput!
  where: URLWhereUniqueInput!
}

input URLWhereInput {
  address: String
  address_contains: String
  address_ends_with: String
  address_gt: String
  address_gte: String
  address_in: [String!]
  address_lt: String
  address_lte: String
  address_not: String
  address_not_contains: String
  address_not_ends_with: String
  address_not_in: [String!]
  address_not_starts_with: String
  address_starts_with: String
  AND: [URLWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [URLWhereInput!]
  OR: [URLWhereInput!]
  resource: ResourceWhereInput
}

input URLWhereUniqueInput {
  id: ID
}

type User {
  asProjectOwner(after: String, before: String, first: Int, last: Int, orderBy: ProjectOrderByInput, skip: Int, where: ProjectWhereInput): [Project!]
  asProjectParticipant(after: String, before: String, first: Int, last: Int, orderBy: ProjectOrderByInput, skip: Int, where: ProjectWhereInput): [Project!]
  asWorkspaceOwner(after: String, before: String, first: Int, last: Int, orderBy: WorkspaceOrderByInput, skip: Int, where: WorkspaceWhereInput): [Workspace!]
  createdAt: DateTime!
  guideProgress: Int!
  id: ID!
  role: Role!
  tmcId: Int
}

type UserConnection {
  aggregate: AggregateUser!
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

input UserCreateInput {
  asProjectOwner: ProjectCreateManyWithoutOwnerInput
  asProjectParticipant: ProjectCreateManyWithoutParticipantsInput
  asWorkspaceOwner: WorkspaceCreateManyWithoutOwnerInput
  guideProgress: Int
  id: ID
  role: Role!
  tmcId: Int
}

input UserCreateManyWithoutAsProjectParticipantInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutAsProjectParticipantInput!]
}

input UserCreateOneInput {
  connect: UserWhereUniqueInput
  create: UserCreateInput
}

input UserCreateOneWithoutAsProjectOwnerInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutAsProjectOwnerInput
}

input UserCreateOneWithoutAsWorkspaceOwnerInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutAsWorkspaceOwnerInput
}

input UserCreateWithoutAsProjectOwnerInput {
  asProjectParticipant: ProjectCreateManyWithoutParticipantsInput
  asWorkspaceOwner: WorkspaceCreateManyWithoutOwnerInput
  guideProgress: Int
  id: ID
  role: Role!
  tmcId: Int
}

input UserCreateWithoutAsProjectParticipantInput {
  asProjectOwner: ProjectCreateManyWithoutOwnerInput
  asWorkspaceOwner: WorkspaceCreateManyWithoutOwnerInput
  guideProgress: Int
  id: ID
  role: Role!
  tmcId: Int
}

input UserCreateWithoutAsWorkspaceOwnerInput {
  asProjectOwner: ProjectCreateManyWithoutOwnerInput
  asProjectParticipant: ProjectCreateManyWithoutParticipantsInput
  guideProgress: Int
  id: ID
  role: Role!
  tmcId: Int
}

type UserEdge {
  cursor: String!
  node: User!
}

enum UserOrderByInput {
  createdAt_ASC
  createdAt_DESC
  guideProgress_ASC
  guideProgress_DESC
  id_ASC
  id_DESC
  role_ASC
  role_DESC
  tmcId_ASC
  tmcId_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  guideProgress: Int
  guideProgress_gt: Int
  guideProgress_gte: Int
  guideProgress_in: [Int!]
  guideProgress_lt: Int
  guideProgress_lte: Int
  guideProgress_not: Int
  guideProgress_not_in: [Int!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  role: Role
  role_in: [Role!]
  role_not: Role
  role_not_in: [Role!]
  tmcId: Int
  tmcId_gt: Int
  tmcId_gte: Int
  tmcId_in: [Int!]
  tmcId_lt: Int
  tmcId_lte: Int
  tmcId_not: Int
  tmcId_not_in: [Int!]
}

input UserUpdateDataInput {
  asProjectOwner: ProjectUpdateManyWithoutOwnerInput
  asProjectParticipant: ProjectUpdateManyWithoutParticipantsInput
  asWorkspaceOwner: WorkspaceUpdateManyWithoutOwnerInput
  guideProgress: Int
  role: Role
  tmcId: Int
}

input UserUpdateInput {
  asProjectOwner: ProjectUpdateManyWithoutOwnerInput
  asProjectParticipant: ProjectUpdateManyWithoutParticipantsInput
  asWorkspaceOwner: WorkspaceUpdateManyWithoutOwnerInput
  guideProgress: Int
  role: Role
  tmcId: Int
}

input UserUpdateManyDataInput {
  guideProgress: Int
  role: Role
  tmcId: Int
}

input UserUpdateManyMutationInput {
  guideProgress: Int
  role: Role
  tmcId: Int
}

input UserUpdateManyWithoutAsProjectParticipantInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutAsProjectParticipantInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutAsProjectParticipantInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutAsProjectParticipantInput!]
}

input UserUpdateManyWithWhereNestedInput {
  data: UserUpdateManyDataInput!
  where: UserScalarWhereInput!
}

input UserUpdateOneRequiredInput {
  connect: UserWhereUniqueInput
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredWithoutAsProjectOwnerInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutAsProjectOwnerInput
  update: UserUpdateWithoutAsProjectOwnerDataInput
  upsert: UserUpsertWithoutAsProjectOwnerInput
}

input UserUpdateOneWithoutAsWorkspaceOwnerInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutAsWorkspaceOwnerInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutAsWorkspaceOwnerDataInput
  upsert: UserUpsertWithoutAsWorkspaceOwnerInput
}

input UserUpdateWithoutAsProjectOwnerDataInput {
  asProjectParticipant: ProjectUpdateManyWithoutParticipantsInput
  asWorkspaceOwner: WorkspaceUpdateManyWithoutOwnerInput
  guideProgress: Int
  role: Role
  tmcId: Int
}

input UserUpdateWithoutAsProjectParticipantDataInput {
  asProjectOwner: ProjectUpdateManyWithoutOwnerInput
  asWorkspaceOwner: WorkspaceUpdateManyWithoutOwnerInput
  guideProgress: Int
  role: Role
  tmcId: Int
}

input UserUpdateWithoutAsWorkspaceOwnerDataInput {
  asProjectOwner: ProjectUpdateManyWithoutOwnerInput
  asProjectParticipant: ProjectUpdateManyWithoutParticipantsInput
  guideProgress: Int
  role: Role
  tmcId: Int
}

input UserUpdateWithWhereUniqueWithoutAsProjectParticipantInput {
  data: UserUpdateWithoutAsProjectParticipantDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertNestedInput {
  create: UserCreateInput!
  update: UserUpdateDataInput!
}

input UserUpsertWithoutAsProjectOwnerInput {
  create: UserCreateWithoutAsProjectOwnerInput!
  update: UserUpdateWithoutAsProjectOwnerDataInput!
}

input UserUpsertWithoutAsWorkspaceOwnerInput {
  create: UserCreateWithoutAsWorkspaceOwnerInput!
  update: UserUpdateWithoutAsWorkspaceOwnerDataInput!
}

input UserUpsertWithWhereUniqueWithoutAsProjectParticipantInput {
  create: UserCreateWithoutAsProjectParticipantInput!
  update: UserUpdateWithoutAsProjectParticipantDataInput!
  where: UserWhereUniqueInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  asProjectOwner_every: ProjectWhereInput
  asProjectOwner_none: ProjectWhereInput
  asProjectOwner_some: ProjectWhereInput
  asProjectParticipant_every: ProjectWhereInput
  asProjectParticipant_none: ProjectWhereInput
  asProjectParticipant_some: ProjectWhereInput
  asWorkspaceOwner_every: WorkspaceWhereInput
  asWorkspaceOwner_none: WorkspaceWhereInput
  asWorkspaceOwner_some: WorkspaceWhereInput
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  guideProgress: Int
  guideProgress_gt: Int
  guideProgress_gte: Int
  guideProgress_in: [Int!]
  guideProgress_lt: Int
  guideProgress_lte: Int
  guideProgress_not: Int
  guideProgress_not_in: [Int!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  role: Role
  role_in: [Role!]
  role_not: Role
  role_not_in: [Role!]
  tmcId: Int
  tmcId_gt: Int
  tmcId_gte: Int
  tmcId_in: [Int!]
  tmcId_lt: Int
  tmcId_lte: Int
  tmcId_not: Int
  tmcId_not_in: [Int!]
}

input UserWhereUniqueInput {
  id: ID
  tmcId: Int
}

type Workspace {
  conceptLinks(after: String, before: String, first: Int, last: Int, orderBy: ConceptLinkOrderByInput, skip: Int, where: ConceptLinkWhereInput): [ConceptLink!]
  concepts(after: String, before: String, first: Int, last: Int, orderBy: ConceptOrderByInput, skip: Int, where: ConceptWhereInput): [Concept!]
  courseLinks(after: String, before: String, first: Int, last: Int, orderBy: CourseLinkOrderByInput, skip: Int, where: CourseLinkWhereInput): [CourseLink!]
  courses(after: String, before: String, first: Int, last: Int, orderBy: CourseOrderByInput, skip: Int, where: CourseWhereInput): [Course!]
  defaultCourse: Course
  id: ID!
  name: String!
  owner: User
  project: Project
  public: Boolean!
}

type WorkspaceConnection {
  aggregate: AggregateWorkspace!
  edges: [WorkspaceEdge!]!
  pageInfo: PageInfo!
}

input WorkspaceCreateInput {
  conceptLinks: ConceptLinkCreateManyWithoutWorkspaceInput
  concepts: ConceptCreateManyWithoutWorkspaceInput
  courseLinks: CourseLinkCreateManyWithoutWorkspaceInput
  courses: CourseCreateManyWithoutWorkspaceInput
  defaultCourse: CourseCreateOneInput
  id: ID
  name: String!
  owner: UserCreateOneWithoutAsWorkspaceOwnerInput
  project: ProjectCreateOneWithoutWorkspacesInput
  public: Boolean
}

input WorkspaceCreateManyWithoutOwnerInput {
  connect: [WorkspaceWhereUniqueInput!]
  create: [WorkspaceCreateWithoutOwnerInput!]
}

input WorkspaceCreateManyWithoutProjectInput {
  connect: [WorkspaceWhereUniqueInput!]
  create: [WorkspaceCreateWithoutProjectInput!]
}

input WorkspaceCreateOneInput {
  connect: WorkspaceWhereUniqueInput
  create: WorkspaceCreateInput
}

input WorkspaceCreateOneWithoutConceptLinksInput {
  connect: WorkspaceWhereUniqueInput
  create: WorkspaceCreateWithoutConceptLinksInput
}

input WorkspaceCreateOneWithoutConceptsInput {
  connect: WorkspaceWhereUniqueInput
  create: WorkspaceCreateWithoutConceptsInput
}

input WorkspaceCreateOneWithoutCourseLinksInput {
  connect: WorkspaceWhereUniqueInput
  create: WorkspaceCreateWithoutCourseLinksInput
}

input WorkspaceCreateOneWithoutCoursesInput {
  connect: WorkspaceWhereUniqueInput
  create: WorkspaceCreateWithoutCoursesInput
}

input WorkspaceCreateWithoutConceptLinksInput {
  concepts: ConceptCreateManyWithoutWorkspaceInput
  courseLinks: CourseLinkCreateManyWithoutWorkspaceInput
  courses: CourseCreateManyWithoutWorkspaceInput
  defaultCourse: CourseCreateOneInput
  id: ID
  name: String!
  owner: UserCreateOneWithoutAsWorkspaceOwnerInput
  project: ProjectCreateOneWithoutWorkspacesInput
  public: Boolean
}

input WorkspaceCreateWithoutConceptsInput {
  conceptLinks: ConceptLinkCreateManyWithoutWorkspaceInput
  courseLinks: CourseLinkCreateManyWithoutWorkspaceInput
  courses: CourseCreateManyWithoutWorkspaceInput
  defaultCourse: CourseCreateOneInput
  id: ID
  name: String!
  owner: UserCreateOneWithoutAsWorkspaceOwnerInput
  project: ProjectCreateOneWithoutWorkspacesInput
  public: Boolean
}

input WorkspaceCreateWithoutCourseLinksInput {
  conceptLinks: ConceptLinkCreateManyWithoutWorkspaceInput
  concepts: ConceptCreateManyWithoutWorkspaceInput
  courses: CourseCreateManyWithoutWorkspaceInput
  defaultCourse: CourseCreateOneInput
  id: ID
  name: String!
  owner: UserCreateOneWithoutAsWorkspaceOwnerInput
  project: ProjectCreateOneWithoutWorkspacesInput
  public: Boolean
}

input WorkspaceCreateWithoutCoursesInput {
  conceptLinks: ConceptLinkCreateManyWithoutWorkspaceInput
  concepts: ConceptCreateManyWithoutWorkspaceInput
  courseLinks: CourseLinkCreateManyWithoutWorkspaceInput
  defaultCourse: CourseCreateOneInput
  id: ID
  name: String!
  owner: UserCreateOneWithoutAsWorkspaceOwnerInput
  project: ProjectCreateOneWithoutWorkspacesInput
  public: Boolean
}

input WorkspaceCreateWithoutOwnerInput {
  conceptLinks: ConceptLinkCreateManyWithoutWorkspaceInput
  concepts: ConceptCreateManyWithoutWorkspaceInput
  courseLinks: CourseLinkCreateManyWithoutWorkspaceInput
  courses: CourseCreateManyWithoutWorkspaceInput
  defaultCourse: CourseCreateOneInput
  id: ID
  name: String!
  project: ProjectCreateOneWithoutWorkspacesInput
  public: Boolean
}

input WorkspaceCreateWithoutProjectInput {
  conceptLinks: ConceptLinkCreateManyWithoutWorkspaceInput
  concepts: ConceptCreateManyWithoutWorkspaceInput
  courseLinks: CourseLinkCreateManyWithoutWorkspaceInput
  courses: CourseCreateManyWithoutWorkspaceInput
  defaultCourse: CourseCreateOneInput
  id: ID
  name: String!
  owner: UserCreateOneWithoutAsWorkspaceOwnerInput
  public: Boolean
}

type WorkspaceEdge {
  cursor: String!
  node: Workspace!
}

enum WorkspaceOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  public_ASC
  public_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input WorkspaceScalarWhereInput {
  AND: [WorkspaceScalarWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [WorkspaceScalarWhereInput!]
  OR: [WorkspaceScalarWhereInput!]
  public: Boolean
  public_not: Boolean
}

input WorkspaceUpdateDataInput {
  conceptLinks: ConceptLinkUpdateManyWithoutWorkspaceInput
  concepts: ConceptUpdateManyWithoutWorkspaceInput
  courseLinks: CourseLinkUpdateManyWithoutWorkspaceInput
  courses: CourseUpdateManyWithoutWorkspaceInput
  defaultCourse: CourseUpdateOneInput
  name: String
  owner: UserUpdateOneWithoutAsWorkspaceOwnerInput
  project: ProjectUpdateOneWithoutWorkspacesInput
  public: Boolean
}

input WorkspaceUpdateInput {
  conceptLinks: ConceptLinkUpdateManyWithoutWorkspaceInput
  concepts: ConceptUpdateManyWithoutWorkspaceInput
  courseLinks: CourseLinkUpdateManyWithoutWorkspaceInput
  courses: CourseUpdateManyWithoutWorkspaceInput
  defaultCourse: CourseUpdateOneInput
  name: String
  owner: UserUpdateOneWithoutAsWorkspaceOwnerInput
  project: ProjectUpdateOneWithoutWorkspacesInput
  public: Boolean
}

input WorkspaceUpdateManyDataInput {
  name: String
  public: Boolean
}

input WorkspaceUpdateManyMutationInput {
  name: String
  public: Boolean
}

input WorkspaceUpdateManyWithoutOwnerInput {
  connect: [WorkspaceWhereUniqueInput!]
  create: [WorkspaceCreateWithoutOwnerInput!]
  delete: [WorkspaceWhereUniqueInput!]
  deleteMany: [WorkspaceScalarWhereInput!]
  disconnect: [WorkspaceWhereUniqueInput!]
  set: [WorkspaceWhereUniqueInput!]
  update: [WorkspaceUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [WorkspaceUpdateManyWithWhereNestedInput!]
  upsert: [WorkspaceUpsertWithWhereUniqueWithoutOwnerInput!]
}

input WorkspaceUpdateManyWithoutProjectInput {
  connect: [WorkspaceWhereUniqueInput!]
  create: [WorkspaceCreateWithoutProjectInput!]
  delete: [WorkspaceWhereUniqueInput!]
  deleteMany: [WorkspaceScalarWhereInput!]
  disconnect: [WorkspaceWhereUniqueInput!]
  set: [WorkspaceWhereUniqueInput!]
  update: [WorkspaceUpdateWithWhereUniqueWithoutProjectInput!]
  updateMany: [WorkspaceUpdateManyWithWhereNestedInput!]
  upsert: [WorkspaceUpsertWithWhereUniqueWithoutProjectInput!]
}

input WorkspaceUpdateManyWithWhereNestedInput {
  data: WorkspaceUpdateManyDataInput!
  where: WorkspaceScalarWhereInput!
}

input WorkspaceUpdateOneInput {
  connect: WorkspaceWhereUniqueInput
  create: WorkspaceCreateInput
  delete: Boolean
  disconnect: Boolean
  update: WorkspaceUpdateDataInput
  upsert: WorkspaceUpsertNestedInput
}

input WorkspaceUpdateOneRequiredWithoutConceptLinksInput {
  connect: WorkspaceWhereUniqueInput
  create: WorkspaceCreateWithoutConceptLinksInput
  update: WorkspaceUpdateWithoutConceptLinksDataInput
  upsert: WorkspaceUpsertWithoutConceptLinksInput
}

input WorkspaceUpdateOneRequiredWithoutConceptsInput {
  connect: WorkspaceWhereUniqueInput
  create: WorkspaceCreateWithoutConceptsInput
  update: WorkspaceUpdateWithoutConceptsDataInput
  upsert: WorkspaceUpsertWithoutConceptsInput
}

input WorkspaceUpdateOneRequiredWithoutCourseLinksInput {
  connect: WorkspaceWhereUniqueInput
  create: WorkspaceCreateWithoutCourseLinksInput
  update: WorkspaceUpdateWithoutCourseLinksDataInput
  upsert: WorkspaceUpsertWithoutCourseLinksInput
}

input WorkspaceUpdateOneRequiredWithoutCoursesInput {
  connect: WorkspaceWhereUniqueInput
  create: WorkspaceCreateWithoutCoursesInput
  update: WorkspaceUpdateWithoutCoursesDataInput
  upsert: WorkspaceUpsertWithoutCoursesInput
}

input WorkspaceUpdateWithoutConceptLinksDataInput {
  concepts: ConceptUpdateManyWithoutWorkspaceInput
  courseLinks: CourseLinkUpdateManyWithoutWorkspaceInput
  courses: CourseUpdateManyWithoutWorkspaceInput
  defaultCourse: CourseUpdateOneInput
  name: String
  owner: UserUpdateOneWithoutAsWorkspaceOwnerInput
  project: ProjectUpdateOneWithoutWorkspacesInput
  public: Boolean
}

input WorkspaceUpdateWithoutConceptsDataInput {
  conceptLinks: ConceptLinkUpdateManyWithoutWorkspaceInput
  courseLinks: CourseLinkUpdateManyWithoutWorkspaceInput
  courses: CourseUpdateManyWithoutWorkspaceInput
  defaultCourse: CourseUpdateOneInput
  name: String
  owner: UserUpdateOneWithoutAsWorkspaceOwnerInput
  project: ProjectUpdateOneWithoutWorkspacesInput
  public: Boolean
}

input WorkspaceUpdateWithoutCourseLinksDataInput {
  conceptLinks: ConceptLinkUpdateManyWithoutWorkspaceInput
  concepts: ConceptUpdateManyWithoutWorkspaceInput
  courses: CourseUpdateManyWithoutWorkspaceInput
  defaultCourse: CourseUpdateOneInput
  name: String
  owner: UserUpdateOneWithoutAsWorkspaceOwnerInput
  project: ProjectUpdateOneWithoutWorkspacesInput
  public: Boolean
}

input WorkspaceUpdateWithoutCoursesDataInput {
  conceptLinks: ConceptLinkUpdateManyWithoutWorkspaceInput
  concepts: ConceptUpdateManyWithoutWorkspaceInput
  courseLinks: CourseLinkUpdateManyWithoutWorkspaceInput
  defaultCourse: CourseUpdateOneInput
  name: String
  owner: UserUpdateOneWithoutAsWorkspaceOwnerInput
  project: ProjectUpdateOneWithoutWorkspacesInput
  public: Boolean
}

input WorkspaceUpdateWithoutOwnerDataInput {
  conceptLinks: ConceptLinkUpdateManyWithoutWorkspaceInput
  concepts: ConceptUpdateManyWithoutWorkspaceInput
  courseLinks: CourseLinkUpdateManyWithoutWorkspaceInput
  courses: CourseUpdateManyWithoutWorkspaceInput
  defaultCourse: CourseUpdateOneInput
  name: String
  project: ProjectUpdateOneWithoutWorkspacesInput
  public: Boolean
}

input WorkspaceUpdateWithoutProjectDataInput {
  conceptLinks: ConceptLinkUpdateManyWithoutWorkspaceInput
  concepts: ConceptUpdateManyWithoutWorkspaceInput
  courseLinks: CourseLinkUpdateManyWithoutWorkspaceInput
  courses: CourseUpdateManyWithoutWorkspaceInput
  defaultCourse: CourseUpdateOneInput
  name: String
  owner: UserUpdateOneWithoutAsWorkspaceOwnerInput
  public: Boolean
}

input WorkspaceUpdateWithWhereUniqueWithoutOwnerInput {
  data: WorkspaceUpdateWithoutOwnerDataInput!
  where: WorkspaceWhereUniqueInput!
}

input WorkspaceUpdateWithWhereUniqueWithoutProjectInput {
  data: WorkspaceUpdateWithoutProjectDataInput!
  where: WorkspaceWhereUniqueInput!
}

input WorkspaceUpsertNestedInput {
  create: WorkspaceCreateInput!
  update: WorkspaceUpdateDataInput!
}

input WorkspaceUpsertWithoutConceptLinksInput {
  create: WorkspaceCreateWithoutConceptLinksInput!
  update: WorkspaceUpdateWithoutConceptLinksDataInput!
}

input WorkspaceUpsertWithoutConceptsInput {
  create: WorkspaceCreateWithoutConceptsInput!
  update: WorkspaceUpdateWithoutConceptsDataInput!
}

input WorkspaceUpsertWithoutCourseLinksInput {
  create: WorkspaceCreateWithoutCourseLinksInput!
  update: WorkspaceUpdateWithoutCourseLinksDataInput!
}

input WorkspaceUpsertWithoutCoursesInput {
  create: WorkspaceCreateWithoutCoursesInput!
  update: WorkspaceUpdateWithoutCoursesDataInput!
}

input WorkspaceUpsertWithWhereUniqueWithoutOwnerInput {
  create: WorkspaceCreateWithoutOwnerInput!
  update: WorkspaceUpdateWithoutOwnerDataInput!
  where: WorkspaceWhereUniqueInput!
}

input WorkspaceUpsertWithWhereUniqueWithoutProjectInput {
  create: WorkspaceCreateWithoutProjectInput!
  update: WorkspaceUpdateWithoutProjectDataInput!
  where: WorkspaceWhereUniqueInput!
}

input WorkspaceWhereInput {
  AND: [WorkspaceWhereInput!]
  conceptLinks_every: ConceptLinkWhereInput
  conceptLinks_none: ConceptLinkWhereInput
  conceptLinks_some: ConceptLinkWhereInput
  concepts_every: ConceptWhereInput
  concepts_none: ConceptWhereInput
  concepts_some: ConceptWhereInput
  courseLinks_every: CourseLinkWhereInput
  courseLinks_none: CourseLinkWhereInput
  courseLinks_some: CourseLinkWhereInput
  courses_every: CourseWhereInput
  courses_none: CourseWhereInput
  courses_some: CourseWhereInput
  defaultCourse: CourseWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [WorkspaceWhereInput!]
  OR: [WorkspaceWhereInput!]
  owner: UserWhereInput
  project: ProjectWhereInput
  public: Boolean
  public_not: Boolean
}

input WorkspaceWhereUniqueInput {
  id: ID
}
