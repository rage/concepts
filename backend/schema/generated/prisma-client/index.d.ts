// Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  accessToken: (where?: AccessTokenWhereInput) => Promise<boolean>;
  completion: (where?: CompletionWhereInput) => Promise<boolean>;
  concept: (where?: ConceptWhereInput) => Promise<boolean>;
  conceptLink: (where?: ConceptLinkWhereInput) => Promise<boolean>;
  course: (where?: CourseWhereInput) => Promise<boolean>;
  courseLink: (where?: CourseLinkWhereInput) => Promise<boolean>;
  goalLink: (where?: GoalLinkWhereInput) => Promise<boolean>;
  pointGroup: (where?: PointGroupWhereInput) => Promise<boolean>;
  project: (where?: ProjectWhereInput) => Promise<boolean>;
  projectParticipant: (
    where?: ProjectParticipantWhereInput
  ) => Promise<boolean>;
  projectToken: (where?: ProjectTokenWhereInput) => Promise<boolean>;
  tag: (where?: TagWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  workspace: (where?: WorkspaceWhereInput) => Promise<boolean>;
  workspaceParticipant: (
    where?: WorkspaceParticipantWhereInput
  ) => Promise<boolean>;
  workspaceToken: (where?: WorkspaceTokenWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  accessToken: (
    where: AccessTokenWhereUniqueInput
  ) => AccessTokenNullablePromise;
  accessTokens: (args?: {
    where?: AccessTokenWhereInput;
    orderBy?: AccessTokenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<AccessToken>;
  accessTokensConnection: (args?: {
    where?: AccessTokenWhereInput;
    orderBy?: AccessTokenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AccessTokenConnectionPromise;
  completion: (where: CompletionWhereUniqueInput) => CompletionNullablePromise;
  completions: (args?: {
    where?: CompletionWhereInput;
    orderBy?: CompletionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Completion>;
  completionsConnection: (args?: {
    where?: CompletionWhereInput;
    orderBy?: CompletionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CompletionConnectionPromise;
  concept: (where: ConceptWhereUniqueInput) => ConceptNullablePromise;
  concepts: (args?: {
    where?: ConceptWhereInput;
    orderBy?: ConceptOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Concept>;
  conceptsConnection: (args?: {
    where?: ConceptWhereInput;
    orderBy?: ConceptOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ConceptConnectionPromise;
  conceptLink: (
    where: ConceptLinkWhereUniqueInput
  ) => ConceptLinkNullablePromise;
  conceptLinks: (args?: {
    where?: ConceptLinkWhereInput;
    orderBy?: ConceptLinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ConceptLink>;
  conceptLinksConnection: (args?: {
    where?: ConceptLinkWhereInput;
    orderBy?: ConceptLinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ConceptLinkConnectionPromise;
  course: (where: CourseWhereUniqueInput) => CourseNullablePromise;
  courses: (args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Course>;
  coursesConnection: (args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CourseConnectionPromise;
  courseLink: (where: CourseLinkWhereUniqueInput) => CourseLinkNullablePromise;
  courseLinks: (args?: {
    where?: CourseLinkWhereInput;
    orderBy?: CourseLinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<CourseLink>;
  courseLinksConnection: (args?: {
    where?: CourseLinkWhereInput;
    orderBy?: CourseLinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CourseLinkConnectionPromise;
  goalLink: (where: GoalLinkWhereUniqueInput) => GoalLinkNullablePromise;
  goalLinks: (args?: {
    where?: GoalLinkWhereInput;
    orderBy?: GoalLinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<GoalLink>;
  goalLinksConnection: (args?: {
    where?: GoalLinkWhereInput;
    orderBy?: GoalLinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GoalLinkConnectionPromise;
  pointGroup: (where: PointGroupWhereUniqueInput) => PointGroupNullablePromise;
  pointGroups: (args?: {
    where?: PointGroupWhereInput;
    orderBy?: PointGroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PointGroup>;
  pointGroupsConnection: (args?: {
    where?: PointGroupWhereInput;
    orderBy?: PointGroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PointGroupConnectionPromise;
  project: (where: ProjectWhereUniqueInput) => ProjectNullablePromise;
  projects: (args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Project>;
  projectsConnection: (args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProjectConnectionPromise;
  projectParticipant: (
    where: ProjectParticipantWhereUniqueInput
  ) => ProjectParticipantNullablePromise;
  projectParticipants: (args?: {
    where?: ProjectParticipantWhereInput;
    orderBy?: ProjectParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ProjectParticipant>;
  projectParticipantsConnection: (args?: {
    where?: ProjectParticipantWhereInput;
    orderBy?: ProjectParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProjectParticipantConnectionPromise;
  projectToken: (
    where: ProjectTokenWhereUniqueInput
  ) => ProjectTokenNullablePromise;
  projectTokens: (args?: {
    where?: ProjectTokenWhereInput;
    orderBy?: ProjectTokenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ProjectToken>;
  projectTokensConnection: (args?: {
    where?: ProjectTokenWhereInput;
    orderBy?: ProjectTokenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProjectTokenConnectionPromise;
  tag: (where: TagWhereUniqueInput) => TagNullablePromise;
  tags: (args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Tag>;
  tagsConnection: (args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TagConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  workspace: (where: WorkspaceWhereUniqueInput) => WorkspaceNullablePromise;
  workspaces: (args?: {
    where?: WorkspaceWhereInput;
    orderBy?: WorkspaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Workspace>;
  workspacesConnection: (args?: {
    where?: WorkspaceWhereInput;
    orderBy?: WorkspaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => WorkspaceConnectionPromise;
  workspaceParticipant: (
    where: WorkspaceParticipantWhereUniqueInput
  ) => WorkspaceParticipantNullablePromise;
  workspaceParticipants: (args?: {
    where?: WorkspaceParticipantWhereInput;
    orderBy?: WorkspaceParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<WorkspaceParticipant>;
  workspaceParticipantsConnection: (args?: {
    where?: WorkspaceParticipantWhereInput;
    orderBy?: WorkspaceParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => WorkspaceParticipantConnectionPromise;
  workspaceToken: (
    where: WorkspaceTokenWhereUniqueInput
  ) => WorkspaceTokenNullablePromise;
  workspaceTokens: (args?: {
    where?: WorkspaceTokenWhereInput;
    orderBy?: WorkspaceTokenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<WorkspaceToken>;
  workspaceTokensConnection: (args?: {
    where?: WorkspaceTokenWhereInput;
    orderBy?: WorkspaceTokenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => WorkspaceTokenConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAccessToken: (data: AccessTokenCreateInput) => AccessTokenPromise;
  updateAccessToken: (args: {
    data: AccessTokenUpdateInput;
    where: AccessTokenWhereUniqueInput;
  }) => AccessTokenPromise;
  updateManyAccessTokens: (args: {
    data: AccessTokenUpdateManyMutationInput;
    where?: AccessTokenWhereInput;
  }) => BatchPayloadPromise;
  upsertAccessToken: (args: {
    where: AccessTokenWhereUniqueInput;
    create: AccessTokenCreateInput;
    update: AccessTokenUpdateInput;
  }) => AccessTokenPromise;
  deleteAccessToken: (where: AccessTokenWhereUniqueInput) => AccessTokenPromise;
  deleteManyAccessTokens: (
    where?: AccessTokenWhereInput
  ) => BatchPayloadPromise;
  createCompletion: (data: CompletionCreateInput) => CompletionPromise;
  updateCompletion: (args: {
    data: CompletionUpdateInput;
    where: CompletionWhereUniqueInput;
  }) => CompletionPromise;
  updateManyCompletions: (args: {
    data: CompletionUpdateManyMutationInput;
    where?: CompletionWhereInput;
  }) => BatchPayloadPromise;
  upsertCompletion: (args: {
    where: CompletionWhereUniqueInput;
    create: CompletionCreateInput;
    update: CompletionUpdateInput;
  }) => CompletionPromise;
  deleteCompletion: (where: CompletionWhereUniqueInput) => CompletionPromise;
  deleteManyCompletions: (where?: CompletionWhereInput) => BatchPayloadPromise;
  createConcept: (data: ConceptCreateInput) => ConceptPromise;
  updateConcept: (args: {
    data: ConceptUpdateInput;
    where: ConceptWhereUniqueInput;
  }) => ConceptPromise;
  updateManyConcepts: (args: {
    data: ConceptUpdateManyMutationInput;
    where?: ConceptWhereInput;
  }) => BatchPayloadPromise;
  upsertConcept: (args: {
    where: ConceptWhereUniqueInput;
    create: ConceptCreateInput;
    update: ConceptUpdateInput;
  }) => ConceptPromise;
  deleteConcept: (where: ConceptWhereUniqueInput) => ConceptPromise;
  deleteManyConcepts: (where?: ConceptWhereInput) => BatchPayloadPromise;
  createConceptLink: (data: ConceptLinkCreateInput) => ConceptLinkPromise;
  updateConceptLink: (args: {
    data: ConceptLinkUpdateInput;
    where: ConceptLinkWhereUniqueInput;
  }) => ConceptLinkPromise;
  updateManyConceptLinks: (args: {
    data: ConceptLinkUpdateManyMutationInput;
    where?: ConceptLinkWhereInput;
  }) => BatchPayloadPromise;
  upsertConceptLink: (args: {
    where: ConceptLinkWhereUniqueInput;
    create: ConceptLinkCreateInput;
    update: ConceptLinkUpdateInput;
  }) => ConceptLinkPromise;
  deleteConceptLink: (where: ConceptLinkWhereUniqueInput) => ConceptLinkPromise;
  deleteManyConceptLinks: (
    where?: ConceptLinkWhereInput
  ) => BatchPayloadPromise;
  createCourse: (data: CourseCreateInput) => CoursePromise;
  updateCourse: (args: {
    data: CourseUpdateInput;
    where: CourseWhereUniqueInput;
  }) => CoursePromise;
  updateManyCourses: (args: {
    data: CourseUpdateManyMutationInput;
    where?: CourseWhereInput;
  }) => BatchPayloadPromise;
  upsertCourse: (args: {
    where: CourseWhereUniqueInput;
    create: CourseCreateInput;
    update: CourseUpdateInput;
  }) => CoursePromise;
  deleteCourse: (where: CourseWhereUniqueInput) => CoursePromise;
  deleteManyCourses: (where?: CourseWhereInput) => BatchPayloadPromise;
  createCourseLink: (data: CourseLinkCreateInput) => CourseLinkPromise;
  updateCourseLink: (args: {
    data: CourseLinkUpdateInput;
    where: CourseLinkWhereUniqueInput;
  }) => CourseLinkPromise;
  updateManyCourseLinks: (args: {
    data: CourseLinkUpdateManyMutationInput;
    where?: CourseLinkWhereInput;
  }) => BatchPayloadPromise;
  upsertCourseLink: (args: {
    where: CourseLinkWhereUniqueInput;
    create: CourseLinkCreateInput;
    update: CourseLinkUpdateInput;
  }) => CourseLinkPromise;
  deleteCourseLink: (where: CourseLinkWhereUniqueInput) => CourseLinkPromise;
  deleteManyCourseLinks: (where?: CourseLinkWhereInput) => BatchPayloadPromise;
  createGoalLink: (data: GoalLinkCreateInput) => GoalLinkPromise;
  updateGoalLink: (args: {
    data: GoalLinkUpdateInput;
    where: GoalLinkWhereUniqueInput;
  }) => GoalLinkPromise;
  updateManyGoalLinks: (args: {
    data: GoalLinkUpdateManyMutationInput;
    where?: GoalLinkWhereInput;
  }) => BatchPayloadPromise;
  upsertGoalLink: (args: {
    where: GoalLinkWhereUniqueInput;
    create: GoalLinkCreateInput;
    update: GoalLinkUpdateInput;
  }) => GoalLinkPromise;
  deleteGoalLink: (where: GoalLinkWhereUniqueInput) => GoalLinkPromise;
  deleteManyGoalLinks: (where?: GoalLinkWhereInput) => BatchPayloadPromise;
  createPointGroup: (data: PointGroupCreateInput) => PointGroupPromise;
  updatePointGroup: (args: {
    data: PointGroupUpdateInput;
    where: PointGroupWhereUniqueInput;
  }) => PointGroupPromise;
  updateManyPointGroups: (args: {
    data: PointGroupUpdateManyMutationInput;
    where?: PointGroupWhereInput;
  }) => BatchPayloadPromise;
  upsertPointGroup: (args: {
    where: PointGroupWhereUniqueInput;
    create: PointGroupCreateInput;
    update: PointGroupUpdateInput;
  }) => PointGroupPromise;
  deletePointGroup: (where: PointGroupWhereUniqueInput) => PointGroupPromise;
  deleteManyPointGroups: (where?: PointGroupWhereInput) => BatchPayloadPromise;
  createProject: (data: ProjectCreateInput) => ProjectPromise;
  updateProject: (args: {
    data: ProjectUpdateInput;
    where: ProjectWhereUniqueInput;
  }) => ProjectPromise;
  updateManyProjects: (args: {
    data: ProjectUpdateManyMutationInput;
    where?: ProjectWhereInput;
  }) => BatchPayloadPromise;
  upsertProject: (args: {
    where: ProjectWhereUniqueInput;
    create: ProjectCreateInput;
    update: ProjectUpdateInput;
  }) => ProjectPromise;
  deleteProject: (where: ProjectWhereUniqueInput) => ProjectPromise;
  deleteManyProjects: (where?: ProjectWhereInput) => BatchPayloadPromise;
  createProjectParticipant: (
    data: ProjectParticipantCreateInput
  ) => ProjectParticipantPromise;
  updateProjectParticipant: (args: {
    data: ProjectParticipantUpdateInput;
    where: ProjectParticipantWhereUniqueInput;
  }) => ProjectParticipantPromise;
  updateManyProjectParticipants: (args: {
    data: ProjectParticipantUpdateManyMutationInput;
    where?: ProjectParticipantWhereInput;
  }) => BatchPayloadPromise;
  upsertProjectParticipant: (args: {
    where: ProjectParticipantWhereUniqueInput;
    create: ProjectParticipantCreateInput;
    update: ProjectParticipantUpdateInput;
  }) => ProjectParticipantPromise;
  deleteProjectParticipant: (
    where: ProjectParticipantWhereUniqueInput
  ) => ProjectParticipantPromise;
  deleteManyProjectParticipants: (
    where?: ProjectParticipantWhereInput
  ) => BatchPayloadPromise;
  createProjectToken: (data: ProjectTokenCreateInput) => ProjectTokenPromise;
  updateProjectToken: (args: {
    data: ProjectTokenUpdateInput;
    where: ProjectTokenWhereUniqueInput;
  }) => ProjectTokenPromise;
  updateManyProjectTokens: (args: {
    data: ProjectTokenUpdateManyMutationInput;
    where?: ProjectTokenWhereInput;
  }) => BatchPayloadPromise;
  upsertProjectToken: (args: {
    where: ProjectTokenWhereUniqueInput;
    create: ProjectTokenCreateInput;
    update: ProjectTokenUpdateInput;
  }) => ProjectTokenPromise;
  deleteProjectToken: (
    where: ProjectTokenWhereUniqueInput
  ) => ProjectTokenPromise;
  deleteManyProjectTokens: (
    where?: ProjectTokenWhereInput
  ) => BatchPayloadPromise;
  createTag: (data: TagCreateInput) => TagPromise;
  updateTag: (args: {
    data: TagUpdateInput;
    where: TagWhereUniqueInput;
  }) => TagPromise;
  updateManyTags: (args: {
    data: TagUpdateManyMutationInput;
    where?: TagWhereInput;
  }) => BatchPayloadPromise;
  upsertTag: (args: {
    where: TagWhereUniqueInput;
    create: TagCreateInput;
    update: TagUpdateInput;
  }) => TagPromise;
  deleteTag: (where: TagWhereUniqueInput) => TagPromise;
  deleteManyTags: (where?: TagWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createWorkspace: (data: WorkspaceCreateInput) => WorkspacePromise;
  updateWorkspace: (args: {
    data: WorkspaceUpdateInput;
    where: WorkspaceWhereUniqueInput;
  }) => WorkspacePromise;
  updateManyWorkspaces: (args: {
    data: WorkspaceUpdateManyMutationInput;
    where?: WorkspaceWhereInput;
  }) => BatchPayloadPromise;
  upsertWorkspace: (args: {
    where: WorkspaceWhereUniqueInput;
    create: WorkspaceCreateInput;
    update: WorkspaceUpdateInput;
  }) => WorkspacePromise;
  deleteWorkspace: (where: WorkspaceWhereUniqueInput) => WorkspacePromise;
  deleteManyWorkspaces: (where?: WorkspaceWhereInput) => BatchPayloadPromise;
  createWorkspaceParticipant: (
    data: WorkspaceParticipantCreateInput
  ) => WorkspaceParticipantPromise;
  updateWorkspaceParticipant: (args: {
    data: WorkspaceParticipantUpdateInput;
    where: WorkspaceParticipantWhereUniqueInput;
  }) => WorkspaceParticipantPromise;
  updateManyWorkspaceParticipants: (args: {
    data: WorkspaceParticipantUpdateManyMutationInput;
    where?: WorkspaceParticipantWhereInput;
  }) => BatchPayloadPromise;
  upsertWorkspaceParticipant: (args: {
    where: WorkspaceParticipantWhereUniqueInput;
    create: WorkspaceParticipantCreateInput;
    update: WorkspaceParticipantUpdateInput;
  }) => WorkspaceParticipantPromise;
  deleteWorkspaceParticipant: (
    where: WorkspaceParticipantWhereUniqueInput
  ) => WorkspaceParticipantPromise;
  deleteManyWorkspaceParticipants: (
    where?: WorkspaceParticipantWhereInput
  ) => BatchPayloadPromise;
  createWorkspaceToken: (
    data: WorkspaceTokenCreateInput
  ) => WorkspaceTokenPromise;
  updateWorkspaceToken: (args: {
    data: WorkspaceTokenUpdateInput;
    where: WorkspaceTokenWhereUniqueInput;
  }) => WorkspaceTokenPromise;
  updateManyWorkspaceTokens: (args: {
    data: WorkspaceTokenUpdateManyMutationInput;
    where?: WorkspaceTokenWhereInput;
  }) => BatchPayloadPromise;
  upsertWorkspaceToken: (args: {
    where: WorkspaceTokenWhereUniqueInput;
    create: WorkspaceTokenCreateInput;
    update: WorkspaceTokenUpdateInput;
  }) => WorkspaceTokenPromise;
  deleteWorkspaceToken: (
    where: WorkspaceTokenWhereUniqueInput
  ) => WorkspaceTokenPromise;
  deleteManyWorkspaceTokens: (
    where?: WorkspaceTokenWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  accessToken: (
    where?: AccessTokenSubscriptionWhereInput
  ) => AccessTokenSubscriptionPayloadSubscription;
  completion: (
    where?: CompletionSubscriptionWhereInput
  ) => CompletionSubscriptionPayloadSubscription;
  concept: (
    where?: ConceptSubscriptionWhereInput
  ) => ConceptSubscriptionPayloadSubscription;
  conceptLink: (
    where?: ConceptLinkSubscriptionWhereInput
  ) => ConceptLinkSubscriptionPayloadSubscription;
  course: (
    where?: CourseSubscriptionWhereInput
  ) => CourseSubscriptionPayloadSubscription;
  courseLink: (
    where?: CourseLinkSubscriptionWhereInput
  ) => CourseLinkSubscriptionPayloadSubscription;
  goalLink: (
    where?: GoalLinkSubscriptionWhereInput
  ) => GoalLinkSubscriptionPayloadSubscription;
  pointGroup: (
    where?: PointGroupSubscriptionWhereInput
  ) => PointGroupSubscriptionPayloadSubscription;
  project: (
    where?: ProjectSubscriptionWhereInput
  ) => ProjectSubscriptionPayloadSubscription;
  projectParticipant: (
    where?: ProjectParticipantSubscriptionWhereInput
  ) => ProjectParticipantSubscriptionPayloadSubscription;
  projectToken: (
    where?: ProjectTokenSubscriptionWhereInput
  ) => ProjectTokenSubscriptionPayloadSubscription;
  tag: (
    where?: TagSubscriptionWhereInput
  ) => TagSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  workspace: (
    where?: WorkspaceSubscriptionWhereInput
  ) => WorkspaceSubscriptionPayloadSubscription;
  workspaceParticipant: (
    where?: WorkspaceParticipantSubscriptionWhereInput
  ) => WorkspaceParticipantSubscriptionPayloadSubscription;
  workspaceToken: (
    where?: WorkspaceTokenSubscriptionWhereInput
  ) => WorkspaceTokenSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Role = "GUEST" | "STUDENT" | "STAFF" | "ADMIN";

export type Privilege = "CLONE" | "VIEW" | "EDIT" | "OWNER";

export type ConceptLevel = "OBJECTIVE" | "CONCEPT" | "GOAL" | "COMMON";

export type PrerequisiteLevel = "USEFUL" | "OBLIGATORY";

export type AccessTokenOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "token_ASC"
  | "token_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "lastSeenTime_ASC"
  | "lastSeenTime_DESC"
  | "lastSeenAgent_ASC"
  | "lastSeenAgent_DESC"
  | "lastSeenAddress_ASC"
  | "lastSeenAddress_DESC";

export type WorkspaceParticipantOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "privilege_ASC"
  | "privilege_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type WorkspaceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProjectParticipantOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "privilege_ASC"
  | "privilege_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProjectTokenOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "privilege_ASC"
  | "privilege_DESC"
  | "revoked_ASC"
  | "revoked_DESC";

export type CourseOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "official_ASC"
  | "official_DESC"
  | "frozen_ASC"
  | "frozen_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TagOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "type_ASC"
  | "type_DESC"
  | "priority_ASC"
  | "priority_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CourseLinkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "official_ASC"
  | "official_DESC"
  | "frozen_ASC"
  | "frozen_DESC"
  | "weight_ASC"
  | "weight_DESC"
  | "count_ASC"
  | "count_DESC"
  | "text_ASC"
  | "text_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ConceptOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "level_ASC"
  | "level_DESC"
  | "position_ASC"
  | "position_DESC"
  | "official_ASC"
  | "official_DESC"
  | "frozen_ASC"
  | "frozen_DESC"
  | "count_ASC"
  | "count_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ConceptLinkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "official_ASC"
  | "official_DESC"
  | "frozen_ASC"
  | "frozen_DESC"
  | "weight_ASC"
  | "weight_DESC"
  | "count_ASC"
  | "count_DESC"
  | "text_ASC"
  | "text_DESC"
  | "level_ASC"
  | "level_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type GoalLinkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type WorkspaceTokenOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "privilege_ASC"
  | "privilege_DESC"
  | "revoked_ASC"
  | "revoked_DESC";

export type PointGroupOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "startDate_ASC"
  | "startDate_DESC"
  | "endDate_ASC"
  | "endDate_DESC"
  | "maxPoints_ASC"
  | "maxPoints_DESC"
  | "pointsPerConcept_ASC"
  | "pointsPerConcept_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CompletionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "conceptAmount_ASC"
  | "conceptAmount_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProjectOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "tmcId_ASC"
  | "tmcId_DESC"
  | "hakaId_ASC"
  | "hakaId_DESC"
  | "googleId_ASC"
  | "googleId_DESC"
  | "role_ASC"
  | "role_DESC"
  | "deactivated_ASC"
  | "deactivated_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AccessTokenWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  token?: Maybe<String>;
}>;

export interface AccessTokenWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  token?: Maybe<String>;
  token_not?: Maybe<String>;
  token_in?: Maybe<String[] | String>;
  token_not_in?: Maybe<String[] | String>;
  token_lt?: Maybe<String>;
  token_lte?: Maybe<String>;
  token_gt?: Maybe<String>;
  token_gte?: Maybe<String>;
  token_contains?: Maybe<String>;
  token_not_contains?: Maybe<String>;
  token_starts_with?: Maybe<String>;
  token_not_starts_with?: Maybe<String>;
  token_ends_with?: Maybe<String>;
  token_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  lastSeenTime?: Maybe<DateTimeInput>;
  lastSeenTime_not?: Maybe<DateTimeInput>;
  lastSeenTime_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastSeenTime_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastSeenTime_lt?: Maybe<DateTimeInput>;
  lastSeenTime_lte?: Maybe<DateTimeInput>;
  lastSeenTime_gt?: Maybe<DateTimeInput>;
  lastSeenTime_gte?: Maybe<DateTimeInput>;
  lastSeenAgent?: Maybe<String>;
  lastSeenAgent_not?: Maybe<String>;
  lastSeenAgent_in?: Maybe<String[] | String>;
  lastSeenAgent_not_in?: Maybe<String[] | String>;
  lastSeenAgent_lt?: Maybe<String>;
  lastSeenAgent_lte?: Maybe<String>;
  lastSeenAgent_gt?: Maybe<String>;
  lastSeenAgent_gte?: Maybe<String>;
  lastSeenAgent_contains?: Maybe<String>;
  lastSeenAgent_not_contains?: Maybe<String>;
  lastSeenAgent_starts_with?: Maybe<String>;
  lastSeenAgent_not_starts_with?: Maybe<String>;
  lastSeenAgent_ends_with?: Maybe<String>;
  lastSeenAgent_not_ends_with?: Maybe<String>;
  lastSeenAddress?: Maybe<String>;
  lastSeenAddress_not?: Maybe<String>;
  lastSeenAddress_in?: Maybe<String[] | String>;
  lastSeenAddress_not_in?: Maybe<String[] | String>;
  lastSeenAddress_lt?: Maybe<String>;
  lastSeenAddress_lte?: Maybe<String>;
  lastSeenAddress_gt?: Maybe<String>;
  lastSeenAddress_gte?: Maybe<String>;
  lastSeenAddress_contains?: Maybe<String>;
  lastSeenAddress_not_contains?: Maybe<String>;
  lastSeenAddress_starts_with?: Maybe<String>;
  lastSeenAddress_not_starts_with?: Maybe<String>;
  lastSeenAddress_ends_with?: Maybe<String>;
  lastSeenAddress_not_ends_with?: Maybe<String>;
  AND?: Maybe<AccessTokenWhereInput[] | AccessTokenWhereInput>;
  OR?: Maybe<AccessTokenWhereInput[] | AccessTokenWhereInput>;
  NOT?: Maybe<AccessTokenWhereInput[] | AccessTokenWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  tmcId?: Maybe<Int>;
  tmcId_not?: Maybe<Int>;
  tmcId_in?: Maybe<Int[] | Int>;
  tmcId_not_in?: Maybe<Int[] | Int>;
  tmcId_lt?: Maybe<Int>;
  tmcId_lte?: Maybe<Int>;
  tmcId_gt?: Maybe<Int>;
  tmcId_gte?: Maybe<Int>;
  hakaId?: Maybe<String>;
  hakaId_not?: Maybe<String>;
  hakaId_in?: Maybe<String[] | String>;
  hakaId_not_in?: Maybe<String[] | String>;
  hakaId_lt?: Maybe<String>;
  hakaId_lte?: Maybe<String>;
  hakaId_gt?: Maybe<String>;
  hakaId_gte?: Maybe<String>;
  hakaId_contains?: Maybe<String>;
  hakaId_not_contains?: Maybe<String>;
  hakaId_starts_with?: Maybe<String>;
  hakaId_not_starts_with?: Maybe<String>;
  hakaId_ends_with?: Maybe<String>;
  hakaId_not_ends_with?: Maybe<String>;
  googleId?: Maybe<String>;
  googleId_not?: Maybe<String>;
  googleId_in?: Maybe<String[] | String>;
  googleId_not_in?: Maybe<String[] | String>;
  googleId_lt?: Maybe<String>;
  googleId_lte?: Maybe<String>;
  googleId_gt?: Maybe<String>;
  googleId_gte?: Maybe<String>;
  googleId_contains?: Maybe<String>;
  googleId_not_contains?: Maybe<String>;
  googleId_starts_with?: Maybe<String>;
  googleId_not_starts_with?: Maybe<String>;
  googleId_ends_with?: Maybe<String>;
  googleId_not_ends_with?: Maybe<String>;
  role?: Maybe<Role>;
  role_not?: Maybe<Role>;
  role_in?: Maybe<Role[] | Role>;
  role_not_in?: Maybe<Role[] | Role>;
  deactivated?: Maybe<Boolean>;
  deactivated_not?: Maybe<Boolean>;
  tokens_every?: Maybe<AccessTokenWhereInput>;
  tokens_some?: Maybe<AccessTokenWhereInput>;
  tokens_none?: Maybe<AccessTokenWhereInput>;
  workspaceParticipations_every?: Maybe<WorkspaceParticipantWhereInput>;
  workspaceParticipations_some?: Maybe<WorkspaceParticipantWhereInput>;
  workspaceParticipations_none?: Maybe<WorkspaceParticipantWhereInput>;
  projectParticipations_every?: Maybe<ProjectParticipantWhereInput>;
  projectParticipations_some?: Maybe<ProjectParticipantWhereInput>;
  projectParticipations_none?: Maybe<ProjectParticipantWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface WorkspaceParticipantWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  privilege?: Maybe<Privilege>;
  privilege_not?: Maybe<Privilege>;
  privilege_in?: Maybe<Privilege[] | Privilege>;
  privilege_not_in?: Maybe<Privilege[] | Privilege>;
  workspace?: Maybe<WorkspaceWhereInput>;
  token?: Maybe<WorkspaceTokenWhereInput>;
  user?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    WorkspaceParticipantWhereInput[] | WorkspaceParticipantWhereInput
  >;
  OR?: Maybe<WorkspaceParticipantWhereInput[] | WorkspaceParticipantWhereInput>;
  NOT?: Maybe<
    WorkspaceParticipantWhereInput[] | WorkspaceParticipantWhereInput
  >;
}

export interface WorkspaceWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  sourceProject?: Maybe<ProjectWhereInput>;
  sourceTemplate?: Maybe<WorkspaceWhereInput>;
  asMerge?: Maybe<ProjectWhereInput>;
  asTemplate?: Maybe<ProjectWhereInput>;
  clones_every?: Maybe<WorkspaceWhereInput>;
  clones_some?: Maybe<WorkspaceWhereInput>;
  clones_none?: Maybe<WorkspaceWhereInput>;
  courses_every?: Maybe<CourseWhereInput>;
  courses_some?: Maybe<CourseWhereInput>;
  courses_none?: Maybe<CourseWhereInput>;
  concepts_every?: Maybe<ConceptWhereInput>;
  concepts_some?: Maybe<ConceptWhereInput>;
  concepts_none?: Maybe<ConceptWhereInput>;
  commonConcepts_every?: Maybe<ConceptWhereInput>;
  commonConcepts_some?: Maybe<ConceptWhereInput>;
  commonConcepts_none?: Maybe<ConceptWhereInput>;
  conceptLinks_every?: Maybe<ConceptLinkWhereInput>;
  conceptLinks_some?: Maybe<ConceptLinkWhereInput>;
  conceptLinks_none?: Maybe<ConceptLinkWhereInput>;
  courseLinks_every?: Maybe<CourseLinkWhereInput>;
  courseLinks_some?: Maybe<CourseLinkWhereInput>;
  courseLinks_none?: Maybe<CourseLinkWhereInput>;
  goals_every?: Maybe<ConceptWhereInput>;
  goals_some?: Maybe<ConceptWhereInput>;
  goals_none?: Maybe<ConceptWhereInput>;
  goalLinks_every?: Maybe<GoalLinkWhereInput>;
  goalLinks_some?: Maybe<GoalLinkWhereInput>;
  goalLinks_none?: Maybe<GoalLinkWhereInput>;
  participants_every?: Maybe<WorkspaceParticipantWhereInput>;
  participants_some?: Maybe<WorkspaceParticipantWhereInput>;
  participants_none?: Maybe<WorkspaceParticipantWhereInput>;
  tokens_every?: Maybe<WorkspaceTokenWhereInput>;
  tokens_some?: Maybe<WorkspaceTokenWhereInput>;
  tokens_none?: Maybe<WorkspaceTokenWhereInput>;
  mainCourse?: Maybe<CourseWhereInput>;
  pointGroups_every?: Maybe<PointGroupWhereInput>;
  pointGroups_some?: Maybe<PointGroupWhereInput>;
  pointGroups_none?: Maybe<PointGroupWhereInput>;
  courseTags_every?: Maybe<TagWhereInput>;
  courseTags_some?: Maybe<TagWhereInput>;
  courseTags_none?: Maybe<TagWhereInput>;
  conceptTags_every?: Maybe<TagWhereInput>;
  conceptTags_some?: Maybe<TagWhereInput>;
  conceptTags_none?: Maybe<TagWhereInput>;
  goalTags_every?: Maybe<TagWhereInput>;
  goalTags_some?: Maybe<TagWhereInput>;
  goalTags_none?: Maybe<TagWhereInput>;
  createdBy?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<WorkspaceWhereInput[] | WorkspaceWhereInput>;
  OR?: Maybe<WorkspaceWhereInput[] | WorkspaceWhereInput>;
  NOT?: Maybe<WorkspaceWhereInput[] | WorkspaceWhereInput>;
}

export interface ProjectWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  workspaces_every?: Maybe<WorkspaceWhereInput>;
  workspaces_some?: Maybe<WorkspaceWhereInput>;
  workspaces_none?: Maybe<WorkspaceWhereInput>;
  activeTemplate?: Maybe<WorkspaceWhereInput>;
  templates_every?: Maybe<WorkspaceWhereInput>;
  templates_some?: Maybe<WorkspaceWhereInput>;
  templates_none?: Maybe<WorkspaceWhereInput>;
  merges_every?: Maybe<WorkspaceWhereInput>;
  merges_some?: Maybe<WorkspaceWhereInput>;
  merges_none?: Maybe<WorkspaceWhereInput>;
  participants_every?: Maybe<ProjectParticipantWhereInput>;
  participants_some?: Maybe<ProjectParticipantWhereInput>;
  participants_none?: Maybe<ProjectParticipantWhereInput>;
  tokens_every?: Maybe<ProjectTokenWhereInput>;
  tokens_some?: Maybe<ProjectTokenWhereInput>;
  tokens_none?: Maybe<ProjectTokenWhereInput>;
  createdBy?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ProjectWhereInput[] | ProjectWhereInput>;
  OR?: Maybe<ProjectWhereInput[] | ProjectWhereInput>;
  NOT?: Maybe<ProjectWhereInput[] | ProjectWhereInput>;
}

export interface ProjectParticipantWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  privilege?: Maybe<Privilege>;
  privilege_not?: Maybe<Privilege>;
  privilege_in?: Maybe<Privilege[] | Privilege>;
  privilege_not_in?: Maybe<Privilege[] | Privilege>;
  project?: Maybe<ProjectWhereInput>;
  token?: Maybe<ProjectTokenWhereInput>;
  user?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ProjectParticipantWhereInput[] | ProjectParticipantWhereInput>;
  OR?: Maybe<ProjectParticipantWhereInput[] | ProjectParticipantWhereInput>;
  NOT?: Maybe<ProjectParticipantWhereInput[] | ProjectParticipantWhereInput>;
}

export interface ProjectTokenWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  privilege?: Maybe<Privilege>;
  privilege_not?: Maybe<Privilege>;
  privilege_in?: Maybe<Privilege[] | Privilege>;
  privilege_not_in?: Maybe<Privilege[] | Privilege>;
  revoked?: Maybe<Boolean>;
  revoked_not?: Maybe<Boolean>;
  project?: Maybe<ProjectWhereInput>;
  participants_every?: Maybe<ProjectParticipantWhereInput>;
  participants_some?: Maybe<ProjectParticipantWhereInput>;
  participants_none?: Maybe<ProjectParticipantWhereInput>;
  AND?: Maybe<ProjectTokenWhereInput[] | ProjectTokenWhereInput>;
  OR?: Maybe<ProjectTokenWhereInput[] | ProjectTokenWhereInput>;
  NOT?: Maybe<ProjectTokenWhereInput[] | ProjectTokenWhereInput>;
}

export interface CourseWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  official?: Maybe<Boolean>;
  official_not?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  frozen_not?: Maybe<Boolean>;
  tags_every?: Maybe<TagWhereInput>;
  tags_some?: Maybe<TagWhereInput>;
  tags_none?: Maybe<TagWhereInput>;
  sourceCourse?: Maybe<CourseWhereInput>;
  clones_every?: Maybe<CourseWhereInput>;
  clones_some?: Maybe<CourseWhereInput>;
  clones_none?: Maybe<CourseWhereInput>;
  linksFromCourse_every?: Maybe<CourseLinkWhereInput>;
  linksFromCourse_some?: Maybe<CourseLinkWhereInput>;
  linksFromCourse_none?: Maybe<CourseLinkWhereInput>;
  linksToCourse_every?: Maybe<CourseLinkWhereInput>;
  linksToCourse_some?: Maybe<CourseLinkWhereInput>;
  linksToCourse_none?: Maybe<CourseLinkWhereInput>;
  workspace?: Maybe<WorkspaceWhereInput>;
  concepts_every?: Maybe<ConceptWhereInput>;
  concepts_some?: Maybe<ConceptWhereInput>;
  concepts_none?: Maybe<ConceptWhereInput>;
  createdBy?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  goalLinks_every?: Maybe<GoalLinkWhereInput>;
  goalLinks_some?: Maybe<GoalLinkWhereInput>;
  goalLinks_none?: Maybe<GoalLinkWhereInput>;
  AND?: Maybe<CourseWhereInput[] | CourseWhereInput>;
  OR?: Maybe<CourseWhereInput[] | CourseWhereInput>;
  NOT?: Maybe<CourseWhereInput[] | CourseWhereInput>;
}

export interface TagWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  priority?: Maybe<Int>;
  priority_not?: Maybe<Int>;
  priority_in?: Maybe<Int[] | Int>;
  priority_not_in?: Maybe<Int[] | Int>;
  priority_lt?: Maybe<Int>;
  priority_lte?: Maybe<Int>;
  priority_gt?: Maybe<Int>;
  priority_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TagWhereInput[] | TagWhereInput>;
  OR?: Maybe<TagWhereInput[] | TagWhereInput>;
  NOT?: Maybe<TagWhereInput[] | TagWhereInput>;
}

export interface CourseLinkWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  from?: Maybe<CourseWhereInput>;
  to?: Maybe<CourseWhereInput>;
  official?: Maybe<Boolean>;
  official_not?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  frozen_not?: Maybe<Boolean>;
  weight?: Maybe<Int>;
  weight_not?: Maybe<Int>;
  weight_in?: Maybe<Int[] | Int>;
  weight_not_in?: Maybe<Int[] | Int>;
  weight_lt?: Maybe<Int>;
  weight_lte?: Maybe<Int>;
  weight_gt?: Maybe<Int>;
  weight_gte?: Maybe<Int>;
  count?: Maybe<Int>;
  count_not?: Maybe<Int>;
  count_in?: Maybe<Int[] | Int>;
  count_not_in?: Maybe<Int[] | Int>;
  count_lt?: Maybe<Int>;
  count_lte?: Maybe<Int>;
  count_gt?: Maybe<Int>;
  count_gte?: Maybe<Int>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  workspace?: Maybe<WorkspaceWhereInput>;
  createdBy?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CourseLinkWhereInput[] | CourseLinkWhereInput>;
  OR?: Maybe<CourseLinkWhereInput[] | CourseLinkWhereInput>;
  NOT?: Maybe<CourseLinkWhereInput[] | CourseLinkWhereInput>;
}

export interface ConceptWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  level?: Maybe<ConceptLevel>;
  level_not?: Maybe<ConceptLevel>;
  level_in?: Maybe<ConceptLevel[] | ConceptLevel>;
  level_not_in?: Maybe<ConceptLevel[] | ConceptLevel>;
  position?: Maybe<String>;
  position_not?: Maybe<String>;
  position_in?: Maybe<String[] | String>;
  position_not_in?: Maybe<String[] | String>;
  position_lt?: Maybe<String>;
  position_lte?: Maybe<String>;
  position_gt?: Maybe<String>;
  position_gte?: Maybe<String>;
  position_contains?: Maybe<String>;
  position_not_contains?: Maybe<String>;
  position_starts_with?: Maybe<String>;
  position_not_starts_with?: Maybe<String>;
  position_ends_with?: Maybe<String>;
  position_not_ends_with?: Maybe<String>;
  official?: Maybe<Boolean>;
  official_not?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  frozen_not?: Maybe<Boolean>;
  tags_every?: Maybe<TagWhereInput>;
  tags_some?: Maybe<TagWhereInput>;
  tags_none?: Maybe<TagWhereInput>;
  count?: Maybe<Int>;
  count_not?: Maybe<Int>;
  count_in?: Maybe<Int[] | Int>;
  count_not_in?: Maybe<Int[] | Int>;
  count_lt?: Maybe<Int>;
  count_lte?: Maybe<Int>;
  count_gt?: Maybe<Int>;
  count_gte?: Maybe<Int>;
  sourceConcept?: Maybe<ConceptWhereInput>;
  clones_every?: Maybe<ConceptWhereInput>;
  clones_some?: Maybe<ConceptWhereInput>;
  clones_none?: Maybe<ConceptWhereInput>;
  sourceCommon?: Maybe<ConceptWhereInput>;
  commonClones_every?: Maybe<ConceptWhereInput>;
  commonClones_some?: Maybe<ConceptWhereInput>;
  commonClones_none?: Maybe<ConceptWhereInput>;
  linksFromConcept_every?: Maybe<ConceptLinkWhereInput>;
  linksFromConcept_some?: Maybe<ConceptLinkWhereInput>;
  linksFromConcept_none?: Maybe<ConceptLinkWhereInput>;
  linksToConcept_every?: Maybe<ConceptLinkWhereInput>;
  linksToConcept_some?: Maybe<ConceptLinkWhereInput>;
  linksToConcept_none?: Maybe<ConceptLinkWhereInput>;
  course?: Maybe<CourseWhereInput>;
  workspace?: Maybe<WorkspaceWhereInput>;
  createdBy?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ConceptWhereInput[] | ConceptWhereInput>;
  OR?: Maybe<ConceptWhereInput[] | ConceptWhereInput>;
  NOT?: Maybe<ConceptWhereInput[] | ConceptWhereInput>;
}

export interface ConceptLinkWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  from?: Maybe<ConceptWhereInput>;
  to?: Maybe<ConceptWhereInput>;
  official?: Maybe<Boolean>;
  official_not?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  frozen_not?: Maybe<Boolean>;
  weight?: Maybe<Int>;
  weight_not?: Maybe<Int>;
  weight_in?: Maybe<Int[] | Int>;
  weight_not_in?: Maybe<Int[] | Int>;
  weight_lt?: Maybe<Int>;
  weight_lte?: Maybe<Int>;
  weight_gt?: Maybe<Int>;
  weight_gte?: Maybe<Int>;
  count?: Maybe<Int>;
  count_not?: Maybe<Int>;
  count_in?: Maybe<Int[] | Int>;
  count_not_in?: Maybe<Int[] | Int>;
  count_lt?: Maybe<Int>;
  count_lte?: Maybe<Int>;
  count_gt?: Maybe<Int>;
  count_gte?: Maybe<Int>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  level?: Maybe<PrerequisiteLevel>;
  level_not?: Maybe<PrerequisiteLevel>;
  level_in?: Maybe<PrerequisiteLevel[] | PrerequisiteLevel>;
  level_not_in?: Maybe<PrerequisiteLevel[] | PrerequisiteLevel>;
  workspace?: Maybe<WorkspaceWhereInput>;
  createdBy?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ConceptLinkWhereInput[] | ConceptLinkWhereInput>;
  OR?: Maybe<ConceptLinkWhereInput[] | ConceptLinkWhereInput>;
  NOT?: Maybe<ConceptLinkWhereInput[] | ConceptLinkWhereInput>;
}

export interface GoalLinkWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  course?: Maybe<CourseWhereInput>;
  goal?: Maybe<ConceptWhereInput>;
  workspace?: Maybe<WorkspaceWhereInput>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  createdBy?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<GoalLinkWhereInput[] | GoalLinkWhereInput>;
  OR?: Maybe<GoalLinkWhereInput[] | GoalLinkWhereInput>;
  NOT?: Maybe<GoalLinkWhereInput[] | GoalLinkWhereInput>;
}

export interface WorkspaceTokenWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  privilege?: Maybe<Privilege>;
  privilege_not?: Maybe<Privilege>;
  privilege_in?: Maybe<Privilege[] | Privilege>;
  privilege_not_in?: Maybe<Privilege[] | Privilege>;
  revoked?: Maybe<Boolean>;
  revoked_not?: Maybe<Boolean>;
  workspace?: Maybe<WorkspaceWhereInput>;
  participants_every?: Maybe<WorkspaceParticipantWhereInput>;
  participants_some?: Maybe<WorkspaceParticipantWhereInput>;
  participants_none?: Maybe<WorkspaceParticipantWhereInput>;
  AND?: Maybe<WorkspaceTokenWhereInput[] | WorkspaceTokenWhereInput>;
  OR?: Maybe<WorkspaceTokenWhereInput[] | WorkspaceTokenWhereInput>;
  NOT?: Maybe<WorkspaceTokenWhereInput[] | WorkspaceTokenWhereInput>;
}

export interface PointGroupWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  startDate?: Maybe<DateTimeInput>;
  startDate_not?: Maybe<DateTimeInput>;
  startDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_lt?: Maybe<DateTimeInput>;
  startDate_lte?: Maybe<DateTimeInput>;
  startDate_gt?: Maybe<DateTimeInput>;
  startDate_gte?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  endDate_not?: Maybe<DateTimeInput>;
  endDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endDate_lt?: Maybe<DateTimeInput>;
  endDate_lte?: Maybe<DateTimeInput>;
  endDate_gt?: Maybe<DateTimeInput>;
  endDate_gte?: Maybe<DateTimeInput>;
  maxPoints?: Maybe<Int>;
  maxPoints_not?: Maybe<Int>;
  maxPoints_in?: Maybe<Int[] | Int>;
  maxPoints_not_in?: Maybe<Int[] | Int>;
  maxPoints_lt?: Maybe<Int>;
  maxPoints_lte?: Maybe<Int>;
  maxPoints_gt?: Maybe<Int>;
  maxPoints_gte?: Maybe<Int>;
  pointsPerConcept?: Maybe<Float>;
  pointsPerConcept_not?: Maybe<Float>;
  pointsPerConcept_in?: Maybe<Float[] | Float>;
  pointsPerConcept_not_in?: Maybe<Float[] | Float>;
  pointsPerConcept_lt?: Maybe<Float>;
  pointsPerConcept_lte?: Maybe<Float>;
  pointsPerConcept_gt?: Maybe<Float>;
  pointsPerConcept_gte?: Maybe<Float>;
  workspace?: Maybe<WorkspaceWhereInput>;
  course?: Maybe<CourseWhereInput>;
  completions_every?: Maybe<CompletionWhereInput>;
  completions_some?: Maybe<CompletionWhereInput>;
  completions_none?: Maybe<CompletionWhereInput>;
  createdBy?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PointGroupWhereInput[] | PointGroupWhereInput>;
  OR?: Maybe<PointGroupWhereInput[] | PointGroupWhereInput>;
  NOT?: Maybe<PointGroupWhereInput[] | PointGroupWhereInput>;
}

export interface CompletionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  conceptAmount?: Maybe<Int>;
  conceptAmount_not?: Maybe<Int>;
  conceptAmount_in?: Maybe<Int[] | Int>;
  conceptAmount_not_in?: Maybe<Int[] | Int>;
  conceptAmount_lt?: Maybe<Int>;
  conceptAmount_lte?: Maybe<Int>;
  conceptAmount_gt?: Maybe<Int>;
  conceptAmount_gte?: Maybe<Int>;
  pointGroup?: Maybe<PointGroupWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CompletionWhereInput[] | CompletionWhereInput>;
  OR?: Maybe<CompletionWhereInput[] | CompletionWhereInput>;
  NOT?: Maybe<CompletionWhereInput[] | CompletionWhereInput>;
}

export type CompletionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ConceptWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ConceptLinkWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type CourseWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type CourseLinkWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type GoalLinkWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type PointGroupWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ProjectWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ProjectParticipantWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ProjectTokenWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type TagWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  tmcId?: Maybe<Int>;
  hakaId?: Maybe<String>;
  googleId?: Maybe<String>;
}>;

export type WorkspaceWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type WorkspaceParticipantWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type WorkspaceTokenWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface AccessTokenCreateInput {
  id?: Maybe<ID_Input>;
  token: String;
  user: UserCreateOneWithoutTokensInput;
  lastSeenAgent: String;
  lastSeenAddress: String;
}

export interface UserCreateOneWithoutTokensInput {
  create?: Maybe<UserCreateWithoutTokensInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutTokensInput {
  id?: Maybe<ID_Input>;
  tmcId?: Maybe<Int>;
  hakaId?: Maybe<String>;
  googleId?: Maybe<String>;
  role: Role;
  deactivated?: Maybe<Boolean>;
  workspaceParticipations?: Maybe<
    WorkspaceParticipantCreateManyWithoutUserInput
  >;
  projectParticipations?: Maybe<ProjectParticipantCreateManyWithoutUserInput>;
  seenGuides?: Maybe<UserCreateseenGuidesInput>;
}

export interface WorkspaceParticipantCreateManyWithoutUserInput {
  create?: Maybe<
    | WorkspaceParticipantCreateWithoutUserInput[]
    | WorkspaceParticipantCreateWithoutUserInput
  >;
  connect?: Maybe<
    | WorkspaceParticipantWhereUniqueInput[]
    | WorkspaceParticipantWhereUniqueInput
  >;
}

export interface WorkspaceParticipantCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  privilege: Privilege;
  workspace: WorkspaceCreateOneWithoutParticipantsInput;
  token?: Maybe<WorkspaceTokenCreateOneWithoutParticipantsInput>;
}

export interface WorkspaceCreateOneWithoutParticipantsInput {
  create?: Maybe<WorkspaceCreateWithoutParticipantsInput>;
  connect?: Maybe<WorkspaceWhereUniqueInput>;
}

export interface WorkspaceCreateWithoutParticipantsInput {
  id?: Maybe<ID_Input>;
  name: String;
  sourceProject?: Maybe<ProjectCreateOneWithoutWorkspacesInput>;
  sourceTemplate?: Maybe<WorkspaceCreateOneWithoutClonesInput>;
  asMerge?: Maybe<ProjectCreateOneWithoutMergesInput>;
  asTemplate?: Maybe<ProjectCreateOneWithoutTemplatesInput>;
  clones?: Maybe<WorkspaceCreateManyWithoutSourceTemplateInput>;
  courses?: Maybe<CourseCreateManyWithoutWorkspaceInput>;
  courseOrder?: Maybe<WorkspaceCreatecourseOrderInput>;
  concepts?: Maybe<ConceptCreateManyWithoutWorkspaceInput>;
  commonConcepts?: Maybe<ConceptCreateManyInput>;
  conceptLinks?: Maybe<ConceptLinkCreateManyWithoutWorkspaceInput>;
  courseLinks?: Maybe<CourseLinkCreateManyWithoutWorkspaceInput>;
  goals?: Maybe<ConceptCreateManyInput>;
  goalLinks?: Maybe<GoalLinkCreateManyWithoutWorkspaceInput>;
  tokens?: Maybe<WorkspaceTokenCreateManyWithoutWorkspaceInput>;
  mainCourse?: Maybe<CourseCreateOneInput>;
  pointGroups?: Maybe<PointGroupCreateManyWithoutWorkspaceInput>;
  courseTags?: Maybe<TagCreateManyInput>;
  conceptTags?: Maybe<TagCreateManyInput>;
  goalTags?: Maybe<TagCreateManyInput>;
  createdBy?: Maybe<UserCreateOneInput>;
}

export interface ProjectCreateOneWithoutWorkspacesInput {
  create?: Maybe<ProjectCreateWithoutWorkspacesInput>;
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface ProjectCreateWithoutWorkspacesInput {
  id?: Maybe<ID_Input>;
  name: String;
  activeTemplate?: Maybe<WorkspaceCreateOneInput>;
  templates?: Maybe<WorkspaceCreateManyWithoutAsTemplateInput>;
  merges?: Maybe<WorkspaceCreateManyWithoutAsMergeInput>;
  participants?: Maybe<ProjectParticipantCreateManyWithoutProjectInput>;
  tokens?: Maybe<ProjectTokenCreateManyWithoutProjectInput>;
  createdBy?: Maybe<UserCreateOneInput>;
}

export interface WorkspaceCreateOneInput {
  create?: Maybe<WorkspaceCreateInput>;
  connect?: Maybe<WorkspaceWhereUniqueInput>;
}

export interface WorkspaceCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  sourceProject?: Maybe<ProjectCreateOneWithoutWorkspacesInput>;
  sourceTemplate?: Maybe<WorkspaceCreateOneWithoutClonesInput>;
  asMerge?: Maybe<ProjectCreateOneWithoutMergesInput>;
  asTemplate?: Maybe<ProjectCreateOneWithoutTemplatesInput>;
  clones?: Maybe<WorkspaceCreateManyWithoutSourceTemplateInput>;
  courses?: Maybe<CourseCreateManyWithoutWorkspaceInput>;
  courseOrder?: Maybe<WorkspaceCreatecourseOrderInput>;
  concepts?: Maybe<ConceptCreateManyWithoutWorkspaceInput>;
  commonConcepts?: Maybe<ConceptCreateManyInput>;
  conceptLinks?: Maybe<ConceptLinkCreateManyWithoutWorkspaceInput>;
  courseLinks?: Maybe<CourseLinkCreateManyWithoutWorkspaceInput>;
  goals?: Maybe<ConceptCreateManyInput>;
  goalLinks?: Maybe<GoalLinkCreateManyWithoutWorkspaceInput>;
  participants?: Maybe<WorkspaceParticipantCreateManyWithoutWorkspaceInput>;
  tokens?: Maybe<WorkspaceTokenCreateManyWithoutWorkspaceInput>;
  mainCourse?: Maybe<CourseCreateOneInput>;
  pointGroups?: Maybe<PointGroupCreateManyWithoutWorkspaceInput>;
  courseTags?: Maybe<TagCreateManyInput>;
  conceptTags?: Maybe<TagCreateManyInput>;
  goalTags?: Maybe<TagCreateManyInput>;
  createdBy?: Maybe<UserCreateOneInput>;
}

export interface WorkspaceCreateOneWithoutClonesInput {
  create?: Maybe<WorkspaceCreateWithoutClonesInput>;
  connect?: Maybe<WorkspaceWhereUniqueInput>;
}

export interface WorkspaceCreateWithoutClonesInput {
  id?: Maybe<ID_Input>;
  name: String;
  sourceProject?: Maybe<ProjectCreateOneWithoutWorkspacesInput>;
  sourceTemplate?: Maybe<WorkspaceCreateOneWithoutClonesInput>;
  asMerge?: Maybe<ProjectCreateOneWithoutMergesInput>;
  asTemplate?: Maybe<ProjectCreateOneWithoutTemplatesInput>;
  courses?: Maybe<CourseCreateManyWithoutWorkspaceInput>;
  courseOrder?: Maybe<WorkspaceCreatecourseOrderInput>;
  concepts?: Maybe<ConceptCreateManyWithoutWorkspaceInput>;
  commonConcepts?: Maybe<ConceptCreateManyInput>;
  conceptLinks?: Maybe<ConceptLinkCreateManyWithoutWorkspaceInput>;
  courseLinks?: Maybe<CourseLinkCreateManyWithoutWorkspaceInput>;
  goals?: Maybe<ConceptCreateManyInput>;
  goalLinks?: Maybe<GoalLinkCreateManyWithoutWorkspaceInput>;
  participants?: Maybe<WorkspaceParticipantCreateManyWithoutWorkspaceInput>;
  tokens?: Maybe<WorkspaceTokenCreateManyWithoutWorkspaceInput>;
  mainCourse?: Maybe<CourseCreateOneInput>;
  pointGroups?: Maybe<PointGroupCreateManyWithoutWorkspaceInput>;
  courseTags?: Maybe<TagCreateManyInput>;
  conceptTags?: Maybe<TagCreateManyInput>;
  goalTags?: Maybe<TagCreateManyInput>;
  createdBy?: Maybe<UserCreateOneInput>;
}

export interface ProjectCreateOneWithoutMergesInput {
  create?: Maybe<ProjectCreateWithoutMergesInput>;
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface ProjectCreateWithoutMergesInput {
  id?: Maybe<ID_Input>;
  name: String;
  workspaces?: Maybe<WorkspaceCreateManyWithoutSourceProjectInput>;
  activeTemplate?: Maybe<WorkspaceCreateOneInput>;
  templates?: Maybe<WorkspaceCreateManyWithoutAsTemplateInput>;
  participants?: Maybe<ProjectParticipantCreateManyWithoutProjectInput>;
  tokens?: Maybe<ProjectTokenCreateManyWithoutProjectInput>;
  createdBy?: Maybe<UserCreateOneInput>;
}

export interface WorkspaceCreateManyWithoutSourceProjectInput {
  create?: Maybe<
    | WorkspaceCreateWithoutSourceProjectInput[]
    | WorkspaceCreateWithoutSourceProjectInput
  >;
  connect?: Maybe<WorkspaceWhereUniqueInput[] | WorkspaceWhereUniqueInput>;
}

export interface WorkspaceCreateWithoutSourceProjectInput {
  id?: Maybe<ID_Input>;
  name: String;
  sourceTemplate?: Maybe<WorkspaceCreateOneWithoutClonesInput>;
  asMerge?: Maybe<ProjectCreateOneWithoutMergesInput>;
  asTemplate?: Maybe<ProjectCreateOneWithoutTemplatesInput>;
  clones?: Maybe<WorkspaceCreateManyWithoutSourceTemplateInput>;
  courses?: Maybe<CourseCreateManyWithoutWorkspaceInput>;
  courseOrder?: Maybe<WorkspaceCreatecourseOrderInput>;
  concepts?: Maybe<ConceptCreateManyWithoutWorkspaceInput>;
  commonConcepts?: Maybe<ConceptCreateManyInput>;
  conceptLinks?: Maybe<ConceptLinkCreateManyWithoutWorkspaceInput>;
  courseLinks?: Maybe<CourseLinkCreateManyWithoutWorkspaceInput>;
  goals?: Maybe<ConceptCreateManyInput>;
  goalLinks?: Maybe<GoalLinkCreateManyWithoutWorkspaceInput>;
  participants?: Maybe<WorkspaceParticipantCreateManyWithoutWorkspaceInput>;
  tokens?: Maybe<WorkspaceTokenCreateManyWithoutWorkspaceInput>;
  mainCourse?: Maybe<CourseCreateOneInput>;
  pointGroups?: Maybe<PointGroupCreateManyWithoutWorkspaceInput>;
  courseTags?: Maybe<TagCreateManyInput>;
  conceptTags?: Maybe<TagCreateManyInput>;
  goalTags?: Maybe<TagCreateManyInput>;
  createdBy?: Maybe<UserCreateOneInput>;
}

export interface ProjectCreateOneWithoutTemplatesInput {
  create?: Maybe<ProjectCreateWithoutTemplatesInput>;
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface ProjectCreateWithoutTemplatesInput {
  id?: Maybe<ID_Input>;
  name: String;
  workspaces?: Maybe<WorkspaceCreateManyWithoutSourceProjectInput>;
  activeTemplate?: Maybe<WorkspaceCreateOneInput>;
  merges?: Maybe<WorkspaceCreateManyWithoutAsMergeInput>;
  participants?: Maybe<ProjectParticipantCreateManyWithoutProjectInput>;
  tokens?: Maybe<ProjectTokenCreateManyWithoutProjectInput>;
  createdBy?: Maybe<UserCreateOneInput>;
}

export interface WorkspaceCreateManyWithoutAsMergeInput {
  create?: Maybe<
    WorkspaceCreateWithoutAsMergeInput[] | WorkspaceCreateWithoutAsMergeInput
  >;
  connect?: Maybe<WorkspaceWhereUniqueInput[] | WorkspaceWhereUniqueInput>;
}

export interface WorkspaceCreateWithoutAsMergeInput {
  id?: Maybe<ID_Input>;
  name: String;
  sourceProject?: Maybe<ProjectCreateOneWithoutWorkspacesInput>;
  sourceTemplate?: Maybe<WorkspaceCreateOneWithoutClonesInput>;
  asTemplate?: Maybe<ProjectCreateOneWithoutTemplatesInput>;
  clones?: Maybe<WorkspaceCreateManyWithoutSourceTemplateInput>;
  courses?: Maybe<CourseCreateManyWithoutWorkspaceInput>;
  courseOrder?: Maybe<WorkspaceCreatecourseOrderInput>;
  concepts?: Maybe<ConceptCreateManyWithoutWorkspaceInput>;
  commonConcepts?: Maybe<ConceptCreateManyInput>;
  conceptLinks?: Maybe<ConceptLinkCreateManyWithoutWorkspaceInput>;
  courseLinks?: Maybe<CourseLinkCreateManyWithoutWorkspaceInput>;
  goals?: Maybe<ConceptCreateManyInput>;
  goalLinks?: Maybe<GoalLinkCreateManyWithoutWorkspaceInput>;
  participants?: Maybe<WorkspaceParticipantCreateManyWithoutWorkspaceInput>;
  tokens?: Maybe<WorkspaceTokenCreateManyWithoutWorkspaceInput>;
  mainCourse?: Maybe<CourseCreateOneInput>;
  pointGroups?: Maybe<PointGroupCreateManyWithoutWorkspaceInput>;
  courseTags?: Maybe<TagCreateManyInput>;
  conceptTags?: Maybe<TagCreateManyInput>;
  goalTags?: Maybe<TagCreateManyInput>;
  createdBy?: Maybe<UserCreateOneInput>;
}

export interface WorkspaceCreateManyWithoutSourceTemplateInput {
  create?: Maybe<
    | WorkspaceCreateWithoutSourceTemplateInput[]
    | WorkspaceCreateWithoutSourceTemplateInput
  >;
  connect?: Maybe<WorkspaceWhereUniqueInput[] | WorkspaceWhereUniqueInput>;
}

export interface WorkspaceCreateWithoutSourceTemplateInput {
  id?: Maybe<ID_Input>;
  name: String;
  sourceProject?: Maybe<ProjectCreateOneWithoutWorkspacesInput>;
  asMerge?: Maybe<ProjectCreateOneWithoutMergesInput>;
  asTemplate?: Maybe<ProjectCreateOneWithoutTemplatesInput>;
  clones?: Maybe<WorkspaceCreateManyWithoutSourceTemplateInput>;
  courses?: Maybe<CourseCreateManyWithoutWorkspaceInput>;
  courseOrder?: Maybe<WorkspaceCreatecourseOrderInput>;
  concepts?: Maybe<ConceptCreateManyWithoutWorkspaceInput>;
  commonConcepts?: Maybe<ConceptCreateManyInput>;
  conceptLinks?: Maybe<ConceptLinkCreateManyWithoutWorkspaceInput>;
  courseLinks?: Maybe<CourseLinkCreateManyWithoutWorkspaceInput>;
  goals?: Maybe<ConceptCreateManyInput>;
  goalLinks?: Maybe<GoalLinkCreateManyWithoutWorkspaceInput>;
  participants?: Maybe<WorkspaceParticipantCreateManyWithoutWorkspaceInput>;
  tokens?: Maybe<WorkspaceTokenCreateManyWithoutWorkspaceInput>;
  mainCourse?: Maybe<CourseCreateOneInput>;
  pointGroups?: Maybe<PointGroupCreateManyWithoutWorkspaceInput>;
  courseTags?: Maybe<TagCreateManyInput>;
  conceptTags?: Maybe<TagCreateManyInput>;
  goalTags?: Maybe<TagCreateManyInput>;
  createdBy?: Maybe<UserCreateOneInput>;
}

export interface CourseCreateManyWithoutWorkspaceInput {
  create?: Maybe<
    CourseCreateWithoutWorkspaceInput[] | CourseCreateWithoutWorkspaceInput
  >;
  connect?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
}

export interface CourseCreateWithoutWorkspaceInput {
  id?: Maybe<ID_Input>;
  name: String;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  tags?: Maybe<TagCreateManyInput>;
  sourceCourse?: Maybe<CourseCreateOneWithoutClonesInput>;
  clones?: Maybe<CourseCreateManyWithoutSourceCourseInput>;
  linksFromCourse?: Maybe<CourseLinkCreateManyWithoutFromInput>;
  linksToCourse?: Maybe<CourseLinkCreateManyWithoutToInput>;
  concepts?: Maybe<ConceptCreateManyWithoutCourseInput>;
  conceptOrder?: Maybe<CourseCreateconceptOrderInput>;
  objectiveOrder?: Maybe<CourseCreateobjectiveOrderInput>;
  createdBy: UserCreateOneInput;
  goalLinks?: Maybe<GoalLinkCreateManyWithoutCourseInput>;
}

export interface TagCreateManyInput {
  create?: Maybe<TagCreateInput[] | TagCreateInput>;
  connect?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
}

export interface TagCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  type?: Maybe<String>;
  priority?: Maybe<Int>;
}

export interface CourseCreateOneWithoutClonesInput {
  create?: Maybe<CourseCreateWithoutClonesInput>;
  connect?: Maybe<CourseWhereUniqueInput>;
}

export interface CourseCreateWithoutClonesInput {
  id?: Maybe<ID_Input>;
  name: String;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  tags?: Maybe<TagCreateManyInput>;
  sourceCourse?: Maybe<CourseCreateOneWithoutClonesInput>;
  linksFromCourse?: Maybe<CourseLinkCreateManyWithoutFromInput>;
  linksToCourse?: Maybe<CourseLinkCreateManyWithoutToInput>;
  workspace: WorkspaceCreateOneWithoutCoursesInput;
  concepts?: Maybe<ConceptCreateManyWithoutCourseInput>;
  conceptOrder?: Maybe<CourseCreateconceptOrderInput>;
  objectiveOrder?: Maybe<CourseCreateobjectiveOrderInput>;
  createdBy: UserCreateOneInput;
  goalLinks?: Maybe<GoalLinkCreateManyWithoutCourseInput>;
}

export interface CourseLinkCreateManyWithoutFromInput {
  create?: Maybe<
    CourseLinkCreateWithoutFromInput[] | CourseLinkCreateWithoutFromInput
  >;
  connect?: Maybe<CourseLinkWhereUniqueInput[] | CourseLinkWhereUniqueInput>;
}

export interface CourseLinkCreateWithoutFromInput {
  id?: Maybe<ID_Input>;
  to: CourseCreateOneWithoutLinksToCourseInput;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  weight?: Maybe<Int>;
  count?: Maybe<Int>;
  text?: Maybe<String>;
  workspace: WorkspaceCreateOneWithoutCourseLinksInput;
  createdBy: UserCreateOneInput;
}

export interface CourseCreateOneWithoutLinksToCourseInput {
  create?: Maybe<CourseCreateWithoutLinksToCourseInput>;
  connect?: Maybe<CourseWhereUniqueInput>;
}

export interface CourseCreateWithoutLinksToCourseInput {
  id?: Maybe<ID_Input>;
  name: String;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  tags?: Maybe<TagCreateManyInput>;
  sourceCourse?: Maybe<CourseCreateOneWithoutClonesInput>;
  clones?: Maybe<CourseCreateManyWithoutSourceCourseInput>;
  linksFromCourse?: Maybe<CourseLinkCreateManyWithoutFromInput>;
  workspace: WorkspaceCreateOneWithoutCoursesInput;
  concepts?: Maybe<ConceptCreateManyWithoutCourseInput>;
  conceptOrder?: Maybe<CourseCreateconceptOrderInput>;
  objectiveOrder?: Maybe<CourseCreateobjectiveOrderInput>;
  createdBy: UserCreateOneInput;
  goalLinks?: Maybe<GoalLinkCreateManyWithoutCourseInput>;
}

export interface CourseCreateManyWithoutSourceCourseInput {
  create?: Maybe<
    | CourseCreateWithoutSourceCourseInput[]
    | CourseCreateWithoutSourceCourseInput
  >;
  connect?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
}

export interface CourseCreateWithoutSourceCourseInput {
  id?: Maybe<ID_Input>;
  name: String;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  tags?: Maybe<TagCreateManyInput>;
  clones?: Maybe<CourseCreateManyWithoutSourceCourseInput>;
  linksFromCourse?: Maybe<CourseLinkCreateManyWithoutFromInput>;
  linksToCourse?: Maybe<CourseLinkCreateManyWithoutToInput>;
  workspace: WorkspaceCreateOneWithoutCoursesInput;
  concepts?: Maybe<ConceptCreateManyWithoutCourseInput>;
  conceptOrder?: Maybe<CourseCreateconceptOrderInput>;
  objectiveOrder?: Maybe<CourseCreateobjectiveOrderInput>;
  createdBy: UserCreateOneInput;
  goalLinks?: Maybe<GoalLinkCreateManyWithoutCourseInput>;
}

export interface CourseLinkCreateManyWithoutToInput {
  create?: Maybe<
    CourseLinkCreateWithoutToInput[] | CourseLinkCreateWithoutToInput
  >;
  connect?: Maybe<CourseLinkWhereUniqueInput[] | CourseLinkWhereUniqueInput>;
}

export interface CourseLinkCreateWithoutToInput {
  id?: Maybe<ID_Input>;
  from: CourseCreateOneWithoutLinksFromCourseInput;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  weight?: Maybe<Int>;
  count?: Maybe<Int>;
  text?: Maybe<String>;
  workspace: WorkspaceCreateOneWithoutCourseLinksInput;
  createdBy: UserCreateOneInput;
}

export interface CourseCreateOneWithoutLinksFromCourseInput {
  create?: Maybe<CourseCreateWithoutLinksFromCourseInput>;
  connect?: Maybe<CourseWhereUniqueInput>;
}

export interface CourseCreateWithoutLinksFromCourseInput {
  id?: Maybe<ID_Input>;
  name: String;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  tags?: Maybe<TagCreateManyInput>;
  sourceCourse?: Maybe<CourseCreateOneWithoutClonesInput>;
  clones?: Maybe<CourseCreateManyWithoutSourceCourseInput>;
  linksToCourse?: Maybe<CourseLinkCreateManyWithoutToInput>;
  workspace: WorkspaceCreateOneWithoutCoursesInput;
  concepts?: Maybe<ConceptCreateManyWithoutCourseInput>;
  conceptOrder?: Maybe<CourseCreateconceptOrderInput>;
  objectiveOrder?: Maybe<CourseCreateobjectiveOrderInput>;
  createdBy: UserCreateOneInput;
  goalLinks?: Maybe<GoalLinkCreateManyWithoutCourseInput>;
}

export interface WorkspaceCreateOneWithoutCoursesInput {
  create?: Maybe<WorkspaceCreateWithoutCoursesInput>;
  connect?: Maybe<WorkspaceWhereUniqueInput>;
}

export interface WorkspaceCreateWithoutCoursesInput {
  id?: Maybe<ID_Input>;
  name: String;
  sourceProject?: Maybe<ProjectCreateOneWithoutWorkspacesInput>;
  sourceTemplate?: Maybe<WorkspaceCreateOneWithoutClonesInput>;
  asMerge?: Maybe<ProjectCreateOneWithoutMergesInput>;
  asTemplate?: Maybe<ProjectCreateOneWithoutTemplatesInput>;
  clones?: Maybe<WorkspaceCreateManyWithoutSourceTemplateInput>;
  courseOrder?: Maybe<WorkspaceCreatecourseOrderInput>;
  concepts?: Maybe<ConceptCreateManyWithoutWorkspaceInput>;
  commonConcepts?: Maybe<ConceptCreateManyInput>;
  conceptLinks?: Maybe<ConceptLinkCreateManyWithoutWorkspaceInput>;
  courseLinks?: Maybe<CourseLinkCreateManyWithoutWorkspaceInput>;
  goals?: Maybe<ConceptCreateManyInput>;
  goalLinks?: Maybe<GoalLinkCreateManyWithoutWorkspaceInput>;
  participants?: Maybe<WorkspaceParticipantCreateManyWithoutWorkspaceInput>;
  tokens?: Maybe<WorkspaceTokenCreateManyWithoutWorkspaceInput>;
  mainCourse?: Maybe<CourseCreateOneInput>;
  pointGroups?: Maybe<PointGroupCreateManyWithoutWorkspaceInput>;
  courseTags?: Maybe<TagCreateManyInput>;
  conceptTags?: Maybe<TagCreateManyInput>;
  goalTags?: Maybe<TagCreateManyInput>;
  createdBy?: Maybe<UserCreateOneInput>;
}

export interface WorkspaceCreatecourseOrderInput {
  set?: Maybe<ID_Input[] | ID_Input>;
}

export interface ConceptCreateManyWithoutWorkspaceInput {
  create?: Maybe<
    ConceptCreateWithoutWorkspaceInput[] | ConceptCreateWithoutWorkspaceInput
  >;
  connect?: Maybe<ConceptWhereUniqueInput[] | ConceptWhereUniqueInput>;
}

export interface ConceptCreateWithoutWorkspaceInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  level?: Maybe<ConceptLevel>;
  position?: Maybe<String>;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  tags?: Maybe<TagCreateManyInput>;
  count?: Maybe<Int>;
  sourceConcept?: Maybe<ConceptCreateOneWithoutClonesInput>;
  clones?: Maybe<ConceptCreateManyWithoutSourceConceptInput>;
  sourceCommon?: Maybe<ConceptCreateOneWithoutCommonClonesInput>;
  commonClones?: Maybe<ConceptCreateManyWithoutSourceCommonInput>;
  linksFromConcept?: Maybe<ConceptLinkCreateManyWithoutFromInput>;
  linksToConcept?: Maybe<ConceptLinkCreateManyWithoutToInput>;
  course?: Maybe<CourseCreateOneWithoutConceptsInput>;
  createdBy: UserCreateOneInput;
}

export interface ConceptCreateOneWithoutClonesInput {
  create?: Maybe<ConceptCreateWithoutClonesInput>;
  connect?: Maybe<ConceptWhereUniqueInput>;
}

export interface ConceptCreateWithoutClonesInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  level?: Maybe<ConceptLevel>;
  position?: Maybe<String>;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  tags?: Maybe<TagCreateManyInput>;
  count?: Maybe<Int>;
  sourceConcept?: Maybe<ConceptCreateOneWithoutClonesInput>;
  sourceCommon?: Maybe<ConceptCreateOneWithoutCommonClonesInput>;
  commonClones?: Maybe<ConceptCreateManyWithoutSourceCommonInput>;
  linksFromConcept?: Maybe<ConceptLinkCreateManyWithoutFromInput>;
  linksToConcept?: Maybe<ConceptLinkCreateManyWithoutToInput>;
  course?: Maybe<CourseCreateOneWithoutConceptsInput>;
  workspace: WorkspaceCreateOneWithoutConceptsInput;
  createdBy: UserCreateOneInput;
}

export interface ConceptCreateOneWithoutCommonClonesInput {
  create?: Maybe<ConceptCreateWithoutCommonClonesInput>;
  connect?: Maybe<ConceptWhereUniqueInput>;
}

export interface ConceptCreateWithoutCommonClonesInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  level?: Maybe<ConceptLevel>;
  position?: Maybe<String>;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  tags?: Maybe<TagCreateManyInput>;
  count?: Maybe<Int>;
  sourceConcept?: Maybe<ConceptCreateOneWithoutClonesInput>;
  clones?: Maybe<ConceptCreateManyWithoutSourceConceptInput>;
  sourceCommon?: Maybe<ConceptCreateOneWithoutCommonClonesInput>;
  linksFromConcept?: Maybe<ConceptLinkCreateManyWithoutFromInput>;
  linksToConcept?: Maybe<ConceptLinkCreateManyWithoutToInput>;
  course?: Maybe<CourseCreateOneWithoutConceptsInput>;
  workspace: WorkspaceCreateOneWithoutConceptsInput;
  createdBy: UserCreateOneInput;
}

export interface ConceptCreateManyWithoutSourceConceptInput {
  create?: Maybe<
    | ConceptCreateWithoutSourceConceptInput[]
    | ConceptCreateWithoutSourceConceptInput
  >;
  connect?: Maybe<ConceptWhereUniqueInput[] | ConceptWhereUniqueInput>;
}

export interface ConceptCreateWithoutSourceConceptInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  level?: Maybe<ConceptLevel>;
  position?: Maybe<String>;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  tags?: Maybe<TagCreateManyInput>;
  count?: Maybe<Int>;
  clones?: Maybe<ConceptCreateManyWithoutSourceConceptInput>;
  sourceCommon?: Maybe<ConceptCreateOneWithoutCommonClonesInput>;
  commonClones?: Maybe<ConceptCreateManyWithoutSourceCommonInput>;
  linksFromConcept?: Maybe<ConceptLinkCreateManyWithoutFromInput>;
  linksToConcept?: Maybe<ConceptLinkCreateManyWithoutToInput>;
  course?: Maybe<CourseCreateOneWithoutConceptsInput>;
  workspace: WorkspaceCreateOneWithoutConceptsInput;
  createdBy: UserCreateOneInput;
}

export interface ConceptCreateManyWithoutSourceCommonInput {
  create?: Maybe<
    | ConceptCreateWithoutSourceCommonInput[]
    | ConceptCreateWithoutSourceCommonInput
  >;
  connect?: Maybe<ConceptWhereUniqueInput[] | ConceptWhereUniqueInput>;
}

export interface ConceptCreateWithoutSourceCommonInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  level?: Maybe<ConceptLevel>;
  position?: Maybe<String>;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  tags?: Maybe<TagCreateManyInput>;
  count?: Maybe<Int>;
  sourceConcept?: Maybe<ConceptCreateOneWithoutClonesInput>;
  clones?: Maybe<ConceptCreateManyWithoutSourceConceptInput>;
  commonClones?: Maybe<ConceptCreateManyWithoutSourceCommonInput>;
  linksFromConcept?: Maybe<ConceptLinkCreateManyWithoutFromInput>;
  linksToConcept?: Maybe<ConceptLinkCreateManyWithoutToInput>;
  course?: Maybe<CourseCreateOneWithoutConceptsInput>;
  workspace: WorkspaceCreateOneWithoutConceptsInput;
  createdBy: UserCreateOneInput;
}

export interface ConceptLinkCreateManyWithoutFromInput {
  create?: Maybe<
    ConceptLinkCreateWithoutFromInput[] | ConceptLinkCreateWithoutFromInput
  >;
  connect?: Maybe<ConceptLinkWhereUniqueInput[] | ConceptLinkWhereUniqueInput>;
}

export interface ConceptLinkCreateWithoutFromInput {
  id?: Maybe<ID_Input>;
  to: ConceptCreateOneWithoutLinksToConceptInput;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  weight?: Maybe<Int>;
  count?: Maybe<Int>;
  text?: Maybe<String>;
  level?: Maybe<PrerequisiteLevel>;
  workspace: WorkspaceCreateOneWithoutConceptLinksInput;
  createdBy: UserCreateOneInput;
}

export interface ConceptCreateOneWithoutLinksToConceptInput {
  create?: Maybe<ConceptCreateWithoutLinksToConceptInput>;
  connect?: Maybe<ConceptWhereUniqueInput>;
}

export interface ConceptCreateWithoutLinksToConceptInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  level?: Maybe<ConceptLevel>;
  position?: Maybe<String>;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  tags?: Maybe<TagCreateManyInput>;
  count?: Maybe<Int>;
  sourceConcept?: Maybe<ConceptCreateOneWithoutClonesInput>;
  clones?: Maybe<ConceptCreateManyWithoutSourceConceptInput>;
  sourceCommon?: Maybe<ConceptCreateOneWithoutCommonClonesInput>;
  commonClones?: Maybe<ConceptCreateManyWithoutSourceCommonInput>;
  linksFromConcept?: Maybe<ConceptLinkCreateManyWithoutFromInput>;
  course?: Maybe<CourseCreateOneWithoutConceptsInput>;
  workspace: WorkspaceCreateOneWithoutConceptsInput;
  createdBy: UserCreateOneInput;
}

export interface CourseCreateOneWithoutConceptsInput {
  create?: Maybe<CourseCreateWithoutConceptsInput>;
  connect?: Maybe<CourseWhereUniqueInput>;
}

export interface CourseCreateWithoutConceptsInput {
  id?: Maybe<ID_Input>;
  name: String;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  tags?: Maybe<TagCreateManyInput>;
  sourceCourse?: Maybe<CourseCreateOneWithoutClonesInput>;
  clones?: Maybe<CourseCreateManyWithoutSourceCourseInput>;
  linksFromCourse?: Maybe<CourseLinkCreateManyWithoutFromInput>;
  linksToCourse?: Maybe<CourseLinkCreateManyWithoutToInput>;
  workspace: WorkspaceCreateOneWithoutCoursesInput;
  conceptOrder?: Maybe<CourseCreateconceptOrderInput>;
  objectiveOrder?: Maybe<CourseCreateobjectiveOrderInput>;
  createdBy: UserCreateOneInput;
  goalLinks?: Maybe<GoalLinkCreateManyWithoutCourseInput>;
}

export interface CourseCreateconceptOrderInput {
  set?: Maybe<ID_Input[] | ID_Input>;
}

export interface CourseCreateobjectiveOrderInput {
  set?: Maybe<ID_Input[] | ID_Input>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  tmcId?: Maybe<Int>;
  hakaId?: Maybe<String>;
  googleId?: Maybe<String>;
  role: Role;
  deactivated?: Maybe<Boolean>;
  tokens?: Maybe<AccessTokenCreateManyWithoutUserInput>;
  workspaceParticipations?: Maybe<
    WorkspaceParticipantCreateManyWithoutUserInput
  >;
  projectParticipations?: Maybe<ProjectParticipantCreateManyWithoutUserInput>;
  seenGuides?: Maybe<UserCreateseenGuidesInput>;
}

export interface AccessTokenCreateManyWithoutUserInput {
  create?: Maybe<
    AccessTokenCreateWithoutUserInput[] | AccessTokenCreateWithoutUserInput
  >;
  connect?: Maybe<AccessTokenWhereUniqueInput[] | AccessTokenWhereUniqueInput>;
}

export interface AccessTokenCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  token: String;
  lastSeenAgent: String;
  lastSeenAddress: String;
}

export interface ProjectParticipantCreateManyWithoutUserInput {
  create?: Maybe<
    | ProjectParticipantCreateWithoutUserInput[]
    | ProjectParticipantCreateWithoutUserInput
  >;
  connect?: Maybe<
    ProjectParticipantWhereUniqueInput[] | ProjectParticipantWhereUniqueInput
  >;
}

export interface ProjectParticipantCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  privilege: Privilege;
  project: ProjectCreateOneWithoutParticipantsInput;
  token?: Maybe<ProjectTokenCreateOneWithoutParticipantsInput>;
}

export interface ProjectCreateOneWithoutParticipantsInput {
  create?: Maybe<ProjectCreateWithoutParticipantsInput>;
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface ProjectCreateWithoutParticipantsInput {
  id?: Maybe<ID_Input>;
  name: String;
  workspaces?: Maybe<WorkspaceCreateManyWithoutSourceProjectInput>;
  activeTemplate?: Maybe<WorkspaceCreateOneInput>;
  templates?: Maybe<WorkspaceCreateManyWithoutAsTemplateInput>;
  merges?: Maybe<WorkspaceCreateManyWithoutAsMergeInput>;
  tokens?: Maybe<ProjectTokenCreateManyWithoutProjectInput>;
  createdBy?: Maybe<UserCreateOneInput>;
}

export interface WorkspaceCreateManyWithoutAsTemplateInput {
  create?: Maybe<
    | WorkspaceCreateWithoutAsTemplateInput[]
    | WorkspaceCreateWithoutAsTemplateInput
  >;
  connect?: Maybe<WorkspaceWhereUniqueInput[] | WorkspaceWhereUniqueInput>;
}

export interface WorkspaceCreateWithoutAsTemplateInput {
  id?: Maybe<ID_Input>;
  name: String;
  sourceProject?: Maybe<ProjectCreateOneWithoutWorkspacesInput>;
  sourceTemplate?: Maybe<WorkspaceCreateOneWithoutClonesInput>;
  asMerge?: Maybe<ProjectCreateOneWithoutMergesInput>;
  clones?: Maybe<WorkspaceCreateManyWithoutSourceTemplateInput>;
  courses?: Maybe<CourseCreateManyWithoutWorkspaceInput>;
  courseOrder?: Maybe<WorkspaceCreatecourseOrderInput>;
  concepts?: Maybe<ConceptCreateManyWithoutWorkspaceInput>;
  commonConcepts?: Maybe<ConceptCreateManyInput>;
  conceptLinks?: Maybe<ConceptLinkCreateManyWithoutWorkspaceInput>;
  courseLinks?: Maybe<CourseLinkCreateManyWithoutWorkspaceInput>;
  goals?: Maybe<ConceptCreateManyInput>;
  goalLinks?: Maybe<GoalLinkCreateManyWithoutWorkspaceInput>;
  participants?: Maybe<WorkspaceParticipantCreateManyWithoutWorkspaceInput>;
  tokens?: Maybe<WorkspaceTokenCreateManyWithoutWorkspaceInput>;
  mainCourse?: Maybe<CourseCreateOneInput>;
  pointGroups?: Maybe<PointGroupCreateManyWithoutWorkspaceInput>;
  courseTags?: Maybe<TagCreateManyInput>;
  conceptTags?: Maybe<TagCreateManyInput>;
  goalTags?: Maybe<TagCreateManyInput>;
  createdBy?: Maybe<UserCreateOneInput>;
}

export interface ConceptCreateManyInput {
  create?: Maybe<ConceptCreateInput[] | ConceptCreateInput>;
  connect?: Maybe<ConceptWhereUniqueInput[] | ConceptWhereUniqueInput>;
}

export interface ConceptCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  level?: Maybe<ConceptLevel>;
  position?: Maybe<String>;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  tags?: Maybe<TagCreateManyInput>;
  count?: Maybe<Int>;
  sourceConcept?: Maybe<ConceptCreateOneWithoutClonesInput>;
  clones?: Maybe<ConceptCreateManyWithoutSourceConceptInput>;
  sourceCommon?: Maybe<ConceptCreateOneWithoutCommonClonesInput>;
  commonClones?: Maybe<ConceptCreateManyWithoutSourceCommonInput>;
  linksFromConcept?: Maybe<ConceptLinkCreateManyWithoutFromInput>;
  linksToConcept?: Maybe<ConceptLinkCreateManyWithoutToInput>;
  course?: Maybe<CourseCreateOneWithoutConceptsInput>;
  workspace: WorkspaceCreateOneWithoutConceptsInput;
  createdBy: UserCreateOneInput;
}

export interface ConceptLinkCreateManyWithoutToInput {
  create?: Maybe<
    ConceptLinkCreateWithoutToInput[] | ConceptLinkCreateWithoutToInput
  >;
  connect?: Maybe<ConceptLinkWhereUniqueInput[] | ConceptLinkWhereUniqueInput>;
}

export interface ConceptLinkCreateWithoutToInput {
  id?: Maybe<ID_Input>;
  from: ConceptCreateOneWithoutLinksFromConceptInput;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  weight?: Maybe<Int>;
  count?: Maybe<Int>;
  text?: Maybe<String>;
  level?: Maybe<PrerequisiteLevel>;
  workspace: WorkspaceCreateOneWithoutConceptLinksInput;
  createdBy: UserCreateOneInput;
}

export interface ConceptCreateOneWithoutLinksFromConceptInput {
  create?: Maybe<ConceptCreateWithoutLinksFromConceptInput>;
  connect?: Maybe<ConceptWhereUniqueInput>;
}

export interface ConceptCreateWithoutLinksFromConceptInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  level?: Maybe<ConceptLevel>;
  position?: Maybe<String>;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  tags?: Maybe<TagCreateManyInput>;
  count?: Maybe<Int>;
  sourceConcept?: Maybe<ConceptCreateOneWithoutClonesInput>;
  clones?: Maybe<ConceptCreateManyWithoutSourceConceptInput>;
  sourceCommon?: Maybe<ConceptCreateOneWithoutCommonClonesInput>;
  commonClones?: Maybe<ConceptCreateManyWithoutSourceCommonInput>;
  linksToConcept?: Maybe<ConceptLinkCreateManyWithoutToInput>;
  course?: Maybe<CourseCreateOneWithoutConceptsInput>;
  workspace: WorkspaceCreateOneWithoutConceptsInput;
  createdBy: UserCreateOneInput;
}

export interface WorkspaceCreateOneWithoutConceptsInput {
  create?: Maybe<WorkspaceCreateWithoutConceptsInput>;
  connect?: Maybe<WorkspaceWhereUniqueInput>;
}

export interface WorkspaceCreateWithoutConceptsInput {
  id?: Maybe<ID_Input>;
  name: String;
  sourceProject?: Maybe<ProjectCreateOneWithoutWorkspacesInput>;
  sourceTemplate?: Maybe<WorkspaceCreateOneWithoutClonesInput>;
  asMerge?: Maybe<ProjectCreateOneWithoutMergesInput>;
  asTemplate?: Maybe<ProjectCreateOneWithoutTemplatesInput>;
  clones?: Maybe<WorkspaceCreateManyWithoutSourceTemplateInput>;
  courses?: Maybe<CourseCreateManyWithoutWorkspaceInput>;
  courseOrder?: Maybe<WorkspaceCreatecourseOrderInput>;
  commonConcepts?: Maybe<ConceptCreateManyInput>;
  conceptLinks?: Maybe<ConceptLinkCreateManyWithoutWorkspaceInput>;
  courseLinks?: Maybe<CourseLinkCreateManyWithoutWorkspaceInput>;
  goals?: Maybe<ConceptCreateManyInput>;
  goalLinks?: Maybe<GoalLinkCreateManyWithoutWorkspaceInput>;
  participants?: Maybe<WorkspaceParticipantCreateManyWithoutWorkspaceInput>;
  tokens?: Maybe<WorkspaceTokenCreateManyWithoutWorkspaceInput>;
  mainCourse?: Maybe<CourseCreateOneInput>;
  pointGroups?: Maybe<PointGroupCreateManyWithoutWorkspaceInput>;
  courseTags?: Maybe<TagCreateManyInput>;
  conceptTags?: Maybe<TagCreateManyInput>;
  goalTags?: Maybe<TagCreateManyInput>;
  createdBy?: Maybe<UserCreateOneInput>;
}

export interface ConceptLinkCreateManyWithoutWorkspaceInput {
  create?: Maybe<
    | ConceptLinkCreateWithoutWorkspaceInput[]
    | ConceptLinkCreateWithoutWorkspaceInput
  >;
  connect?: Maybe<ConceptLinkWhereUniqueInput[] | ConceptLinkWhereUniqueInput>;
}

export interface ConceptLinkCreateWithoutWorkspaceInput {
  id?: Maybe<ID_Input>;
  from: ConceptCreateOneWithoutLinksFromConceptInput;
  to: ConceptCreateOneWithoutLinksToConceptInput;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  weight?: Maybe<Int>;
  count?: Maybe<Int>;
  text?: Maybe<String>;
  level?: Maybe<PrerequisiteLevel>;
  createdBy: UserCreateOneInput;
}

export interface CourseLinkCreateManyWithoutWorkspaceInput {
  create?: Maybe<
    | CourseLinkCreateWithoutWorkspaceInput[]
    | CourseLinkCreateWithoutWorkspaceInput
  >;
  connect?: Maybe<CourseLinkWhereUniqueInput[] | CourseLinkWhereUniqueInput>;
}

export interface CourseLinkCreateWithoutWorkspaceInput {
  id?: Maybe<ID_Input>;
  from: CourseCreateOneWithoutLinksFromCourseInput;
  to: CourseCreateOneWithoutLinksToCourseInput;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  weight?: Maybe<Int>;
  count?: Maybe<Int>;
  text?: Maybe<String>;
  createdBy: UserCreateOneInput;
}

export interface GoalLinkCreateManyWithoutWorkspaceInput {
  create?: Maybe<
    GoalLinkCreateWithoutWorkspaceInput[] | GoalLinkCreateWithoutWorkspaceInput
  >;
  connect?: Maybe<GoalLinkWhereUniqueInput[] | GoalLinkWhereUniqueInput>;
}

export interface GoalLinkCreateWithoutWorkspaceInput {
  id?: Maybe<ID_Input>;
  course: CourseCreateOneWithoutGoalLinksInput;
  goal: ConceptCreateOneInput;
  text?: Maybe<String>;
  createdBy: UserCreateOneInput;
}

export interface CourseCreateOneWithoutGoalLinksInput {
  create?: Maybe<CourseCreateWithoutGoalLinksInput>;
  connect?: Maybe<CourseWhereUniqueInput>;
}

export interface CourseCreateWithoutGoalLinksInput {
  id?: Maybe<ID_Input>;
  name: String;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  tags?: Maybe<TagCreateManyInput>;
  sourceCourse?: Maybe<CourseCreateOneWithoutClonesInput>;
  clones?: Maybe<CourseCreateManyWithoutSourceCourseInput>;
  linksFromCourse?: Maybe<CourseLinkCreateManyWithoutFromInput>;
  linksToCourse?: Maybe<CourseLinkCreateManyWithoutToInput>;
  workspace: WorkspaceCreateOneWithoutCoursesInput;
  concepts?: Maybe<ConceptCreateManyWithoutCourseInput>;
  conceptOrder?: Maybe<CourseCreateconceptOrderInput>;
  objectiveOrder?: Maybe<CourseCreateobjectiveOrderInput>;
  createdBy: UserCreateOneInput;
}

export interface ConceptCreateManyWithoutCourseInput {
  create?: Maybe<
    ConceptCreateWithoutCourseInput[] | ConceptCreateWithoutCourseInput
  >;
  connect?: Maybe<ConceptWhereUniqueInput[] | ConceptWhereUniqueInput>;
}

export interface ConceptCreateWithoutCourseInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  level?: Maybe<ConceptLevel>;
  position?: Maybe<String>;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  tags?: Maybe<TagCreateManyInput>;
  count?: Maybe<Int>;
  sourceConcept?: Maybe<ConceptCreateOneWithoutClonesInput>;
  clones?: Maybe<ConceptCreateManyWithoutSourceConceptInput>;
  sourceCommon?: Maybe<ConceptCreateOneWithoutCommonClonesInput>;
  commonClones?: Maybe<ConceptCreateManyWithoutSourceCommonInput>;
  linksFromConcept?: Maybe<ConceptLinkCreateManyWithoutFromInput>;
  linksToConcept?: Maybe<ConceptLinkCreateManyWithoutToInput>;
  workspace: WorkspaceCreateOneWithoutConceptsInput;
  createdBy: UserCreateOneInput;
}

export interface ConceptCreateOneInput {
  create?: Maybe<ConceptCreateInput>;
  connect?: Maybe<ConceptWhereUniqueInput>;
}

export interface WorkspaceParticipantCreateManyWithoutWorkspaceInput {
  create?: Maybe<
    | WorkspaceParticipantCreateWithoutWorkspaceInput[]
    | WorkspaceParticipantCreateWithoutWorkspaceInput
  >;
  connect?: Maybe<
    | WorkspaceParticipantWhereUniqueInput[]
    | WorkspaceParticipantWhereUniqueInput
  >;
}

export interface WorkspaceParticipantCreateWithoutWorkspaceInput {
  id?: Maybe<ID_Input>;
  privilege: Privilege;
  token?: Maybe<WorkspaceTokenCreateOneWithoutParticipantsInput>;
  user: UserCreateOneWithoutWorkspaceParticipationsInput;
}

export interface WorkspaceTokenCreateOneWithoutParticipantsInput {
  create?: Maybe<WorkspaceTokenCreateWithoutParticipantsInput>;
  connect?: Maybe<WorkspaceTokenWhereUniqueInput>;
}

export interface WorkspaceTokenCreateWithoutParticipantsInput {
  id?: Maybe<ID_Input>;
  privilege: Privilege;
  revoked: Boolean;
  workspace: WorkspaceCreateOneWithoutTokensInput;
}

export interface WorkspaceCreateOneWithoutTokensInput {
  create?: Maybe<WorkspaceCreateWithoutTokensInput>;
  connect?: Maybe<WorkspaceWhereUniqueInput>;
}

export interface WorkspaceCreateWithoutTokensInput {
  id?: Maybe<ID_Input>;
  name: String;
  sourceProject?: Maybe<ProjectCreateOneWithoutWorkspacesInput>;
  sourceTemplate?: Maybe<WorkspaceCreateOneWithoutClonesInput>;
  asMerge?: Maybe<ProjectCreateOneWithoutMergesInput>;
  asTemplate?: Maybe<ProjectCreateOneWithoutTemplatesInput>;
  clones?: Maybe<WorkspaceCreateManyWithoutSourceTemplateInput>;
  courses?: Maybe<CourseCreateManyWithoutWorkspaceInput>;
  courseOrder?: Maybe<WorkspaceCreatecourseOrderInput>;
  concepts?: Maybe<ConceptCreateManyWithoutWorkspaceInput>;
  commonConcepts?: Maybe<ConceptCreateManyInput>;
  conceptLinks?: Maybe<ConceptLinkCreateManyWithoutWorkspaceInput>;
  courseLinks?: Maybe<CourseLinkCreateManyWithoutWorkspaceInput>;
  goals?: Maybe<ConceptCreateManyInput>;
  goalLinks?: Maybe<GoalLinkCreateManyWithoutWorkspaceInput>;
  participants?: Maybe<WorkspaceParticipantCreateManyWithoutWorkspaceInput>;
  mainCourse?: Maybe<CourseCreateOneInput>;
  pointGroups?: Maybe<PointGroupCreateManyWithoutWorkspaceInput>;
  courseTags?: Maybe<TagCreateManyInput>;
  conceptTags?: Maybe<TagCreateManyInput>;
  goalTags?: Maybe<TagCreateManyInput>;
  createdBy?: Maybe<UserCreateOneInput>;
}

export interface CourseCreateOneInput {
  create?: Maybe<CourseCreateInput>;
  connect?: Maybe<CourseWhereUniqueInput>;
}

export interface CourseCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  tags?: Maybe<TagCreateManyInput>;
  sourceCourse?: Maybe<CourseCreateOneWithoutClonesInput>;
  clones?: Maybe<CourseCreateManyWithoutSourceCourseInput>;
  linksFromCourse?: Maybe<CourseLinkCreateManyWithoutFromInput>;
  linksToCourse?: Maybe<CourseLinkCreateManyWithoutToInput>;
  workspace: WorkspaceCreateOneWithoutCoursesInput;
  concepts?: Maybe<ConceptCreateManyWithoutCourseInput>;
  conceptOrder?: Maybe<CourseCreateconceptOrderInput>;
  objectiveOrder?: Maybe<CourseCreateobjectiveOrderInput>;
  createdBy: UserCreateOneInput;
  goalLinks?: Maybe<GoalLinkCreateManyWithoutCourseInput>;
}

export interface GoalLinkCreateManyWithoutCourseInput {
  create?: Maybe<
    GoalLinkCreateWithoutCourseInput[] | GoalLinkCreateWithoutCourseInput
  >;
  connect?: Maybe<GoalLinkWhereUniqueInput[] | GoalLinkWhereUniqueInput>;
}

export interface GoalLinkCreateWithoutCourseInput {
  id?: Maybe<ID_Input>;
  goal: ConceptCreateOneInput;
  workspace: WorkspaceCreateOneWithoutGoalLinksInput;
  text?: Maybe<String>;
  createdBy: UserCreateOneInput;
}

export interface WorkspaceCreateOneWithoutGoalLinksInput {
  create?: Maybe<WorkspaceCreateWithoutGoalLinksInput>;
  connect?: Maybe<WorkspaceWhereUniqueInput>;
}

export interface WorkspaceCreateWithoutGoalLinksInput {
  id?: Maybe<ID_Input>;
  name: String;
  sourceProject?: Maybe<ProjectCreateOneWithoutWorkspacesInput>;
  sourceTemplate?: Maybe<WorkspaceCreateOneWithoutClonesInput>;
  asMerge?: Maybe<ProjectCreateOneWithoutMergesInput>;
  asTemplate?: Maybe<ProjectCreateOneWithoutTemplatesInput>;
  clones?: Maybe<WorkspaceCreateManyWithoutSourceTemplateInput>;
  courses?: Maybe<CourseCreateManyWithoutWorkspaceInput>;
  courseOrder?: Maybe<WorkspaceCreatecourseOrderInput>;
  concepts?: Maybe<ConceptCreateManyWithoutWorkspaceInput>;
  commonConcepts?: Maybe<ConceptCreateManyInput>;
  conceptLinks?: Maybe<ConceptLinkCreateManyWithoutWorkspaceInput>;
  courseLinks?: Maybe<CourseLinkCreateManyWithoutWorkspaceInput>;
  goals?: Maybe<ConceptCreateManyInput>;
  participants?: Maybe<WorkspaceParticipantCreateManyWithoutWorkspaceInput>;
  tokens?: Maybe<WorkspaceTokenCreateManyWithoutWorkspaceInput>;
  mainCourse?: Maybe<CourseCreateOneInput>;
  pointGroups?: Maybe<PointGroupCreateManyWithoutWorkspaceInput>;
  courseTags?: Maybe<TagCreateManyInput>;
  conceptTags?: Maybe<TagCreateManyInput>;
  goalTags?: Maybe<TagCreateManyInput>;
  createdBy?: Maybe<UserCreateOneInput>;
}

export interface WorkspaceTokenCreateManyWithoutWorkspaceInput {
  create?: Maybe<
    | WorkspaceTokenCreateWithoutWorkspaceInput[]
    | WorkspaceTokenCreateWithoutWorkspaceInput
  >;
  connect?: Maybe<
    WorkspaceTokenWhereUniqueInput[] | WorkspaceTokenWhereUniqueInput
  >;
}

export interface WorkspaceTokenCreateWithoutWorkspaceInput {
  id?: Maybe<ID_Input>;
  privilege: Privilege;
  revoked: Boolean;
  participants?: Maybe<WorkspaceParticipantCreateManyWithoutTokenInput>;
}

export interface WorkspaceParticipantCreateManyWithoutTokenInput {
  create?: Maybe<
    | WorkspaceParticipantCreateWithoutTokenInput[]
    | WorkspaceParticipantCreateWithoutTokenInput
  >;
  connect?: Maybe<
    | WorkspaceParticipantWhereUniqueInput[]
    | WorkspaceParticipantWhereUniqueInput
  >;
}

export interface WorkspaceParticipantCreateWithoutTokenInput {
  id?: Maybe<ID_Input>;
  privilege: Privilege;
  workspace: WorkspaceCreateOneWithoutParticipantsInput;
  user: UserCreateOneWithoutWorkspaceParticipationsInput;
}

export interface UserCreateOneWithoutWorkspaceParticipationsInput {
  create?: Maybe<UserCreateWithoutWorkspaceParticipationsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutWorkspaceParticipationsInput {
  id?: Maybe<ID_Input>;
  tmcId?: Maybe<Int>;
  hakaId?: Maybe<String>;
  googleId?: Maybe<String>;
  role: Role;
  deactivated?: Maybe<Boolean>;
  tokens?: Maybe<AccessTokenCreateManyWithoutUserInput>;
  projectParticipations?: Maybe<ProjectParticipantCreateManyWithoutUserInput>;
  seenGuides?: Maybe<UserCreateseenGuidesInput>;
}

export interface UserCreateseenGuidesInput {
  set?: Maybe<String[] | String>;
}

export interface PointGroupCreateManyWithoutWorkspaceInput {
  create?: Maybe<
    | PointGroupCreateWithoutWorkspaceInput[]
    | PointGroupCreateWithoutWorkspaceInput
  >;
  connect?: Maybe<PointGroupWhereUniqueInput[] | PointGroupWhereUniqueInput>;
}

export interface PointGroupCreateWithoutWorkspaceInput {
  id?: Maybe<ID_Input>;
  name: String;
  startDate: DateTimeInput;
  endDate: DateTimeInput;
  maxPoints?: Maybe<Int>;
  pointsPerConcept?: Maybe<Float>;
  course: CourseCreateOneInput;
  completions?: Maybe<CompletionCreateManyWithoutPointGroupInput>;
  createdBy?: Maybe<UserCreateOneInput>;
}

export interface CompletionCreateManyWithoutPointGroupInput {
  create?: Maybe<
    | CompletionCreateWithoutPointGroupInput[]
    | CompletionCreateWithoutPointGroupInput
  >;
  connect?: Maybe<CompletionWhereUniqueInput[] | CompletionWhereUniqueInput>;
}

export interface CompletionCreateWithoutPointGroupInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneInput;
  conceptAmount?: Maybe<Int>;
}

export interface WorkspaceCreateOneWithoutConceptLinksInput {
  create?: Maybe<WorkspaceCreateWithoutConceptLinksInput>;
  connect?: Maybe<WorkspaceWhereUniqueInput>;
}

export interface WorkspaceCreateWithoutConceptLinksInput {
  id?: Maybe<ID_Input>;
  name: String;
  sourceProject?: Maybe<ProjectCreateOneWithoutWorkspacesInput>;
  sourceTemplate?: Maybe<WorkspaceCreateOneWithoutClonesInput>;
  asMerge?: Maybe<ProjectCreateOneWithoutMergesInput>;
  asTemplate?: Maybe<ProjectCreateOneWithoutTemplatesInput>;
  clones?: Maybe<WorkspaceCreateManyWithoutSourceTemplateInput>;
  courses?: Maybe<CourseCreateManyWithoutWorkspaceInput>;
  courseOrder?: Maybe<WorkspaceCreatecourseOrderInput>;
  concepts?: Maybe<ConceptCreateManyWithoutWorkspaceInput>;
  commonConcepts?: Maybe<ConceptCreateManyInput>;
  courseLinks?: Maybe<CourseLinkCreateManyWithoutWorkspaceInput>;
  goals?: Maybe<ConceptCreateManyInput>;
  goalLinks?: Maybe<GoalLinkCreateManyWithoutWorkspaceInput>;
  participants?: Maybe<WorkspaceParticipantCreateManyWithoutWorkspaceInput>;
  tokens?: Maybe<WorkspaceTokenCreateManyWithoutWorkspaceInput>;
  mainCourse?: Maybe<CourseCreateOneInput>;
  pointGroups?: Maybe<PointGroupCreateManyWithoutWorkspaceInput>;
  courseTags?: Maybe<TagCreateManyInput>;
  conceptTags?: Maybe<TagCreateManyInput>;
  goalTags?: Maybe<TagCreateManyInput>;
  createdBy?: Maybe<UserCreateOneInput>;
}

export interface ProjectTokenCreateManyWithoutProjectInput {
  create?: Maybe<
    | ProjectTokenCreateWithoutProjectInput[]
    | ProjectTokenCreateWithoutProjectInput
  >;
  connect?: Maybe<
    ProjectTokenWhereUniqueInput[] | ProjectTokenWhereUniqueInput
  >;
}

export interface ProjectTokenCreateWithoutProjectInput {
  id?: Maybe<ID_Input>;
  privilege: Privilege;
  revoked: Boolean;
  participants?: Maybe<ProjectParticipantCreateManyWithoutTokenInput>;
}

export interface ProjectParticipantCreateManyWithoutTokenInput {
  create?: Maybe<
    | ProjectParticipantCreateWithoutTokenInput[]
    | ProjectParticipantCreateWithoutTokenInput
  >;
  connect?: Maybe<
    ProjectParticipantWhereUniqueInput[] | ProjectParticipantWhereUniqueInput
  >;
}

export interface ProjectParticipantCreateWithoutTokenInput {
  id?: Maybe<ID_Input>;
  privilege: Privilege;
  project: ProjectCreateOneWithoutParticipantsInput;
  user: UserCreateOneWithoutProjectParticipationsInput;
}

export interface UserCreateOneWithoutProjectParticipationsInput {
  create?: Maybe<UserCreateWithoutProjectParticipationsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutProjectParticipationsInput {
  id?: Maybe<ID_Input>;
  tmcId?: Maybe<Int>;
  hakaId?: Maybe<String>;
  googleId?: Maybe<String>;
  role: Role;
  deactivated?: Maybe<Boolean>;
  tokens?: Maybe<AccessTokenCreateManyWithoutUserInput>;
  workspaceParticipations?: Maybe<
    WorkspaceParticipantCreateManyWithoutUserInput
  >;
  seenGuides?: Maybe<UserCreateseenGuidesInput>;
}

export interface ProjectTokenCreateOneWithoutParticipantsInput {
  create?: Maybe<ProjectTokenCreateWithoutParticipantsInput>;
  connect?: Maybe<ProjectTokenWhereUniqueInput>;
}

export interface ProjectTokenCreateWithoutParticipantsInput {
  id?: Maybe<ID_Input>;
  privilege: Privilege;
  revoked: Boolean;
  project: ProjectCreateOneWithoutTokensInput;
}

export interface ProjectCreateOneWithoutTokensInput {
  create?: Maybe<ProjectCreateWithoutTokensInput>;
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface ProjectCreateWithoutTokensInput {
  id?: Maybe<ID_Input>;
  name: String;
  workspaces?: Maybe<WorkspaceCreateManyWithoutSourceProjectInput>;
  activeTemplate?: Maybe<WorkspaceCreateOneInput>;
  templates?: Maybe<WorkspaceCreateManyWithoutAsTemplateInput>;
  merges?: Maybe<WorkspaceCreateManyWithoutAsMergeInput>;
  participants?: Maybe<ProjectParticipantCreateManyWithoutProjectInput>;
  createdBy?: Maybe<UserCreateOneInput>;
}

export interface ProjectParticipantCreateManyWithoutProjectInput {
  create?: Maybe<
    | ProjectParticipantCreateWithoutProjectInput[]
    | ProjectParticipantCreateWithoutProjectInput
  >;
  connect?: Maybe<
    ProjectParticipantWhereUniqueInput[] | ProjectParticipantWhereUniqueInput
  >;
}

export interface ProjectParticipantCreateWithoutProjectInput {
  id?: Maybe<ID_Input>;
  privilege: Privilege;
  token?: Maybe<ProjectTokenCreateOneWithoutParticipantsInput>;
  user: UserCreateOneWithoutProjectParticipationsInput;
}

export interface WorkspaceCreateOneWithoutCourseLinksInput {
  create?: Maybe<WorkspaceCreateWithoutCourseLinksInput>;
  connect?: Maybe<WorkspaceWhereUniqueInput>;
}

export interface WorkspaceCreateWithoutCourseLinksInput {
  id?: Maybe<ID_Input>;
  name: String;
  sourceProject?: Maybe<ProjectCreateOneWithoutWorkspacesInput>;
  sourceTemplate?: Maybe<WorkspaceCreateOneWithoutClonesInput>;
  asMerge?: Maybe<ProjectCreateOneWithoutMergesInput>;
  asTemplate?: Maybe<ProjectCreateOneWithoutTemplatesInput>;
  clones?: Maybe<WorkspaceCreateManyWithoutSourceTemplateInput>;
  courses?: Maybe<CourseCreateManyWithoutWorkspaceInput>;
  courseOrder?: Maybe<WorkspaceCreatecourseOrderInput>;
  concepts?: Maybe<ConceptCreateManyWithoutWorkspaceInput>;
  commonConcepts?: Maybe<ConceptCreateManyInput>;
  conceptLinks?: Maybe<ConceptLinkCreateManyWithoutWorkspaceInput>;
  goals?: Maybe<ConceptCreateManyInput>;
  goalLinks?: Maybe<GoalLinkCreateManyWithoutWorkspaceInput>;
  participants?: Maybe<WorkspaceParticipantCreateManyWithoutWorkspaceInput>;
  tokens?: Maybe<WorkspaceTokenCreateManyWithoutWorkspaceInput>;
  mainCourse?: Maybe<CourseCreateOneInput>;
  pointGroups?: Maybe<PointGroupCreateManyWithoutWorkspaceInput>;
  courseTags?: Maybe<TagCreateManyInput>;
  conceptTags?: Maybe<TagCreateManyInput>;
  goalTags?: Maybe<TagCreateManyInput>;
  createdBy?: Maybe<UserCreateOneInput>;
}

export interface AccessTokenUpdateInput {
  token?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutTokensInput>;
  lastSeenAgent?: Maybe<String>;
  lastSeenAddress?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutTokensInput {
  create?: Maybe<UserCreateWithoutTokensInput>;
  update?: Maybe<UserUpdateWithoutTokensDataInput>;
  upsert?: Maybe<UserUpsertWithoutTokensInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutTokensDataInput {
  tmcId?: Maybe<Int>;
  hakaId?: Maybe<String>;
  googleId?: Maybe<String>;
  role?: Maybe<Role>;
  deactivated?: Maybe<Boolean>;
  workspaceParticipations?: Maybe<
    WorkspaceParticipantUpdateManyWithoutUserInput
  >;
  projectParticipations?: Maybe<ProjectParticipantUpdateManyWithoutUserInput>;
  seenGuides?: Maybe<UserUpdateseenGuidesInput>;
}

export interface WorkspaceParticipantUpdateManyWithoutUserInput {
  create?: Maybe<
    | WorkspaceParticipantCreateWithoutUserInput[]
    | WorkspaceParticipantCreateWithoutUserInput
  >;
  delete?: Maybe<
    | WorkspaceParticipantWhereUniqueInput[]
    | WorkspaceParticipantWhereUniqueInput
  >;
  connect?: Maybe<
    | WorkspaceParticipantWhereUniqueInput[]
    | WorkspaceParticipantWhereUniqueInput
  >;
  set?: Maybe<
    | WorkspaceParticipantWhereUniqueInput[]
    | WorkspaceParticipantWhereUniqueInput
  >;
  disconnect?: Maybe<
    | WorkspaceParticipantWhereUniqueInput[]
    | WorkspaceParticipantWhereUniqueInput
  >;
  update?: Maybe<
    | WorkspaceParticipantUpdateWithWhereUniqueWithoutUserInput[]
    | WorkspaceParticipantUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | WorkspaceParticipantUpsertWithWhereUniqueWithoutUserInput[]
    | WorkspaceParticipantUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<
    | WorkspaceParticipantScalarWhereInput[]
    | WorkspaceParticipantScalarWhereInput
  >;
  updateMany?: Maybe<
    | WorkspaceParticipantUpdateManyWithWhereNestedInput[]
    | WorkspaceParticipantUpdateManyWithWhereNestedInput
  >;
}

export interface WorkspaceParticipantUpdateWithWhereUniqueWithoutUserInput {
  where: WorkspaceParticipantWhereUniqueInput;
  data: WorkspaceParticipantUpdateWithoutUserDataInput;
}

export interface WorkspaceParticipantUpdateWithoutUserDataInput {
  privilege?: Maybe<Privilege>;
  workspace?: Maybe<WorkspaceUpdateOneRequiredWithoutParticipantsInput>;
  token?: Maybe<WorkspaceTokenUpdateOneWithoutParticipantsInput>;
}

export interface WorkspaceUpdateOneRequiredWithoutParticipantsInput {
  create?: Maybe<WorkspaceCreateWithoutParticipantsInput>;
  update?: Maybe<WorkspaceUpdateWithoutParticipantsDataInput>;
  upsert?: Maybe<WorkspaceUpsertWithoutParticipantsInput>;
  connect?: Maybe<WorkspaceWhereUniqueInput>;
}

export interface WorkspaceUpdateWithoutParticipantsDataInput {
  name?: Maybe<String>;
  sourceProject?: Maybe<ProjectUpdateOneWithoutWorkspacesInput>;
  sourceTemplate?: Maybe<WorkspaceUpdateOneWithoutClonesInput>;
  asMerge?: Maybe<ProjectUpdateOneWithoutMergesInput>;
  asTemplate?: Maybe<ProjectUpdateOneWithoutTemplatesInput>;
  clones?: Maybe<WorkspaceUpdateManyWithoutSourceTemplateInput>;
  courses?: Maybe<CourseUpdateManyWithoutWorkspaceInput>;
  courseOrder?: Maybe<WorkspaceUpdatecourseOrderInput>;
  concepts?: Maybe<ConceptUpdateManyWithoutWorkspaceInput>;
  commonConcepts?: Maybe<ConceptUpdateManyInput>;
  conceptLinks?: Maybe<ConceptLinkUpdateManyWithoutWorkspaceInput>;
  courseLinks?: Maybe<CourseLinkUpdateManyWithoutWorkspaceInput>;
  goals?: Maybe<ConceptUpdateManyInput>;
  goalLinks?: Maybe<GoalLinkUpdateManyWithoutWorkspaceInput>;
  tokens?: Maybe<WorkspaceTokenUpdateManyWithoutWorkspaceInput>;
  mainCourse?: Maybe<CourseUpdateOneInput>;
  pointGroups?: Maybe<PointGroupUpdateManyWithoutWorkspaceInput>;
  courseTags?: Maybe<TagUpdateManyInput>;
  conceptTags?: Maybe<TagUpdateManyInput>;
  goalTags?: Maybe<TagUpdateManyInput>;
  createdBy?: Maybe<UserUpdateOneInput>;
}

export interface ProjectUpdateOneWithoutWorkspacesInput {
  create?: Maybe<ProjectCreateWithoutWorkspacesInput>;
  update?: Maybe<ProjectUpdateWithoutWorkspacesDataInput>;
  upsert?: Maybe<ProjectUpsertWithoutWorkspacesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface ProjectUpdateWithoutWorkspacesDataInput {
  name?: Maybe<String>;
  activeTemplate?: Maybe<WorkspaceUpdateOneInput>;
  templates?: Maybe<WorkspaceUpdateManyWithoutAsTemplateInput>;
  merges?: Maybe<WorkspaceUpdateManyWithoutAsMergeInput>;
  participants?: Maybe<ProjectParticipantUpdateManyWithoutProjectInput>;
  tokens?: Maybe<ProjectTokenUpdateManyWithoutProjectInput>;
  createdBy?: Maybe<UserUpdateOneInput>;
}

export interface WorkspaceUpdateOneInput {
  create?: Maybe<WorkspaceCreateInput>;
  update?: Maybe<WorkspaceUpdateDataInput>;
  upsert?: Maybe<WorkspaceUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<WorkspaceWhereUniqueInput>;
}

export interface WorkspaceUpdateDataInput {
  name?: Maybe<String>;
  sourceProject?: Maybe<ProjectUpdateOneWithoutWorkspacesInput>;
  sourceTemplate?: Maybe<WorkspaceUpdateOneWithoutClonesInput>;
  asMerge?: Maybe<ProjectUpdateOneWithoutMergesInput>;
  asTemplate?: Maybe<ProjectUpdateOneWithoutTemplatesInput>;
  clones?: Maybe<WorkspaceUpdateManyWithoutSourceTemplateInput>;
  courses?: Maybe<CourseUpdateManyWithoutWorkspaceInput>;
  courseOrder?: Maybe<WorkspaceUpdatecourseOrderInput>;
  concepts?: Maybe<ConceptUpdateManyWithoutWorkspaceInput>;
  commonConcepts?: Maybe<ConceptUpdateManyInput>;
  conceptLinks?: Maybe<ConceptLinkUpdateManyWithoutWorkspaceInput>;
  courseLinks?: Maybe<CourseLinkUpdateManyWithoutWorkspaceInput>;
  goals?: Maybe<ConceptUpdateManyInput>;
  goalLinks?: Maybe<GoalLinkUpdateManyWithoutWorkspaceInput>;
  participants?: Maybe<WorkspaceParticipantUpdateManyWithoutWorkspaceInput>;
  tokens?: Maybe<WorkspaceTokenUpdateManyWithoutWorkspaceInput>;
  mainCourse?: Maybe<CourseUpdateOneInput>;
  pointGroups?: Maybe<PointGroupUpdateManyWithoutWorkspaceInput>;
  courseTags?: Maybe<TagUpdateManyInput>;
  conceptTags?: Maybe<TagUpdateManyInput>;
  goalTags?: Maybe<TagUpdateManyInput>;
  createdBy?: Maybe<UserUpdateOneInput>;
}

export interface WorkspaceUpdateOneWithoutClonesInput {
  create?: Maybe<WorkspaceCreateWithoutClonesInput>;
  update?: Maybe<WorkspaceUpdateWithoutClonesDataInput>;
  upsert?: Maybe<WorkspaceUpsertWithoutClonesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<WorkspaceWhereUniqueInput>;
}

export interface WorkspaceUpdateWithoutClonesDataInput {
  name?: Maybe<String>;
  sourceProject?: Maybe<ProjectUpdateOneWithoutWorkspacesInput>;
  sourceTemplate?: Maybe<WorkspaceUpdateOneWithoutClonesInput>;
  asMerge?: Maybe<ProjectUpdateOneWithoutMergesInput>;
  asTemplate?: Maybe<ProjectUpdateOneWithoutTemplatesInput>;
  courses?: Maybe<CourseUpdateManyWithoutWorkspaceInput>;
  courseOrder?: Maybe<WorkspaceUpdatecourseOrderInput>;
  concepts?: Maybe<ConceptUpdateManyWithoutWorkspaceInput>;
  commonConcepts?: Maybe<ConceptUpdateManyInput>;
  conceptLinks?: Maybe<ConceptLinkUpdateManyWithoutWorkspaceInput>;
  courseLinks?: Maybe<CourseLinkUpdateManyWithoutWorkspaceInput>;
  goals?: Maybe<ConceptUpdateManyInput>;
  goalLinks?: Maybe<GoalLinkUpdateManyWithoutWorkspaceInput>;
  participants?: Maybe<WorkspaceParticipantUpdateManyWithoutWorkspaceInput>;
  tokens?: Maybe<WorkspaceTokenUpdateManyWithoutWorkspaceInput>;
  mainCourse?: Maybe<CourseUpdateOneInput>;
  pointGroups?: Maybe<PointGroupUpdateManyWithoutWorkspaceInput>;
  courseTags?: Maybe<TagUpdateManyInput>;
  conceptTags?: Maybe<TagUpdateManyInput>;
  goalTags?: Maybe<TagUpdateManyInput>;
  createdBy?: Maybe<UserUpdateOneInput>;
}

export interface ProjectUpdateOneWithoutMergesInput {
  create?: Maybe<ProjectCreateWithoutMergesInput>;
  update?: Maybe<ProjectUpdateWithoutMergesDataInput>;
  upsert?: Maybe<ProjectUpsertWithoutMergesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface ProjectUpdateWithoutMergesDataInput {
  name?: Maybe<String>;
  workspaces?: Maybe<WorkspaceUpdateManyWithoutSourceProjectInput>;
  activeTemplate?: Maybe<WorkspaceUpdateOneInput>;
  templates?: Maybe<WorkspaceUpdateManyWithoutAsTemplateInput>;
  participants?: Maybe<ProjectParticipantUpdateManyWithoutProjectInput>;
  tokens?: Maybe<ProjectTokenUpdateManyWithoutProjectInput>;
  createdBy?: Maybe<UserUpdateOneInput>;
}

export interface WorkspaceUpdateManyWithoutSourceProjectInput {
  create?: Maybe<
    | WorkspaceCreateWithoutSourceProjectInput[]
    | WorkspaceCreateWithoutSourceProjectInput
  >;
  delete?: Maybe<WorkspaceWhereUniqueInput[] | WorkspaceWhereUniqueInput>;
  connect?: Maybe<WorkspaceWhereUniqueInput[] | WorkspaceWhereUniqueInput>;
  set?: Maybe<WorkspaceWhereUniqueInput[] | WorkspaceWhereUniqueInput>;
  disconnect?: Maybe<WorkspaceWhereUniqueInput[] | WorkspaceWhereUniqueInput>;
  update?: Maybe<
    | WorkspaceUpdateWithWhereUniqueWithoutSourceProjectInput[]
    | WorkspaceUpdateWithWhereUniqueWithoutSourceProjectInput
  >;
  upsert?: Maybe<
    | WorkspaceUpsertWithWhereUniqueWithoutSourceProjectInput[]
    | WorkspaceUpsertWithWhereUniqueWithoutSourceProjectInput
  >;
  deleteMany?: Maybe<WorkspaceScalarWhereInput[] | WorkspaceScalarWhereInput>;
  updateMany?: Maybe<
    | WorkspaceUpdateManyWithWhereNestedInput[]
    | WorkspaceUpdateManyWithWhereNestedInput
  >;
}

export interface WorkspaceUpdateWithWhereUniqueWithoutSourceProjectInput {
  where: WorkspaceWhereUniqueInput;
  data: WorkspaceUpdateWithoutSourceProjectDataInput;
}

export interface WorkspaceUpdateWithoutSourceProjectDataInput {
  name?: Maybe<String>;
  sourceTemplate?: Maybe<WorkspaceUpdateOneWithoutClonesInput>;
  asMerge?: Maybe<ProjectUpdateOneWithoutMergesInput>;
  asTemplate?: Maybe<ProjectUpdateOneWithoutTemplatesInput>;
  clones?: Maybe<WorkspaceUpdateManyWithoutSourceTemplateInput>;
  courses?: Maybe<CourseUpdateManyWithoutWorkspaceInput>;
  courseOrder?: Maybe<WorkspaceUpdatecourseOrderInput>;
  concepts?: Maybe<ConceptUpdateManyWithoutWorkspaceInput>;
  commonConcepts?: Maybe<ConceptUpdateManyInput>;
  conceptLinks?: Maybe<ConceptLinkUpdateManyWithoutWorkspaceInput>;
  courseLinks?: Maybe<CourseLinkUpdateManyWithoutWorkspaceInput>;
  goals?: Maybe<ConceptUpdateManyInput>;
  goalLinks?: Maybe<GoalLinkUpdateManyWithoutWorkspaceInput>;
  participants?: Maybe<WorkspaceParticipantUpdateManyWithoutWorkspaceInput>;
  tokens?: Maybe<WorkspaceTokenUpdateManyWithoutWorkspaceInput>;
  mainCourse?: Maybe<CourseUpdateOneInput>;
  pointGroups?: Maybe<PointGroupUpdateManyWithoutWorkspaceInput>;
  courseTags?: Maybe<TagUpdateManyInput>;
  conceptTags?: Maybe<TagUpdateManyInput>;
  goalTags?: Maybe<TagUpdateManyInput>;
  createdBy?: Maybe<UserUpdateOneInput>;
}

export interface ProjectUpdateOneWithoutTemplatesInput {
  create?: Maybe<ProjectCreateWithoutTemplatesInput>;
  update?: Maybe<ProjectUpdateWithoutTemplatesDataInput>;
  upsert?: Maybe<ProjectUpsertWithoutTemplatesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface ProjectUpdateWithoutTemplatesDataInput {
  name?: Maybe<String>;
  workspaces?: Maybe<WorkspaceUpdateManyWithoutSourceProjectInput>;
  activeTemplate?: Maybe<WorkspaceUpdateOneInput>;
  merges?: Maybe<WorkspaceUpdateManyWithoutAsMergeInput>;
  participants?: Maybe<ProjectParticipantUpdateManyWithoutProjectInput>;
  tokens?: Maybe<ProjectTokenUpdateManyWithoutProjectInput>;
  createdBy?: Maybe<UserUpdateOneInput>;
}

export interface WorkspaceUpdateManyWithoutAsMergeInput {
  create?: Maybe<
    WorkspaceCreateWithoutAsMergeInput[] | WorkspaceCreateWithoutAsMergeInput
  >;
  delete?: Maybe<WorkspaceWhereUniqueInput[] | WorkspaceWhereUniqueInput>;
  connect?: Maybe<WorkspaceWhereUniqueInput[] | WorkspaceWhereUniqueInput>;
  set?: Maybe<WorkspaceWhereUniqueInput[] | WorkspaceWhereUniqueInput>;
  disconnect?: Maybe<WorkspaceWhereUniqueInput[] | WorkspaceWhereUniqueInput>;
  update?: Maybe<
    | WorkspaceUpdateWithWhereUniqueWithoutAsMergeInput[]
    | WorkspaceUpdateWithWhereUniqueWithoutAsMergeInput
  >;
  upsert?: Maybe<
    | WorkspaceUpsertWithWhereUniqueWithoutAsMergeInput[]
    | WorkspaceUpsertWithWhereUniqueWithoutAsMergeInput
  >;
  deleteMany?: Maybe<WorkspaceScalarWhereInput[] | WorkspaceScalarWhereInput>;
  updateMany?: Maybe<
    | WorkspaceUpdateManyWithWhereNestedInput[]
    | WorkspaceUpdateManyWithWhereNestedInput
  >;
}

export interface WorkspaceUpdateWithWhereUniqueWithoutAsMergeInput {
  where: WorkspaceWhereUniqueInput;
  data: WorkspaceUpdateWithoutAsMergeDataInput;
}

export interface WorkspaceUpdateWithoutAsMergeDataInput {
  name?: Maybe<String>;
  sourceProject?: Maybe<ProjectUpdateOneWithoutWorkspacesInput>;
  sourceTemplate?: Maybe<WorkspaceUpdateOneWithoutClonesInput>;
  asTemplate?: Maybe<ProjectUpdateOneWithoutTemplatesInput>;
  clones?: Maybe<WorkspaceUpdateManyWithoutSourceTemplateInput>;
  courses?: Maybe<CourseUpdateManyWithoutWorkspaceInput>;
  courseOrder?: Maybe<WorkspaceUpdatecourseOrderInput>;
  concepts?: Maybe<ConceptUpdateManyWithoutWorkspaceInput>;
  commonConcepts?: Maybe<ConceptUpdateManyInput>;
  conceptLinks?: Maybe<ConceptLinkUpdateManyWithoutWorkspaceInput>;
  courseLinks?: Maybe<CourseLinkUpdateManyWithoutWorkspaceInput>;
  goals?: Maybe<ConceptUpdateManyInput>;
  goalLinks?: Maybe<GoalLinkUpdateManyWithoutWorkspaceInput>;
  participants?: Maybe<WorkspaceParticipantUpdateManyWithoutWorkspaceInput>;
  tokens?: Maybe<WorkspaceTokenUpdateManyWithoutWorkspaceInput>;
  mainCourse?: Maybe<CourseUpdateOneInput>;
  pointGroups?: Maybe<PointGroupUpdateManyWithoutWorkspaceInput>;
  courseTags?: Maybe<TagUpdateManyInput>;
  conceptTags?: Maybe<TagUpdateManyInput>;
  goalTags?: Maybe<TagUpdateManyInput>;
  createdBy?: Maybe<UserUpdateOneInput>;
}

export interface WorkspaceUpdateManyWithoutSourceTemplateInput {
  create?: Maybe<
    | WorkspaceCreateWithoutSourceTemplateInput[]
    | WorkspaceCreateWithoutSourceTemplateInput
  >;
  delete?: Maybe<WorkspaceWhereUniqueInput[] | WorkspaceWhereUniqueInput>;
  connect?: Maybe<WorkspaceWhereUniqueInput[] | WorkspaceWhereUniqueInput>;
  set?: Maybe<WorkspaceWhereUniqueInput[] | WorkspaceWhereUniqueInput>;
  disconnect?: Maybe<WorkspaceWhereUniqueInput[] | WorkspaceWhereUniqueInput>;
  update?: Maybe<
    | WorkspaceUpdateWithWhereUniqueWithoutSourceTemplateInput[]
    | WorkspaceUpdateWithWhereUniqueWithoutSourceTemplateInput
  >;
  upsert?: Maybe<
    | WorkspaceUpsertWithWhereUniqueWithoutSourceTemplateInput[]
    | WorkspaceUpsertWithWhereUniqueWithoutSourceTemplateInput
  >;
  deleteMany?: Maybe<WorkspaceScalarWhereInput[] | WorkspaceScalarWhereInput>;
  updateMany?: Maybe<
    | WorkspaceUpdateManyWithWhereNestedInput[]
    | WorkspaceUpdateManyWithWhereNestedInput
  >;
}

export interface WorkspaceUpdateWithWhereUniqueWithoutSourceTemplateInput {
  where: WorkspaceWhereUniqueInput;
  data: WorkspaceUpdateWithoutSourceTemplateDataInput;
}

export interface WorkspaceUpdateWithoutSourceTemplateDataInput {
  name?: Maybe<String>;
  sourceProject?: Maybe<ProjectUpdateOneWithoutWorkspacesInput>;
  asMerge?: Maybe<ProjectUpdateOneWithoutMergesInput>;
  asTemplate?: Maybe<ProjectUpdateOneWithoutTemplatesInput>;
  clones?: Maybe<WorkspaceUpdateManyWithoutSourceTemplateInput>;
  courses?: Maybe<CourseUpdateManyWithoutWorkspaceInput>;
  courseOrder?: Maybe<WorkspaceUpdatecourseOrderInput>;
  concepts?: Maybe<ConceptUpdateManyWithoutWorkspaceInput>;
  commonConcepts?: Maybe<ConceptUpdateManyInput>;
  conceptLinks?: Maybe<ConceptLinkUpdateManyWithoutWorkspaceInput>;
  courseLinks?: Maybe<CourseLinkUpdateManyWithoutWorkspaceInput>;
  goals?: Maybe<ConceptUpdateManyInput>;
  goalLinks?: Maybe<GoalLinkUpdateManyWithoutWorkspaceInput>;
  participants?: Maybe<WorkspaceParticipantUpdateManyWithoutWorkspaceInput>;
  tokens?: Maybe<WorkspaceTokenUpdateManyWithoutWorkspaceInput>;
  mainCourse?: Maybe<CourseUpdateOneInput>;
  pointGroups?: Maybe<PointGroupUpdateManyWithoutWorkspaceInput>;
  courseTags?: Maybe<TagUpdateManyInput>;
  conceptTags?: Maybe<TagUpdateManyInput>;
  goalTags?: Maybe<TagUpdateManyInput>;
  createdBy?: Maybe<UserUpdateOneInput>;
}

export interface CourseUpdateManyWithoutWorkspaceInput {
  create?: Maybe<
    CourseCreateWithoutWorkspaceInput[] | CourseCreateWithoutWorkspaceInput
  >;
  delete?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
  connect?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
  set?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
  disconnect?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
  update?: Maybe<
    | CourseUpdateWithWhereUniqueWithoutWorkspaceInput[]
    | CourseUpdateWithWhereUniqueWithoutWorkspaceInput
  >;
  upsert?: Maybe<
    | CourseUpsertWithWhereUniqueWithoutWorkspaceInput[]
    | CourseUpsertWithWhereUniqueWithoutWorkspaceInput
  >;
  deleteMany?: Maybe<CourseScalarWhereInput[] | CourseScalarWhereInput>;
  updateMany?: Maybe<
    | CourseUpdateManyWithWhereNestedInput[]
    | CourseUpdateManyWithWhereNestedInput
  >;
}

export interface CourseUpdateWithWhereUniqueWithoutWorkspaceInput {
  where: CourseWhereUniqueInput;
  data: CourseUpdateWithoutWorkspaceDataInput;
}

export interface CourseUpdateWithoutWorkspaceDataInput {
  name?: Maybe<String>;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  tags?: Maybe<TagUpdateManyInput>;
  sourceCourse?: Maybe<CourseUpdateOneWithoutClonesInput>;
  clones?: Maybe<CourseUpdateManyWithoutSourceCourseInput>;
  linksFromCourse?: Maybe<CourseLinkUpdateManyWithoutFromInput>;
  linksToCourse?: Maybe<CourseLinkUpdateManyWithoutToInput>;
  concepts?: Maybe<ConceptUpdateManyWithoutCourseInput>;
  conceptOrder?: Maybe<CourseUpdateconceptOrderInput>;
  objectiveOrder?: Maybe<CourseUpdateobjectiveOrderInput>;
  createdBy?: Maybe<UserUpdateOneRequiredInput>;
  goalLinks?: Maybe<GoalLinkUpdateManyWithoutCourseInput>;
}

export interface TagUpdateManyInput {
  create?: Maybe<TagCreateInput[] | TagCreateInput>;
  update?: Maybe<
    TagUpdateWithWhereUniqueNestedInput[] | TagUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    TagUpsertWithWhereUniqueNestedInput[] | TagUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  connect?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  set?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  disconnect?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  deleteMany?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
  updateMany?: Maybe<
    TagUpdateManyWithWhereNestedInput[] | TagUpdateManyWithWhereNestedInput
  >;
}

export interface TagUpdateWithWhereUniqueNestedInput {
  where: TagWhereUniqueInput;
  data: TagUpdateDataInput;
}

export interface TagUpdateDataInput {
  name?: Maybe<String>;
  type?: Maybe<String>;
  priority?: Maybe<Int>;
}

export interface TagUpsertWithWhereUniqueNestedInput {
  where: TagWhereUniqueInput;
  update: TagUpdateDataInput;
  create: TagCreateInput;
}

export interface TagScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  priority?: Maybe<Int>;
  priority_not?: Maybe<Int>;
  priority_in?: Maybe<Int[] | Int>;
  priority_not_in?: Maybe<Int[] | Int>;
  priority_lt?: Maybe<Int>;
  priority_lte?: Maybe<Int>;
  priority_gt?: Maybe<Int>;
  priority_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
  OR?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
  NOT?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
}

export interface TagUpdateManyWithWhereNestedInput {
  where: TagScalarWhereInput;
  data: TagUpdateManyDataInput;
}

export interface TagUpdateManyDataInput {
  name?: Maybe<String>;
  type?: Maybe<String>;
  priority?: Maybe<Int>;
}

export interface CourseUpdateOneWithoutClonesInput {
  create?: Maybe<CourseCreateWithoutClonesInput>;
  update?: Maybe<CourseUpdateWithoutClonesDataInput>;
  upsert?: Maybe<CourseUpsertWithoutClonesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<CourseWhereUniqueInput>;
}

export interface CourseUpdateWithoutClonesDataInput {
  name?: Maybe<String>;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  tags?: Maybe<TagUpdateManyInput>;
  sourceCourse?: Maybe<CourseUpdateOneWithoutClonesInput>;
  linksFromCourse?: Maybe<CourseLinkUpdateManyWithoutFromInput>;
  linksToCourse?: Maybe<CourseLinkUpdateManyWithoutToInput>;
  workspace?: Maybe<WorkspaceUpdateOneRequiredWithoutCoursesInput>;
  concepts?: Maybe<ConceptUpdateManyWithoutCourseInput>;
  conceptOrder?: Maybe<CourseUpdateconceptOrderInput>;
  objectiveOrder?: Maybe<CourseUpdateobjectiveOrderInput>;
  createdBy?: Maybe<UserUpdateOneRequiredInput>;
  goalLinks?: Maybe<GoalLinkUpdateManyWithoutCourseInput>;
}

export interface CourseLinkUpdateManyWithoutFromInput {
  create?: Maybe<
    CourseLinkCreateWithoutFromInput[] | CourseLinkCreateWithoutFromInput
  >;
  delete?: Maybe<CourseLinkWhereUniqueInput[] | CourseLinkWhereUniqueInput>;
  connect?: Maybe<CourseLinkWhereUniqueInput[] | CourseLinkWhereUniqueInput>;
  set?: Maybe<CourseLinkWhereUniqueInput[] | CourseLinkWhereUniqueInput>;
  disconnect?: Maybe<CourseLinkWhereUniqueInput[] | CourseLinkWhereUniqueInput>;
  update?: Maybe<
    | CourseLinkUpdateWithWhereUniqueWithoutFromInput[]
    | CourseLinkUpdateWithWhereUniqueWithoutFromInput
  >;
  upsert?: Maybe<
    | CourseLinkUpsertWithWhereUniqueWithoutFromInput[]
    | CourseLinkUpsertWithWhereUniqueWithoutFromInput
  >;
  deleteMany?: Maybe<CourseLinkScalarWhereInput[] | CourseLinkScalarWhereInput>;
  updateMany?: Maybe<
    | CourseLinkUpdateManyWithWhereNestedInput[]
    | CourseLinkUpdateManyWithWhereNestedInput
  >;
}

export interface CourseLinkUpdateWithWhereUniqueWithoutFromInput {
  where: CourseLinkWhereUniqueInput;
  data: CourseLinkUpdateWithoutFromDataInput;
}

export interface CourseLinkUpdateWithoutFromDataInput {
  to?: Maybe<CourseUpdateOneRequiredWithoutLinksToCourseInput>;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  weight?: Maybe<Int>;
  count?: Maybe<Int>;
  text?: Maybe<String>;
  workspace?: Maybe<WorkspaceUpdateOneRequiredWithoutCourseLinksInput>;
  createdBy?: Maybe<UserUpdateOneRequiredInput>;
}

export interface CourseUpdateOneRequiredWithoutLinksToCourseInput {
  create?: Maybe<CourseCreateWithoutLinksToCourseInput>;
  update?: Maybe<CourseUpdateWithoutLinksToCourseDataInput>;
  upsert?: Maybe<CourseUpsertWithoutLinksToCourseInput>;
  connect?: Maybe<CourseWhereUniqueInput>;
}

export interface CourseUpdateWithoutLinksToCourseDataInput {
  name?: Maybe<String>;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  tags?: Maybe<TagUpdateManyInput>;
  sourceCourse?: Maybe<CourseUpdateOneWithoutClonesInput>;
  clones?: Maybe<CourseUpdateManyWithoutSourceCourseInput>;
  linksFromCourse?: Maybe<CourseLinkUpdateManyWithoutFromInput>;
  workspace?: Maybe<WorkspaceUpdateOneRequiredWithoutCoursesInput>;
  concepts?: Maybe<ConceptUpdateManyWithoutCourseInput>;
  conceptOrder?: Maybe<CourseUpdateconceptOrderInput>;
  objectiveOrder?: Maybe<CourseUpdateobjectiveOrderInput>;
  createdBy?: Maybe<UserUpdateOneRequiredInput>;
  goalLinks?: Maybe<GoalLinkUpdateManyWithoutCourseInput>;
}

export interface CourseUpdateManyWithoutSourceCourseInput {
  create?: Maybe<
    | CourseCreateWithoutSourceCourseInput[]
    | CourseCreateWithoutSourceCourseInput
  >;
  delete?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
  connect?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
  set?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
  disconnect?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
  update?: Maybe<
    | CourseUpdateWithWhereUniqueWithoutSourceCourseInput[]
    | CourseUpdateWithWhereUniqueWithoutSourceCourseInput
  >;
  upsert?: Maybe<
    | CourseUpsertWithWhereUniqueWithoutSourceCourseInput[]
    | CourseUpsertWithWhereUniqueWithoutSourceCourseInput
  >;
  deleteMany?: Maybe<CourseScalarWhereInput[] | CourseScalarWhereInput>;
  updateMany?: Maybe<
    | CourseUpdateManyWithWhereNestedInput[]
    | CourseUpdateManyWithWhereNestedInput
  >;
}

export interface CourseUpdateWithWhereUniqueWithoutSourceCourseInput {
  where: CourseWhereUniqueInput;
  data: CourseUpdateWithoutSourceCourseDataInput;
}

export interface CourseUpdateWithoutSourceCourseDataInput {
  name?: Maybe<String>;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  tags?: Maybe<TagUpdateManyInput>;
  clones?: Maybe<CourseUpdateManyWithoutSourceCourseInput>;
  linksFromCourse?: Maybe<CourseLinkUpdateManyWithoutFromInput>;
  linksToCourse?: Maybe<CourseLinkUpdateManyWithoutToInput>;
  workspace?: Maybe<WorkspaceUpdateOneRequiredWithoutCoursesInput>;
  concepts?: Maybe<ConceptUpdateManyWithoutCourseInput>;
  conceptOrder?: Maybe<CourseUpdateconceptOrderInput>;
  objectiveOrder?: Maybe<CourseUpdateobjectiveOrderInput>;
  createdBy?: Maybe<UserUpdateOneRequiredInput>;
  goalLinks?: Maybe<GoalLinkUpdateManyWithoutCourseInput>;
}

export interface CourseLinkUpdateManyWithoutToInput {
  create?: Maybe<
    CourseLinkCreateWithoutToInput[] | CourseLinkCreateWithoutToInput
  >;
  delete?: Maybe<CourseLinkWhereUniqueInput[] | CourseLinkWhereUniqueInput>;
  connect?: Maybe<CourseLinkWhereUniqueInput[] | CourseLinkWhereUniqueInput>;
  set?: Maybe<CourseLinkWhereUniqueInput[] | CourseLinkWhereUniqueInput>;
  disconnect?: Maybe<CourseLinkWhereUniqueInput[] | CourseLinkWhereUniqueInput>;
  update?: Maybe<
    | CourseLinkUpdateWithWhereUniqueWithoutToInput[]
    | CourseLinkUpdateWithWhereUniqueWithoutToInput
  >;
  upsert?: Maybe<
    | CourseLinkUpsertWithWhereUniqueWithoutToInput[]
    | CourseLinkUpsertWithWhereUniqueWithoutToInput
  >;
  deleteMany?: Maybe<CourseLinkScalarWhereInput[] | CourseLinkScalarWhereInput>;
  updateMany?: Maybe<
    | CourseLinkUpdateManyWithWhereNestedInput[]
    | CourseLinkUpdateManyWithWhereNestedInput
  >;
}

export interface CourseLinkUpdateWithWhereUniqueWithoutToInput {
  where: CourseLinkWhereUniqueInput;
  data: CourseLinkUpdateWithoutToDataInput;
}

export interface CourseLinkUpdateWithoutToDataInput {
  from?: Maybe<CourseUpdateOneRequiredWithoutLinksFromCourseInput>;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  weight?: Maybe<Int>;
  count?: Maybe<Int>;
  text?: Maybe<String>;
  workspace?: Maybe<WorkspaceUpdateOneRequiredWithoutCourseLinksInput>;
  createdBy?: Maybe<UserUpdateOneRequiredInput>;
}

export interface CourseUpdateOneRequiredWithoutLinksFromCourseInput {
  create?: Maybe<CourseCreateWithoutLinksFromCourseInput>;
  update?: Maybe<CourseUpdateWithoutLinksFromCourseDataInput>;
  upsert?: Maybe<CourseUpsertWithoutLinksFromCourseInput>;
  connect?: Maybe<CourseWhereUniqueInput>;
}

export interface CourseUpdateWithoutLinksFromCourseDataInput {
  name?: Maybe<String>;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  tags?: Maybe<TagUpdateManyInput>;
  sourceCourse?: Maybe<CourseUpdateOneWithoutClonesInput>;
  clones?: Maybe<CourseUpdateManyWithoutSourceCourseInput>;
  linksToCourse?: Maybe<CourseLinkUpdateManyWithoutToInput>;
  workspace?: Maybe<WorkspaceUpdateOneRequiredWithoutCoursesInput>;
  concepts?: Maybe<ConceptUpdateManyWithoutCourseInput>;
  conceptOrder?: Maybe<CourseUpdateconceptOrderInput>;
  objectiveOrder?: Maybe<CourseUpdateobjectiveOrderInput>;
  createdBy?: Maybe<UserUpdateOneRequiredInput>;
  goalLinks?: Maybe<GoalLinkUpdateManyWithoutCourseInput>;
}

export interface WorkspaceUpdateOneRequiredWithoutCoursesInput {
  create?: Maybe<WorkspaceCreateWithoutCoursesInput>;
  update?: Maybe<WorkspaceUpdateWithoutCoursesDataInput>;
  upsert?: Maybe<WorkspaceUpsertWithoutCoursesInput>;
  connect?: Maybe<WorkspaceWhereUniqueInput>;
}

export interface WorkspaceUpdateWithoutCoursesDataInput {
  name?: Maybe<String>;
  sourceProject?: Maybe<ProjectUpdateOneWithoutWorkspacesInput>;
  sourceTemplate?: Maybe<WorkspaceUpdateOneWithoutClonesInput>;
  asMerge?: Maybe<ProjectUpdateOneWithoutMergesInput>;
  asTemplate?: Maybe<ProjectUpdateOneWithoutTemplatesInput>;
  clones?: Maybe<WorkspaceUpdateManyWithoutSourceTemplateInput>;
  courseOrder?: Maybe<WorkspaceUpdatecourseOrderInput>;
  concepts?: Maybe<ConceptUpdateManyWithoutWorkspaceInput>;
  commonConcepts?: Maybe<ConceptUpdateManyInput>;
  conceptLinks?: Maybe<ConceptLinkUpdateManyWithoutWorkspaceInput>;
  courseLinks?: Maybe<CourseLinkUpdateManyWithoutWorkspaceInput>;
  goals?: Maybe<ConceptUpdateManyInput>;
  goalLinks?: Maybe<GoalLinkUpdateManyWithoutWorkspaceInput>;
  participants?: Maybe<WorkspaceParticipantUpdateManyWithoutWorkspaceInput>;
  tokens?: Maybe<WorkspaceTokenUpdateManyWithoutWorkspaceInput>;
  mainCourse?: Maybe<CourseUpdateOneInput>;
  pointGroups?: Maybe<PointGroupUpdateManyWithoutWorkspaceInput>;
  courseTags?: Maybe<TagUpdateManyInput>;
  conceptTags?: Maybe<TagUpdateManyInput>;
  goalTags?: Maybe<TagUpdateManyInput>;
  createdBy?: Maybe<UserUpdateOneInput>;
}

export interface WorkspaceUpdatecourseOrderInput {
  set?: Maybe<ID_Input[] | ID_Input>;
}

export interface ConceptUpdateManyWithoutWorkspaceInput {
  create?: Maybe<
    ConceptCreateWithoutWorkspaceInput[] | ConceptCreateWithoutWorkspaceInput
  >;
  delete?: Maybe<ConceptWhereUniqueInput[] | ConceptWhereUniqueInput>;
  connect?: Maybe<ConceptWhereUniqueInput[] | ConceptWhereUniqueInput>;
  set?: Maybe<ConceptWhereUniqueInput[] | ConceptWhereUniqueInput>;
  disconnect?: Maybe<ConceptWhereUniqueInput[] | ConceptWhereUniqueInput>;
  update?: Maybe<
    | ConceptUpdateWithWhereUniqueWithoutWorkspaceInput[]
    | ConceptUpdateWithWhereUniqueWithoutWorkspaceInput
  >;
  upsert?: Maybe<
    | ConceptUpsertWithWhereUniqueWithoutWorkspaceInput[]
    | ConceptUpsertWithWhereUniqueWithoutWorkspaceInput
  >;
  deleteMany?: Maybe<ConceptScalarWhereInput[] | ConceptScalarWhereInput>;
  updateMany?: Maybe<
    | ConceptUpdateManyWithWhereNestedInput[]
    | ConceptUpdateManyWithWhereNestedInput
  >;
}

export interface ConceptUpdateWithWhereUniqueWithoutWorkspaceInput {
  where: ConceptWhereUniqueInput;
  data: ConceptUpdateWithoutWorkspaceDataInput;
}

export interface ConceptUpdateWithoutWorkspaceDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  level?: Maybe<ConceptLevel>;
  position?: Maybe<String>;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  tags?: Maybe<TagUpdateManyInput>;
  count?: Maybe<Int>;
  sourceConcept?: Maybe<ConceptUpdateOneWithoutClonesInput>;
  clones?: Maybe<ConceptUpdateManyWithoutSourceConceptInput>;
  sourceCommon?: Maybe<ConceptUpdateOneWithoutCommonClonesInput>;
  commonClones?: Maybe<ConceptUpdateManyWithoutSourceCommonInput>;
  linksFromConcept?: Maybe<ConceptLinkUpdateManyWithoutFromInput>;
  linksToConcept?: Maybe<ConceptLinkUpdateManyWithoutToInput>;
  course?: Maybe<CourseUpdateOneWithoutConceptsInput>;
  createdBy?: Maybe<UserUpdateOneRequiredInput>;
}

export interface ConceptUpdateOneWithoutClonesInput {
  create?: Maybe<ConceptCreateWithoutClonesInput>;
  update?: Maybe<ConceptUpdateWithoutClonesDataInput>;
  upsert?: Maybe<ConceptUpsertWithoutClonesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ConceptWhereUniqueInput>;
}

export interface ConceptUpdateWithoutClonesDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  level?: Maybe<ConceptLevel>;
  position?: Maybe<String>;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  tags?: Maybe<TagUpdateManyInput>;
  count?: Maybe<Int>;
  sourceConcept?: Maybe<ConceptUpdateOneWithoutClonesInput>;
  sourceCommon?: Maybe<ConceptUpdateOneWithoutCommonClonesInput>;
  commonClones?: Maybe<ConceptUpdateManyWithoutSourceCommonInput>;
  linksFromConcept?: Maybe<ConceptLinkUpdateManyWithoutFromInput>;
  linksToConcept?: Maybe<ConceptLinkUpdateManyWithoutToInput>;
  course?: Maybe<CourseUpdateOneWithoutConceptsInput>;
  workspace?: Maybe<WorkspaceUpdateOneRequiredWithoutConceptsInput>;
  createdBy?: Maybe<UserUpdateOneRequiredInput>;
}

export interface ConceptUpdateOneWithoutCommonClonesInput {
  create?: Maybe<ConceptCreateWithoutCommonClonesInput>;
  update?: Maybe<ConceptUpdateWithoutCommonClonesDataInput>;
  upsert?: Maybe<ConceptUpsertWithoutCommonClonesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ConceptWhereUniqueInput>;
}

export interface ConceptUpdateWithoutCommonClonesDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  level?: Maybe<ConceptLevel>;
  position?: Maybe<String>;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  tags?: Maybe<TagUpdateManyInput>;
  count?: Maybe<Int>;
  sourceConcept?: Maybe<ConceptUpdateOneWithoutClonesInput>;
  clones?: Maybe<ConceptUpdateManyWithoutSourceConceptInput>;
  sourceCommon?: Maybe<ConceptUpdateOneWithoutCommonClonesInput>;
  linksFromConcept?: Maybe<ConceptLinkUpdateManyWithoutFromInput>;
  linksToConcept?: Maybe<ConceptLinkUpdateManyWithoutToInput>;
  course?: Maybe<CourseUpdateOneWithoutConceptsInput>;
  workspace?: Maybe<WorkspaceUpdateOneRequiredWithoutConceptsInput>;
  createdBy?: Maybe<UserUpdateOneRequiredInput>;
}

export interface ConceptUpdateManyWithoutSourceConceptInput {
  create?: Maybe<
    | ConceptCreateWithoutSourceConceptInput[]
    | ConceptCreateWithoutSourceConceptInput
  >;
  delete?: Maybe<ConceptWhereUniqueInput[] | ConceptWhereUniqueInput>;
  connect?: Maybe<ConceptWhereUniqueInput[] | ConceptWhereUniqueInput>;
  set?: Maybe<ConceptWhereUniqueInput[] | ConceptWhereUniqueInput>;
  disconnect?: Maybe<ConceptWhereUniqueInput[] | ConceptWhereUniqueInput>;
  update?: Maybe<
    | ConceptUpdateWithWhereUniqueWithoutSourceConceptInput[]
    | ConceptUpdateWithWhereUniqueWithoutSourceConceptInput
  >;
  upsert?: Maybe<
    | ConceptUpsertWithWhereUniqueWithoutSourceConceptInput[]
    | ConceptUpsertWithWhereUniqueWithoutSourceConceptInput
  >;
  deleteMany?: Maybe<ConceptScalarWhereInput[] | ConceptScalarWhereInput>;
  updateMany?: Maybe<
    | ConceptUpdateManyWithWhereNestedInput[]
    | ConceptUpdateManyWithWhereNestedInput
  >;
}

export interface ConceptUpdateWithWhereUniqueWithoutSourceConceptInput {
  where: ConceptWhereUniqueInput;
  data: ConceptUpdateWithoutSourceConceptDataInput;
}

export interface ConceptUpdateWithoutSourceConceptDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  level?: Maybe<ConceptLevel>;
  position?: Maybe<String>;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  tags?: Maybe<TagUpdateManyInput>;
  count?: Maybe<Int>;
  clones?: Maybe<ConceptUpdateManyWithoutSourceConceptInput>;
  sourceCommon?: Maybe<ConceptUpdateOneWithoutCommonClonesInput>;
  commonClones?: Maybe<ConceptUpdateManyWithoutSourceCommonInput>;
  linksFromConcept?: Maybe<ConceptLinkUpdateManyWithoutFromInput>;
  linksToConcept?: Maybe<ConceptLinkUpdateManyWithoutToInput>;
  course?: Maybe<CourseUpdateOneWithoutConceptsInput>;
  workspace?: Maybe<WorkspaceUpdateOneRequiredWithoutConceptsInput>;
  createdBy?: Maybe<UserUpdateOneRequiredInput>;
}

export interface ConceptUpdateManyWithoutSourceCommonInput {
  create?: Maybe<
    | ConceptCreateWithoutSourceCommonInput[]
    | ConceptCreateWithoutSourceCommonInput
  >;
  delete?: Maybe<ConceptWhereUniqueInput[] | ConceptWhereUniqueInput>;
  connect?: Maybe<ConceptWhereUniqueInput[] | ConceptWhereUniqueInput>;
  set?: Maybe<ConceptWhereUniqueInput[] | ConceptWhereUniqueInput>;
  disconnect?: Maybe<ConceptWhereUniqueInput[] | ConceptWhereUniqueInput>;
  update?: Maybe<
    | ConceptUpdateWithWhereUniqueWithoutSourceCommonInput[]
    | ConceptUpdateWithWhereUniqueWithoutSourceCommonInput
  >;
  upsert?: Maybe<
    | ConceptUpsertWithWhereUniqueWithoutSourceCommonInput[]
    | ConceptUpsertWithWhereUniqueWithoutSourceCommonInput
  >;
  deleteMany?: Maybe<ConceptScalarWhereInput[] | ConceptScalarWhereInput>;
  updateMany?: Maybe<
    | ConceptUpdateManyWithWhereNestedInput[]
    | ConceptUpdateManyWithWhereNestedInput
  >;
}

export interface ConceptUpdateWithWhereUniqueWithoutSourceCommonInput {
  where: ConceptWhereUniqueInput;
  data: ConceptUpdateWithoutSourceCommonDataInput;
}

export interface ConceptUpdateWithoutSourceCommonDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  level?: Maybe<ConceptLevel>;
  position?: Maybe<String>;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  tags?: Maybe<TagUpdateManyInput>;
  count?: Maybe<Int>;
  sourceConcept?: Maybe<ConceptUpdateOneWithoutClonesInput>;
  clones?: Maybe<ConceptUpdateManyWithoutSourceConceptInput>;
  commonClones?: Maybe<ConceptUpdateManyWithoutSourceCommonInput>;
  linksFromConcept?: Maybe<ConceptLinkUpdateManyWithoutFromInput>;
  linksToConcept?: Maybe<ConceptLinkUpdateManyWithoutToInput>;
  course?: Maybe<CourseUpdateOneWithoutConceptsInput>;
  workspace?: Maybe<WorkspaceUpdateOneRequiredWithoutConceptsInput>;
  createdBy?: Maybe<UserUpdateOneRequiredInput>;
}

export interface ConceptLinkUpdateManyWithoutFromInput {
  create?: Maybe<
    ConceptLinkCreateWithoutFromInput[] | ConceptLinkCreateWithoutFromInput
  >;
  delete?: Maybe<ConceptLinkWhereUniqueInput[] | ConceptLinkWhereUniqueInput>;
  connect?: Maybe<ConceptLinkWhereUniqueInput[] | ConceptLinkWhereUniqueInput>;
  set?: Maybe<ConceptLinkWhereUniqueInput[] | ConceptLinkWhereUniqueInput>;
  disconnect?: Maybe<
    ConceptLinkWhereUniqueInput[] | ConceptLinkWhereUniqueInput
  >;
  update?: Maybe<
    | ConceptLinkUpdateWithWhereUniqueWithoutFromInput[]
    | ConceptLinkUpdateWithWhereUniqueWithoutFromInput
  >;
  upsert?: Maybe<
    | ConceptLinkUpsertWithWhereUniqueWithoutFromInput[]
    | ConceptLinkUpsertWithWhereUniqueWithoutFromInput
  >;
  deleteMany?: Maybe<
    ConceptLinkScalarWhereInput[] | ConceptLinkScalarWhereInput
  >;
  updateMany?: Maybe<
    | ConceptLinkUpdateManyWithWhereNestedInput[]
    | ConceptLinkUpdateManyWithWhereNestedInput
  >;
}

export interface ConceptLinkUpdateWithWhereUniqueWithoutFromInput {
  where: ConceptLinkWhereUniqueInput;
  data: ConceptLinkUpdateWithoutFromDataInput;
}

export interface ConceptLinkUpdateWithoutFromDataInput {
  to?: Maybe<ConceptUpdateOneRequiredWithoutLinksToConceptInput>;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  weight?: Maybe<Int>;
  count?: Maybe<Int>;
  text?: Maybe<String>;
  level?: Maybe<PrerequisiteLevel>;
  workspace?: Maybe<WorkspaceUpdateOneRequiredWithoutConceptLinksInput>;
  createdBy?: Maybe<UserUpdateOneRequiredInput>;
}

export interface ConceptUpdateOneRequiredWithoutLinksToConceptInput {
  create?: Maybe<ConceptCreateWithoutLinksToConceptInput>;
  update?: Maybe<ConceptUpdateWithoutLinksToConceptDataInput>;
  upsert?: Maybe<ConceptUpsertWithoutLinksToConceptInput>;
  connect?: Maybe<ConceptWhereUniqueInput>;
}

export interface ConceptUpdateWithoutLinksToConceptDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  level?: Maybe<ConceptLevel>;
  position?: Maybe<String>;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  tags?: Maybe<TagUpdateManyInput>;
  count?: Maybe<Int>;
  sourceConcept?: Maybe<ConceptUpdateOneWithoutClonesInput>;
  clones?: Maybe<ConceptUpdateManyWithoutSourceConceptInput>;
  sourceCommon?: Maybe<ConceptUpdateOneWithoutCommonClonesInput>;
  commonClones?: Maybe<ConceptUpdateManyWithoutSourceCommonInput>;
  linksFromConcept?: Maybe<ConceptLinkUpdateManyWithoutFromInput>;
  course?: Maybe<CourseUpdateOneWithoutConceptsInput>;
  workspace?: Maybe<WorkspaceUpdateOneRequiredWithoutConceptsInput>;
  createdBy?: Maybe<UserUpdateOneRequiredInput>;
}

export interface CourseUpdateOneWithoutConceptsInput {
  create?: Maybe<CourseCreateWithoutConceptsInput>;
  update?: Maybe<CourseUpdateWithoutConceptsDataInput>;
  upsert?: Maybe<CourseUpsertWithoutConceptsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<CourseWhereUniqueInput>;
}

export interface CourseUpdateWithoutConceptsDataInput {
  name?: Maybe<String>;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  tags?: Maybe<TagUpdateManyInput>;
  sourceCourse?: Maybe<CourseUpdateOneWithoutClonesInput>;
  clones?: Maybe<CourseUpdateManyWithoutSourceCourseInput>;
  linksFromCourse?: Maybe<CourseLinkUpdateManyWithoutFromInput>;
  linksToCourse?: Maybe<CourseLinkUpdateManyWithoutToInput>;
  workspace?: Maybe<WorkspaceUpdateOneRequiredWithoutCoursesInput>;
  conceptOrder?: Maybe<CourseUpdateconceptOrderInput>;
  objectiveOrder?: Maybe<CourseUpdateobjectiveOrderInput>;
  createdBy?: Maybe<UserUpdateOneRequiredInput>;
  goalLinks?: Maybe<GoalLinkUpdateManyWithoutCourseInput>;
}

export interface CourseUpdateconceptOrderInput {
  set?: Maybe<ID_Input[] | ID_Input>;
}

export interface CourseUpdateobjectiveOrderInput {
  set?: Maybe<ID_Input[] | ID_Input>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  tmcId?: Maybe<Int>;
  hakaId?: Maybe<String>;
  googleId?: Maybe<String>;
  role?: Maybe<Role>;
  deactivated?: Maybe<Boolean>;
  tokens?: Maybe<AccessTokenUpdateManyWithoutUserInput>;
  workspaceParticipations?: Maybe<
    WorkspaceParticipantUpdateManyWithoutUserInput
  >;
  projectParticipations?: Maybe<ProjectParticipantUpdateManyWithoutUserInput>;
  seenGuides?: Maybe<UserUpdateseenGuidesInput>;
}

export interface AccessTokenUpdateManyWithoutUserInput {
  create?: Maybe<
    AccessTokenCreateWithoutUserInput[] | AccessTokenCreateWithoutUserInput
  >;
  delete?: Maybe<AccessTokenWhereUniqueInput[] | AccessTokenWhereUniqueInput>;
  connect?: Maybe<AccessTokenWhereUniqueInput[] | AccessTokenWhereUniqueInput>;
  set?: Maybe<AccessTokenWhereUniqueInput[] | AccessTokenWhereUniqueInput>;
  disconnect?: Maybe<
    AccessTokenWhereUniqueInput[] | AccessTokenWhereUniqueInput
  >;
  update?: Maybe<
    | AccessTokenUpdateWithWhereUniqueWithoutUserInput[]
    | AccessTokenUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | AccessTokenUpsertWithWhereUniqueWithoutUserInput[]
    | AccessTokenUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<
    AccessTokenScalarWhereInput[] | AccessTokenScalarWhereInput
  >;
  updateMany?: Maybe<
    | AccessTokenUpdateManyWithWhereNestedInput[]
    | AccessTokenUpdateManyWithWhereNestedInput
  >;
}

export interface AccessTokenUpdateWithWhereUniqueWithoutUserInput {
  where: AccessTokenWhereUniqueInput;
  data: AccessTokenUpdateWithoutUserDataInput;
}

export interface AccessTokenUpdateWithoutUserDataInput {
  token?: Maybe<String>;
  lastSeenAgent?: Maybe<String>;
  lastSeenAddress?: Maybe<String>;
}

export interface AccessTokenUpsertWithWhereUniqueWithoutUserInput {
  where: AccessTokenWhereUniqueInput;
  update: AccessTokenUpdateWithoutUserDataInput;
  create: AccessTokenCreateWithoutUserInput;
}

export interface AccessTokenScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  token?: Maybe<String>;
  token_not?: Maybe<String>;
  token_in?: Maybe<String[] | String>;
  token_not_in?: Maybe<String[] | String>;
  token_lt?: Maybe<String>;
  token_lte?: Maybe<String>;
  token_gt?: Maybe<String>;
  token_gte?: Maybe<String>;
  token_contains?: Maybe<String>;
  token_not_contains?: Maybe<String>;
  token_starts_with?: Maybe<String>;
  token_not_starts_with?: Maybe<String>;
  token_ends_with?: Maybe<String>;
  token_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  lastSeenTime?: Maybe<DateTimeInput>;
  lastSeenTime_not?: Maybe<DateTimeInput>;
  lastSeenTime_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastSeenTime_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastSeenTime_lt?: Maybe<DateTimeInput>;
  lastSeenTime_lte?: Maybe<DateTimeInput>;
  lastSeenTime_gt?: Maybe<DateTimeInput>;
  lastSeenTime_gte?: Maybe<DateTimeInput>;
  lastSeenAgent?: Maybe<String>;
  lastSeenAgent_not?: Maybe<String>;
  lastSeenAgent_in?: Maybe<String[] | String>;
  lastSeenAgent_not_in?: Maybe<String[] | String>;
  lastSeenAgent_lt?: Maybe<String>;
  lastSeenAgent_lte?: Maybe<String>;
  lastSeenAgent_gt?: Maybe<String>;
  lastSeenAgent_gte?: Maybe<String>;
  lastSeenAgent_contains?: Maybe<String>;
  lastSeenAgent_not_contains?: Maybe<String>;
  lastSeenAgent_starts_with?: Maybe<String>;
  lastSeenAgent_not_starts_with?: Maybe<String>;
  lastSeenAgent_ends_with?: Maybe<String>;
  lastSeenAgent_not_ends_with?: Maybe<String>;
  lastSeenAddress?: Maybe<String>;
  lastSeenAddress_not?: Maybe<String>;
  lastSeenAddress_in?: Maybe<String[] | String>;
  lastSeenAddress_not_in?: Maybe<String[] | String>;
  lastSeenAddress_lt?: Maybe<String>;
  lastSeenAddress_lte?: Maybe<String>;
  lastSeenAddress_gt?: Maybe<String>;
  lastSeenAddress_gte?: Maybe<String>;
  lastSeenAddress_contains?: Maybe<String>;
  lastSeenAddress_not_contains?: Maybe<String>;
  lastSeenAddress_starts_with?: Maybe<String>;
  lastSeenAddress_not_starts_with?: Maybe<String>;
  lastSeenAddress_ends_with?: Maybe<String>;
  lastSeenAddress_not_ends_with?: Maybe<String>;
  AND?: Maybe<AccessTokenScalarWhereInput[] | AccessTokenScalarWhereInput>;
  OR?: Maybe<AccessTokenScalarWhereInput[] | AccessTokenScalarWhereInput>;
  NOT?: Maybe<AccessTokenScalarWhereInput[] | AccessTokenScalarWhereInput>;
}

export interface AccessTokenUpdateManyWithWhereNestedInput {
  where: AccessTokenScalarWhereInput;
  data: AccessTokenUpdateManyDataInput;
}

export interface AccessTokenUpdateManyDataInput {
  token?: Maybe<String>;
  lastSeenAgent?: Maybe<String>;
  lastSeenAddress?: Maybe<String>;
}

export interface ProjectParticipantUpdateManyWithoutUserInput {
  create?: Maybe<
    | ProjectParticipantCreateWithoutUserInput[]
    | ProjectParticipantCreateWithoutUserInput
  >;
  delete?: Maybe<
    ProjectParticipantWhereUniqueInput[] | ProjectParticipantWhereUniqueInput
  >;
  connect?: Maybe<
    ProjectParticipantWhereUniqueInput[] | ProjectParticipantWhereUniqueInput
  >;
  set?: Maybe<
    ProjectParticipantWhereUniqueInput[] | ProjectParticipantWhereUniqueInput
  >;
  disconnect?: Maybe<
    ProjectParticipantWhereUniqueInput[] | ProjectParticipantWhereUniqueInput
  >;
  update?: Maybe<
    | ProjectParticipantUpdateWithWhereUniqueWithoutUserInput[]
    | ProjectParticipantUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | ProjectParticipantUpsertWithWhereUniqueWithoutUserInput[]
    | ProjectParticipantUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<
    ProjectParticipantScalarWhereInput[] | ProjectParticipantScalarWhereInput
  >;
  updateMany?: Maybe<
    | ProjectParticipantUpdateManyWithWhereNestedInput[]
    | ProjectParticipantUpdateManyWithWhereNestedInput
  >;
}

export interface ProjectParticipantUpdateWithWhereUniqueWithoutUserInput {
  where: ProjectParticipantWhereUniqueInput;
  data: ProjectParticipantUpdateWithoutUserDataInput;
}

export interface ProjectParticipantUpdateWithoutUserDataInput {
  privilege?: Maybe<Privilege>;
  project?: Maybe<ProjectUpdateOneRequiredWithoutParticipantsInput>;
  token?: Maybe<ProjectTokenUpdateOneWithoutParticipantsInput>;
}

export interface ProjectUpdateOneRequiredWithoutParticipantsInput {
  create?: Maybe<ProjectCreateWithoutParticipantsInput>;
  update?: Maybe<ProjectUpdateWithoutParticipantsDataInput>;
  upsert?: Maybe<ProjectUpsertWithoutParticipantsInput>;
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface ProjectUpdateWithoutParticipantsDataInput {
  name?: Maybe<String>;
  workspaces?: Maybe<WorkspaceUpdateManyWithoutSourceProjectInput>;
  activeTemplate?: Maybe<WorkspaceUpdateOneInput>;
  templates?: Maybe<WorkspaceUpdateManyWithoutAsTemplateInput>;
  merges?: Maybe<WorkspaceUpdateManyWithoutAsMergeInput>;
  tokens?: Maybe<ProjectTokenUpdateManyWithoutProjectInput>;
  createdBy?: Maybe<UserUpdateOneInput>;
}

export interface WorkspaceUpdateManyWithoutAsTemplateInput {
  create?: Maybe<
    | WorkspaceCreateWithoutAsTemplateInput[]
    | WorkspaceCreateWithoutAsTemplateInput
  >;
  delete?: Maybe<WorkspaceWhereUniqueInput[] | WorkspaceWhereUniqueInput>;
  connect?: Maybe<WorkspaceWhereUniqueInput[] | WorkspaceWhereUniqueInput>;
  set?: Maybe<WorkspaceWhereUniqueInput[] | WorkspaceWhereUniqueInput>;
  disconnect?: Maybe<WorkspaceWhereUniqueInput[] | WorkspaceWhereUniqueInput>;
  update?: Maybe<
    | WorkspaceUpdateWithWhereUniqueWithoutAsTemplateInput[]
    | WorkspaceUpdateWithWhereUniqueWithoutAsTemplateInput
  >;
  upsert?: Maybe<
    | WorkspaceUpsertWithWhereUniqueWithoutAsTemplateInput[]
    | WorkspaceUpsertWithWhereUniqueWithoutAsTemplateInput
  >;
  deleteMany?: Maybe<WorkspaceScalarWhereInput[] | WorkspaceScalarWhereInput>;
  updateMany?: Maybe<
    | WorkspaceUpdateManyWithWhereNestedInput[]
    | WorkspaceUpdateManyWithWhereNestedInput
  >;
}

export interface WorkspaceUpdateWithWhereUniqueWithoutAsTemplateInput {
  where: WorkspaceWhereUniqueInput;
  data: WorkspaceUpdateWithoutAsTemplateDataInput;
}

export interface WorkspaceUpdateWithoutAsTemplateDataInput {
  name?: Maybe<String>;
  sourceProject?: Maybe<ProjectUpdateOneWithoutWorkspacesInput>;
  sourceTemplate?: Maybe<WorkspaceUpdateOneWithoutClonesInput>;
  asMerge?: Maybe<ProjectUpdateOneWithoutMergesInput>;
  clones?: Maybe<WorkspaceUpdateManyWithoutSourceTemplateInput>;
  courses?: Maybe<CourseUpdateManyWithoutWorkspaceInput>;
  courseOrder?: Maybe<WorkspaceUpdatecourseOrderInput>;
  concepts?: Maybe<ConceptUpdateManyWithoutWorkspaceInput>;
  commonConcepts?: Maybe<ConceptUpdateManyInput>;
  conceptLinks?: Maybe<ConceptLinkUpdateManyWithoutWorkspaceInput>;
  courseLinks?: Maybe<CourseLinkUpdateManyWithoutWorkspaceInput>;
  goals?: Maybe<ConceptUpdateManyInput>;
  goalLinks?: Maybe<GoalLinkUpdateManyWithoutWorkspaceInput>;
  participants?: Maybe<WorkspaceParticipantUpdateManyWithoutWorkspaceInput>;
  tokens?: Maybe<WorkspaceTokenUpdateManyWithoutWorkspaceInput>;
  mainCourse?: Maybe<CourseUpdateOneInput>;
  pointGroups?: Maybe<PointGroupUpdateManyWithoutWorkspaceInput>;
  courseTags?: Maybe<TagUpdateManyInput>;
  conceptTags?: Maybe<TagUpdateManyInput>;
  goalTags?: Maybe<TagUpdateManyInput>;
  createdBy?: Maybe<UserUpdateOneInput>;
}

export interface ConceptUpdateManyInput {
  create?: Maybe<ConceptCreateInput[] | ConceptCreateInput>;
  update?: Maybe<
    | ConceptUpdateWithWhereUniqueNestedInput[]
    | ConceptUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | ConceptUpsertWithWhereUniqueNestedInput[]
    | ConceptUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<ConceptWhereUniqueInput[] | ConceptWhereUniqueInput>;
  connect?: Maybe<ConceptWhereUniqueInput[] | ConceptWhereUniqueInput>;
  set?: Maybe<ConceptWhereUniqueInput[] | ConceptWhereUniqueInput>;
  disconnect?: Maybe<ConceptWhereUniqueInput[] | ConceptWhereUniqueInput>;
  deleteMany?: Maybe<ConceptScalarWhereInput[] | ConceptScalarWhereInput>;
  updateMany?: Maybe<
    | ConceptUpdateManyWithWhereNestedInput[]
    | ConceptUpdateManyWithWhereNestedInput
  >;
}

export interface ConceptUpdateWithWhereUniqueNestedInput {
  where: ConceptWhereUniqueInput;
  data: ConceptUpdateDataInput;
}

export interface ConceptUpdateDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  level?: Maybe<ConceptLevel>;
  position?: Maybe<String>;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  tags?: Maybe<TagUpdateManyInput>;
  count?: Maybe<Int>;
  sourceConcept?: Maybe<ConceptUpdateOneWithoutClonesInput>;
  clones?: Maybe<ConceptUpdateManyWithoutSourceConceptInput>;
  sourceCommon?: Maybe<ConceptUpdateOneWithoutCommonClonesInput>;
  commonClones?: Maybe<ConceptUpdateManyWithoutSourceCommonInput>;
  linksFromConcept?: Maybe<ConceptLinkUpdateManyWithoutFromInput>;
  linksToConcept?: Maybe<ConceptLinkUpdateManyWithoutToInput>;
  course?: Maybe<CourseUpdateOneWithoutConceptsInput>;
  workspace?: Maybe<WorkspaceUpdateOneRequiredWithoutConceptsInput>;
  createdBy?: Maybe<UserUpdateOneRequiredInput>;
}

export interface ConceptLinkUpdateManyWithoutToInput {
  create?: Maybe<
    ConceptLinkCreateWithoutToInput[] | ConceptLinkCreateWithoutToInput
  >;
  delete?: Maybe<ConceptLinkWhereUniqueInput[] | ConceptLinkWhereUniqueInput>;
  connect?: Maybe<ConceptLinkWhereUniqueInput[] | ConceptLinkWhereUniqueInput>;
  set?: Maybe<ConceptLinkWhereUniqueInput[] | ConceptLinkWhereUniqueInput>;
  disconnect?: Maybe<
    ConceptLinkWhereUniqueInput[] | ConceptLinkWhereUniqueInput
  >;
  update?: Maybe<
    | ConceptLinkUpdateWithWhereUniqueWithoutToInput[]
    | ConceptLinkUpdateWithWhereUniqueWithoutToInput
  >;
  upsert?: Maybe<
    | ConceptLinkUpsertWithWhereUniqueWithoutToInput[]
    | ConceptLinkUpsertWithWhereUniqueWithoutToInput
  >;
  deleteMany?: Maybe<
    ConceptLinkScalarWhereInput[] | ConceptLinkScalarWhereInput
  >;
  updateMany?: Maybe<
    | ConceptLinkUpdateManyWithWhereNestedInput[]
    | ConceptLinkUpdateManyWithWhereNestedInput
  >;
}

export interface ConceptLinkUpdateWithWhereUniqueWithoutToInput {
  where: ConceptLinkWhereUniqueInput;
  data: ConceptLinkUpdateWithoutToDataInput;
}

export interface ConceptLinkUpdateWithoutToDataInput {
  from?: Maybe<ConceptUpdateOneRequiredWithoutLinksFromConceptInput>;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  weight?: Maybe<Int>;
  count?: Maybe<Int>;
  text?: Maybe<String>;
  level?: Maybe<PrerequisiteLevel>;
  workspace?: Maybe<WorkspaceUpdateOneRequiredWithoutConceptLinksInput>;
  createdBy?: Maybe<UserUpdateOneRequiredInput>;
}

export interface ConceptUpdateOneRequiredWithoutLinksFromConceptInput {
  create?: Maybe<ConceptCreateWithoutLinksFromConceptInput>;
  update?: Maybe<ConceptUpdateWithoutLinksFromConceptDataInput>;
  upsert?: Maybe<ConceptUpsertWithoutLinksFromConceptInput>;
  connect?: Maybe<ConceptWhereUniqueInput>;
}

export interface ConceptUpdateWithoutLinksFromConceptDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  level?: Maybe<ConceptLevel>;
  position?: Maybe<String>;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  tags?: Maybe<TagUpdateManyInput>;
  count?: Maybe<Int>;
  sourceConcept?: Maybe<ConceptUpdateOneWithoutClonesInput>;
  clones?: Maybe<ConceptUpdateManyWithoutSourceConceptInput>;
  sourceCommon?: Maybe<ConceptUpdateOneWithoutCommonClonesInput>;
  commonClones?: Maybe<ConceptUpdateManyWithoutSourceCommonInput>;
  linksToConcept?: Maybe<ConceptLinkUpdateManyWithoutToInput>;
  course?: Maybe<CourseUpdateOneWithoutConceptsInput>;
  workspace?: Maybe<WorkspaceUpdateOneRequiredWithoutConceptsInput>;
  createdBy?: Maybe<UserUpdateOneRequiredInput>;
}

export interface WorkspaceUpdateOneRequiredWithoutConceptsInput {
  create?: Maybe<WorkspaceCreateWithoutConceptsInput>;
  update?: Maybe<WorkspaceUpdateWithoutConceptsDataInput>;
  upsert?: Maybe<WorkspaceUpsertWithoutConceptsInput>;
  connect?: Maybe<WorkspaceWhereUniqueInput>;
}

export interface WorkspaceUpdateWithoutConceptsDataInput {
  name?: Maybe<String>;
  sourceProject?: Maybe<ProjectUpdateOneWithoutWorkspacesInput>;
  sourceTemplate?: Maybe<WorkspaceUpdateOneWithoutClonesInput>;
  asMerge?: Maybe<ProjectUpdateOneWithoutMergesInput>;
  asTemplate?: Maybe<ProjectUpdateOneWithoutTemplatesInput>;
  clones?: Maybe<WorkspaceUpdateManyWithoutSourceTemplateInput>;
  courses?: Maybe<CourseUpdateManyWithoutWorkspaceInput>;
  courseOrder?: Maybe<WorkspaceUpdatecourseOrderInput>;
  commonConcepts?: Maybe<ConceptUpdateManyInput>;
  conceptLinks?: Maybe<ConceptLinkUpdateManyWithoutWorkspaceInput>;
  courseLinks?: Maybe<CourseLinkUpdateManyWithoutWorkspaceInput>;
  goals?: Maybe<ConceptUpdateManyInput>;
  goalLinks?: Maybe<GoalLinkUpdateManyWithoutWorkspaceInput>;
  participants?: Maybe<WorkspaceParticipantUpdateManyWithoutWorkspaceInput>;
  tokens?: Maybe<WorkspaceTokenUpdateManyWithoutWorkspaceInput>;
  mainCourse?: Maybe<CourseUpdateOneInput>;
  pointGroups?: Maybe<PointGroupUpdateManyWithoutWorkspaceInput>;
  courseTags?: Maybe<TagUpdateManyInput>;
  conceptTags?: Maybe<TagUpdateManyInput>;
  goalTags?: Maybe<TagUpdateManyInput>;
  createdBy?: Maybe<UserUpdateOneInput>;
}

export interface ConceptLinkUpdateManyWithoutWorkspaceInput {
  create?: Maybe<
    | ConceptLinkCreateWithoutWorkspaceInput[]
    | ConceptLinkCreateWithoutWorkspaceInput
  >;
  delete?: Maybe<ConceptLinkWhereUniqueInput[] | ConceptLinkWhereUniqueInput>;
  connect?: Maybe<ConceptLinkWhereUniqueInput[] | ConceptLinkWhereUniqueInput>;
  set?: Maybe<ConceptLinkWhereUniqueInput[] | ConceptLinkWhereUniqueInput>;
  disconnect?: Maybe<
    ConceptLinkWhereUniqueInput[] | ConceptLinkWhereUniqueInput
  >;
  update?: Maybe<
    | ConceptLinkUpdateWithWhereUniqueWithoutWorkspaceInput[]
    | ConceptLinkUpdateWithWhereUniqueWithoutWorkspaceInput
  >;
  upsert?: Maybe<
    | ConceptLinkUpsertWithWhereUniqueWithoutWorkspaceInput[]
    | ConceptLinkUpsertWithWhereUniqueWithoutWorkspaceInput
  >;
  deleteMany?: Maybe<
    ConceptLinkScalarWhereInput[] | ConceptLinkScalarWhereInput
  >;
  updateMany?: Maybe<
    | ConceptLinkUpdateManyWithWhereNestedInput[]
    | ConceptLinkUpdateManyWithWhereNestedInput
  >;
}

export interface ConceptLinkUpdateWithWhereUniqueWithoutWorkspaceInput {
  where: ConceptLinkWhereUniqueInput;
  data: ConceptLinkUpdateWithoutWorkspaceDataInput;
}

export interface ConceptLinkUpdateWithoutWorkspaceDataInput {
  from?: Maybe<ConceptUpdateOneRequiredWithoutLinksFromConceptInput>;
  to?: Maybe<ConceptUpdateOneRequiredWithoutLinksToConceptInput>;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  weight?: Maybe<Int>;
  count?: Maybe<Int>;
  text?: Maybe<String>;
  level?: Maybe<PrerequisiteLevel>;
  createdBy?: Maybe<UserUpdateOneRequiredInput>;
}

export interface ConceptLinkUpsertWithWhereUniqueWithoutWorkspaceInput {
  where: ConceptLinkWhereUniqueInput;
  update: ConceptLinkUpdateWithoutWorkspaceDataInput;
  create: ConceptLinkCreateWithoutWorkspaceInput;
}

export interface ConceptLinkScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  official?: Maybe<Boolean>;
  official_not?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  frozen_not?: Maybe<Boolean>;
  weight?: Maybe<Int>;
  weight_not?: Maybe<Int>;
  weight_in?: Maybe<Int[] | Int>;
  weight_not_in?: Maybe<Int[] | Int>;
  weight_lt?: Maybe<Int>;
  weight_lte?: Maybe<Int>;
  weight_gt?: Maybe<Int>;
  weight_gte?: Maybe<Int>;
  count?: Maybe<Int>;
  count_not?: Maybe<Int>;
  count_in?: Maybe<Int[] | Int>;
  count_not_in?: Maybe<Int[] | Int>;
  count_lt?: Maybe<Int>;
  count_lte?: Maybe<Int>;
  count_gt?: Maybe<Int>;
  count_gte?: Maybe<Int>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  level?: Maybe<PrerequisiteLevel>;
  level_not?: Maybe<PrerequisiteLevel>;
  level_in?: Maybe<PrerequisiteLevel[] | PrerequisiteLevel>;
  level_not_in?: Maybe<PrerequisiteLevel[] | PrerequisiteLevel>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ConceptLinkScalarWhereInput[] | ConceptLinkScalarWhereInput>;
  OR?: Maybe<ConceptLinkScalarWhereInput[] | ConceptLinkScalarWhereInput>;
  NOT?: Maybe<ConceptLinkScalarWhereInput[] | ConceptLinkScalarWhereInput>;
}

export interface ConceptLinkUpdateManyWithWhereNestedInput {
  where: ConceptLinkScalarWhereInput;
  data: ConceptLinkUpdateManyDataInput;
}

export interface ConceptLinkUpdateManyDataInput {
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  weight?: Maybe<Int>;
  count?: Maybe<Int>;
  text?: Maybe<String>;
  level?: Maybe<PrerequisiteLevel>;
}

export interface CourseLinkUpdateManyWithoutWorkspaceInput {
  create?: Maybe<
    | CourseLinkCreateWithoutWorkspaceInput[]
    | CourseLinkCreateWithoutWorkspaceInput
  >;
  delete?: Maybe<CourseLinkWhereUniqueInput[] | CourseLinkWhereUniqueInput>;
  connect?: Maybe<CourseLinkWhereUniqueInput[] | CourseLinkWhereUniqueInput>;
  set?: Maybe<CourseLinkWhereUniqueInput[] | CourseLinkWhereUniqueInput>;
  disconnect?: Maybe<CourseLinkWhereUniqueInput[] | CourseLinkWhereUniqueInput>;
  update?: Maybe<
    | CourseLinkUpdateWithWhereUniqueWithoutWorkspaceInput[]
    | CourseLinkUpdateWithWhereUniqueWithoutWorkspaceInput
  >;
  upsert?: Maybe<
    | CourseLinkUpsertWithWhereUniqueWithoutWorkspaceInput[]
    | CourseLinkUpsertWithWhereUniqueWithoutWorkspaceInput
  >;
  deleteMany?: Maybe<CourseLinkScalarWhereInput[] | CourseLinkScalarWhereInput>;
  updateMany?: Maybe<
    | CourseLinkUpdateManyWithWhereNestedInput[]
    | CourseLinkUpdateManyWithWhereNestedInput
  >;
}

export interface CourseLinkUpdateWithWhereUniqueWithoutWorkspaceInput {
  where: CourseLinkWhereUniqueInput;
  data: CourseLinkUpdateWithoutWorkspaceDataInput;
}

export interface CourseLinkUpdateWithoutWorkspaceDataInput {
  from?: Maybe<CourseUpdateOneRequiredWithoutLinksFromCourseInput>;
  to?: Maybe<CourseUpdateOneRequiredWithoutLinksToCourseInput>;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  weight?: Maybe<Int>;
  count?: Maybe<Int>;
  text?: Maybe<String>;
  createdBy?: Maybe<UserUpdateOneRequiredInput>;
}

export interface CourseLinkUpsertWithWhereUniqueWithoutWorkspaceInput {
  where: CourseLinkWhereUniqueInput;
  update: CourseLinkUpdateWithoutWorkspaceDataInput;
  create: CourseLinkCreateWithoutWorkspaceInput;
}

export interface CourseLinkScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  official?: Maybe<Boolean>;
  official_not?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  frozen_not?: Maybe<Boolean>;
  weight?: Maybe<Int>;
  weight_not?: Maybe<Int>;
  weight_in?: Maybe<Int[] | Int>;
  weight_not_in?: Maybe<Int[] | Int>;
  weight_lt?: Maybe<Int>;
  weight_lte?: Maybe<Int>;
  weight_gt?: Maybe<Int>;
  weight_gte?: Maybe<Int>;
  count?: Maybe<Int>;
  count_not?: Maybe<Int>;
  count_in?: Maybe<Int[] | Int>;
  count_not_in?: Maybe<Int[] | Int>;
  count_lt?: Maybe<Int>;
  count_lte?: Maybe<Int>;
  count_gt?: Maybe<Int>;
  count_gte?: Maybe<Int>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CourseLinkScalarWhereInput[] | CourseLinkScalarWhereInput>;
  OR?: Maybe<CourseLinkScalarWhereInput[] | CourseLinkScalarWhereInput>;
  NOT?: Maybe<CourseLinkScalarWhereInput[] | CourseLinkScalarWhereInput>;
}

export interface CourseLinkUpdateManyWithWhereNestedInput {
  where: CourseLinkScalarWhereInput;
  data: CourseLinkUpdateManyDataInput;
}

export interface CourseLinkUpdateManyDataInput {
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  weight?: Maybe<Int>;
  count?: Maybe<Int>;
  text?: Maybe<String>;
}

export interface GoalLinkUpdateManyWithoutWorkspaceInput {
  create?: Maybe<
    GoalLinkCreateWithoutWorkspaceInput[] | GoalLinkCreateWithoutWorkspaceInput
  >;
  delete?: Maybe<GoalLinkWhereUniqueInput[] | GoalLinkWhereUniqueInput>;
  connect?: Maybe<GoalLinkWhereUniqueInput[] | GoalLinkWhereUniqueInput>;
  set?: Maybe<GoalLinkWhereUniqueInput[] | GoalLinkWhereUniqueInput>;
  disconnect?: Maybe<GoalLinkWhereUniqueInput[] | GoalLinkWhereUniqueInput>;
  update?: Maybe<
    | GoalLinkUpdateWithWhereUniqueWithoutWorkspaceInput[]
    | GoalLinkUpdateWithWhereUniqueWithoutWorkspaceInput
  >;
  upsert?: Maybe<
    | GoalLinkUpsertWithWhereUniqueWithoutWorkspaceInput[]
    | GoalLinkUpsertWithWhereUniqueWithoutWorkspaceInput
  >;
  deleteMany?: Maybe<GoalLinkScalarWhereInput[] | GoalLinkScalarWhereInput>;
  updateMany?: Maybe<
    | GoalLinkUpdateManyWithWhereNestedInput[]
    | GoalLinkUpdateManyWithWhereNestedInput
  >;
}

export interface GoalLinkUpdateWithWhereUniqueWithoutWorkspaceInput {
  where: GoalLinkWhereUniqueInput;
  data: GoalLinkUpdateWithoutWorkspaceDataInput;
}

export interface GoalLinkUpdateWithoutWorkspaceDataInput {
  course?: Maybe<CourseUpdateOneRequiredWithoutGoalLinksInput>;
  goal?: Maybe<ConceptUpdateOneRequiredInput>;
  text?: Maybe<String>;
  createdBy?: Maybe<UserUpdateOneRequiredInput>;
}

export interface CourseUpdateOneRequiredWithoutGoalLinksInput {
  create?: Maybe<CourseCreateWithoutGoalLinksInput>;
  update?: Maybe<CourseUpdateWithoutGoalLinksDataInput>;
  upsert?: Maybe<CourseUpsertWithoutGoalLinksInput>;
  connect?: Maybe<CourseWhereUniqueInput>;
}

export interface CourseUpdateWithoutGoalLinksDataInput {
  name?: Maybe<String>;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  tags?: Maybe<TagUpdateManyInput>;
  sourceCourse?: Maybe<CourseUpdateOneWithoutClonesInput>;
  clones?: Maybe<CourseUpdateManyWithoutSourceCourseInput>;
  linksFromCourse?: Maybe<CourseLinkUpdateManyWithoutFromInput>;
  linksToCourse?: Maybe<CourseLinkUpdateManyWithoutToInput>;
  workspace?: Maybe<WorkspaceUpdateOneRequiredWithoutCoursesInput>;
  concepts?: Maybe<ConceptUpdateManyWithoutCourseInput>;
  conceptOrder?: Maybe<CourseUpdateconceptOrderInput>;
  objectiveOrder?: Maybe<CourseUpdateobjectiveOrderInput>;
  createdBy?: Maybe<UserUpdateOneRequiredInput>;
}

export interface ConceptUpdateManyWithoutCourseInput {
  create?: Maybe<
    ConceptCreateWithoutCourseInput[] | ConceptCreateWithoutCourseInput
  >;
  delete?: Maybe<ConceptWhereUniqueInput[] | ConceptWhereUniqueInput>;
  connect?: Maybe<ConceptWhereUniqueInput[] | ConceptWhereUniqueInput>;
  set?: Maybe<ConceptWhereUniqueInput[] | ConceptWhereUniqueInput>;
  disconnect?: Maybe<ConceptWhereUniqueInput[] | ConceptWhereUniqueInput>;
  update?: Maybe<
    | ConceptUpdateWithWhereUniqueWithoutCourseInput[]
    | ConceptUpdateWithWhereUniqueWithoutCourseInput
  >;
  upsert?: Maybe<
    | ConceptUpsertWithWhereUniqueWithoutCourseInput[]
    | ConceptUpsertWithWhereUniqueWithoutCourseInput
  >;
  deleteMany?: Maybe<ConceptScalarWhereInput[] | ConceptScalarWhereInput>;
  updateMany?: Maybe<
    | ConceptUpdateManyWithWhereNestedInput[]
    | ConceptUpdateManyWithWhereNestedInput
  >;
}

export interface ConceptUpdateWithWhereUniqueWithoutCourseInput {
  where: ConceptWhereUniqueInput;
  data: ConceptUpdateWithoutCourseDataInput;
}

export interface ConceptUpdateWithoutCourseDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  level?: Maybe<ConceptLevel>;
  position?: Maybe<String>;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  tags?: Maybe<TagUpdateManyInput>;
  count?: Maybe<Int>;
  sourceConcept?: Maybe<ConceptUpdateOneWithoutClonesInput>;
  clones?: Maybe<ConceptUpdateManyWithoutSourceConceptInput>;
  sourceCommon?: Maybe<ConceptUpdateOneWithoutCommonClonesInput>;
  commonClones?: Maybe<ConceptUpdateManyWithoutSourceCommonInput>;
  linksFromConcept?: Maybe<ConceptLinkUpdateManyWithoutFromInput>;
  linksToConcept?: Maybe<ConceptLinkUpdateManyWithoutToInput>;
  workspace?: Maybe<WorkspaceUpdateOneRequiredWithoutConceptsInput>;
  createdBy?: Maybe<UserUpdateOneRequiredInput>;
}

export interface ConceptUpsertWithWhereUniqueWithoutCourseInput {
  where: ConceptWhereUniqueInput;
  update: ConceptUpdateWithoutCourseDataInput;
  create: ConceptCreateWithoutCourseInput;
}

export interface ConceptScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  level?: Maybe<ConceptLevel>;
  level_not?: Maybe<ConceptLevel>;
  level_in?: Maybe<ConceptLevel[] | ConceptLevel>;
  level_not_in?: Maybe<ConceptLevel[] | ConceptLevel>;
  position?: Maybe<String>;
  position_not?: Maybe<String>;
  position_in?: Maybe<String[] | String>;
  position_not_in?: Maybe<String[] | String>;
  position_lt?: Maybe<String>;
  position_lte?: Maybe<String>;
  position_gt?: Maybe<String>;
  position_gte?: Maybe<String>;
  position_contains?: Maybe<String>;
  position_not_contains?: Maybe<String>;
  position_starts_with?: Maybe<String>;
  position_not_starts_with?: Maybe<String>;
  position_ends_with?: Maybe<String>;
  position_not_ends_with?: Maybe<String>;
  official?: Maybe<Boolean>;
  official_not?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  frozen_not?: Maybe<Boolean>;
  count?: Maybe<Int>;
  count_not?: Maybe<Int>;
  count_in?: Maybe<Int[] | Int>;
  count_not_in?: Maybe<Int[] | Int>;
  count_lt?: Maybe<Int>;
  count_lte?: Maybe<Int>;
  count_gt?: Maybe<Int>;
  count_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ConceptScalarWhereInput[] | ConceptScalarWhereInput>;
  OR?: Maybe<ConceptScalarWhereInput[] | ConceptScalarWhereInput>;
  NOT?: Maybe<ConceptScalarWhereInput[] | ConceptScalarWhereInput>;
}

export interface ConceptUpdateManyWithWhereNestedInput {
  where: ConceptScalarWhereInput;
  data: ConceptUpdateManyDataInput;
}

export interface ConceptUpdateManyDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  level?: Maybe<ConceptLevel>;
  position?: Maybe<String>;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  count?: Maybe<Int>;
}

export interface CourseUpsertWithoutGoalLinksInput {
  update: CourseUpdateWithoutGoalLinksDataInput;
  create: CourseCreateWithoutGoalLinksInput;
}

export interface ConceptUpdateOneRequiredInput {
  create?: Maybe<ConceptCreateInput>;
  update?: Maybe<ConceptUpdateDataInput>;
  upsert?: Maybe<ConceptUpsertNestedInput>;
  connect?: Maybe<ConceptWhereUniqueInput>;
}

export interface ConceptUpsertNestedInput {
  update: ConceptUpdateDataInput;
  create: ConceptCreateInput;
}

export interface GoalLinkUpsertWithWhereUniqueWithoutWorkspaceInput {
  where: GoalLinkWhereUniqueInput;
  update: GoalLinkUpdateWithoutWorkspaceDataInput;
  create: GoalLinkCreateWithoutWorkspaceInput;
}

export interface GoalLinkScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<GoalLinkScalarWhereInput[] | GoalLinkScalarWhereInput>;
  OR?: Maybe<GoalLinkScalarWhereInput[] | GoalLinkScalarWhereInput>;
  NOT?: Maybe<GoalLinkScalarWhereInput[] | GoalLinkScalarWhereInput>;
}

export interface GoalLinkUpdateManyWithWhereNestedInput {
  where: GoalLinkScalarWhereInput;
  data: GoalLinkUpdateManyDataInput;
}

export interface GoalLinkUpdateManyDataInput {
  text?: Maybe<String>;
}

export interface WorkspaceParticipantUpdateManyWithoutWorkspaceInput {
  create?: Maybe<
    | WorkspaceParticipantCreateWithoutWorkspaceInput[]
    | WorkspaceParticipantCreateWithoutWorkspaceInput
  >;
  delete?: Maybe<
    | WorkspaceParticipantWhereUniqueInput[]
    | WorkspaceParticipantWhereUniqueInput
  >;
  connect?: Maybe<
    | WorkspaceParticipantWhereUniqueInput[]
    | WorkspaceParticipantWhereUniqueInput
  >;
  set?: Maybe<
    | WorkspaceParticipantWhereUniqueInput[]
    | WorkspaceParticipantWhereUniqueInput
  >;
  disconnect?: Maybe<
    | WorkspaceParticipantWhereUniqueInput[]
    | WorkspaceParticipantWhereUniqueInput
  >;
  update?: Maybe<
    | WorkspaceParticipantUpdateWithWhereUniqueWithoutWorkspaceInput[]
    | WorkspaceParticipantUpdateWithWhereUniqueWithoutWorkspaceInput
  >;
  upsert?: Maybe<
    | WorkspaceParticipantUpsertWithWhereUniqueWithoutWorkspaceInput[]
    | WorkspaceParticipantUpsertWithWhereUniqueWithoutWorkspaceInput
  >;
  deleteMany?: Maybe<
    | WorkspaceParticipantScalarWhereInput[]
    | WorkspaceParticipantScalarWhereInput
  >;
  updateMany?: Maybe<
    | WorkspaceParticipantUpdateManyWithWhereNestedInput[]
    | WorkspaceParticipantUpdateManyWithWhereNestedInput
  >;
}

export interface WorkspaceParticipantUpdateWithWhereUniqueWithoutWorkspaceInput {
  where: WorkspaceParticipantWhereUniqueInput;
  data: WorkspaceParticipantUpdateWithoutWorkspaceDataInput;
}

export interface WorkspaceParticipantUpdateWithoutWorkspaceDataInput {
  privilege?: Maybe<Privilege>;
  token?: Maybe<WorkspaceTokenUpdateOneWithoutParticipantsInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutWorkspaceParticipationsInput>;
}

export interface WorkspaceTokenUpdateOneWithoutParticipantsInput {
  create?: Maybe<WorkspaceTokenCreateWithoutParticipantsInput>;
  update?: Maybe<WorkspaceTokenUpdateWithoutParticipantsDataInput>;
  upsert?: Maybe<WorkspaceTokenUpsertWithoutParticipantsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<WorkspaceTokenWhereUniqueInput>;
}

export interface WorkspaceTokenUpdateWithoutParticipantsDataInput {
  privilege?: Maybe<Privilege>;
  revoked?: Maybe<Boolean>;
  workspace?: Maybe<WorkspaceUpdateOneRequiredWithoutTokensInput>;
}

export interface WorkspaceUpdateOneRequiredWithoutTokensInput {
  create?: Maybe<WorkspaceCreateWithoutTokensInput>;
  update?: Maybe<WorkspaceUpdateWithoutTokensDataInput>;
  upsert?: Maybe<WorkspaceUpsertWithoutTokensInput>;
  connect?: Maybe<WorkspaceWhereUniqueInput>;
}

export interface WorkspaceUpdateWithoutTokensDataInput {
  name?: Maybe<String>;
  sourceProject?: Maybe<ProjectUpdateOneWithoutWorkspacesInput>;
  sourceTemplate?: Maybe<WorkspaceUpdateOneWithoutClonesInput>;
  asMerge?: Maybe<ProjectUpdateOneWithoutMergesInput>;
  asTemplate?: Maybe<ProjectUpdateOneWithoutTemplatesInput>;
  clones?: Maybe<WorkspaceUpdateManyWithoutSourceTemplateInput>;
  courses?: Maybe<CourseUpdateManyWithoutWorkspaceInput>;
  courseOrder?: Maybe<WorkspaceUpdatecourseOrderInput>;
  concepts?: Maybe<ConceptUpdateManyWithoutWorkspaceInput>;
  commonConcepts?: Maybe<ConceptUpdateManyInput>;
  conceptLinks?: Maybe<ConceptLinkUpdateManyWithoutWorkspaceInput>;
  courseLinks?: Maybe<CourseLinkUpdateManyWithoutWorkspaceInput>;
  goals?: Maybe<ConceptUpdateManyInput>;
  goalLinks?: Maybe<GoalLinkUpdateManyWithoutWorkspaceInput>;
  participants?: Maybe<WorkspaceParticipantUpdateManyWithoutWorkspaceInput>;
  mainCourse?: Maybe<CourseUpdateOneInput>;
  pointGroups?: Maybe<PointGroupUpdateManyWithoutWorkspaceInput>;
  courseTags?: Maybe<TagUpdateManyInput>;
  conceptTags?: Maybe<TagUpdateManyInput>;
  goalTags?: Maybe<TagUpdateManyInput>;
  createdBy?: Maybe<UserUpdateOneInput>;
}

export interface CourseUpdateOneInput {
  create?: Maybe<CourseCreateInput>;
  update?: Maybe<CourseUpdateDataInput>;
  upsert?: Maybe<CourseUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<CourseWhereUniqueInput>;
}

export interface CourseUpdateDataInput {
  name?: Maybe<String>;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  tags?: Maybe<TagUpdateManyInput>;
  sourceCourse?: Maybe<CourseUpdateOneWithoutClonesInput>;
  clones?: Maybe<CourseUpdateManyWithoutSourceCourseInput>;
  linksFromCourse?: Maybe<CourseLinkUpdateManyWithoutFromInput>;
  linksToCourse?: Maybe<CourseLinkUpdateManyWithoutToInput>;
  workspace?: Maybe<WorkspaceUpdateOneRequiredWithoutCoursesInput>;
  concepts?: Maybe<ConceptUpdateManyWithoutCourseInput>;
  conceptOrder?: Maybe<CourseUpdateconceptOrderInput>;
  objectiveOrder?: Maybe<CourseUpdateobjectiveOrderInput>;
  createdBy?: Maybe<UserUpdateOneRequiredInput>;
  goalLinks?: Maybe<GoalLinkUpdateManyWithoutCourseInput>;
}

export interface GoalLinkUpdateManyWithoutCourseInput {
  create?: Maybe<
    GoalLinkCreateWithoutCourseInput[] | GoalLinkCreateWithoutCourseInput
  >;
  delete?: Maybe<GoalLinkWhereUniqueInput[] | GoalLinkWhereUniqueInput>;
  connect?: Maybe<GoalLinkWhereUniqueInput[] | GoalLinkWhereUniqueInput>;
  set?: Maybe<GoalLinkWhereUniqueInput[] | GoalLinkWhereUniqueInput>;
  disconnect?: Maybe<GoalLinkWhereUniqueInput[] | GoalLinkWhereUniqueInput>;
  update?: Maybe<
    | GoalLinkUpdateWithWhereUniqueWithoutCourseInput[]
    | GoalLinkUpdateWithWhereUniqueWithoutCourseInput
  >;
  upsert?: Maybe<
    | GoalLinkUpsertWithWhereUniqueWithoutCourseInput[]
    | GoalLinkUpsertWithWhereUniqueWithoutCourseInput
  >;
  deleteMany?: Maybe<GoalLinkScalarWhereInput[] | GoalLinkScalarWhereInput>;
  updateMany?: Maybe<
    | GoalLinkUpdateManyWithWhereNestedInput[]
    | GoalLinkUpdateManyWithWhereNestedInput
  >;
}

export interface GoalLinkUpdateWithWhereUniqueWithoutCourseInput {
  where: GoalLinkWhereUniqueInput;
  data: GoalLinkUpdateWithoutCourseDataInput;
}

export interface GoalLinkUpdateWithoutCourseDataInput {
  goal?: Maybe<ConceptUpdateOneRequiredInput>;
  workspace?: Maybe<WorkspaceUpdateOneRequiredWithoutGoalLinksInput>;
  text?: Maybe<String>;
  createdBy?: Maybe<UserUpdateOneRequiredInput>;
}

export interface WorkspaceUpdateOneRequiredWithoutGoalLinksInput {
  create?: Maybe<WorkspaceCreateWithoutGoalLinksInput>;
  update?: Maybe<WorkspaceUpdateWithoutGoalLinksDataInput>;
  upsert?: Maybe<WorkspaceUpsertWithoutGoalLinksInput>;
  connect?: Maybe<WorkspaceWhereUniqueInput>;
}

export interface WorkspaceUpdateWithoutGoalLinksDataInput {
  name?: Maybe<String>;
  sourceProject?: Maybe<ProjectUpdateOneWithoutWorkspacesInput>;
  sourceTemplate?: Maybe<WorkspaceUpdateOneWithoutClonesInput>;
  asMerge?: Maybe<ProjectUpdateOneWithoutMergesInput>;
  asTemplate?: Maybe<ProjectUpdateOneWithoutTemplatesInput>;
  clones?: Maybe<WorkspaceUpdateManyWithoutSourceTemplateInput>;
  courses?: Maybe<CourseUpdateManyWithoutWorkspaceInput>;
  courseOrder?: Maybe<WorkspaceUpdatecourseOrderInput>;
  concepts?: Maybe<ConceptUpdateManyWithoutWorkspaceInput>;
  commonConcepts?: Maybe<ConceptUpdateManyInput>;
  conceptLinks?: Maybe<ConceptLinkUpdateManyWithoutWorkspaceInput>;
  courseLinks?: Maybe<CourseLinkUpdateManyWithoutWorkspaceInput>;
  goals?: Maybe<ConceptUpdateManyInput>;
  participants?: Maybe<WorkspaceParticipantUpdateManyWithoutWorkspaceInput>;
  tokens?: Maybe<WorkspaceTokenUpdateManyWithoutWorkspaceInput>;
  mainCourse?: Maybe<CourseUpdateOneInput>;
  pointGroups?: Maybe<PointGroupUpdateManyWithoutWorkspaceInput>;
  courseTags?: Maybe<TagUpdateManyInput>;
  conceptTags?: Maybe<TagUpdateManyInput>;
  goalTags?: Maybe<TagUpdateManyInput>;
  createdBy?: Maybe<UserUpdateOneInput>;
}

export interface WorkspaceTokenUpdateManyWithoutWorkspaceInput {
  create?: Maybe<
    | WorkspaceTokenCreateWithoutWorkspaceInput[]
    | WorkspaceTokenCreateWithoutWorkspaceInput
  >;
  delete?: Maybe<
    WorkspaceTokenWhereUniqueInput[] | WorkspaceTokenWhereUniqueInput
  >;
  connect?: Maybe<
    WorkspaceTokenWhereUniqueInput[] | WorkspaceTokenWhereUniqueInput
  >;
  set?: Maybe<
    WorkspaceTokenWhereUniqueInput[] | WorkspaceTokenWhereUniqueInput
  >;
  disconnect?: Maybe<
    WorkspaceTokenWhereUniqueInput[] | WorkspaceTokenWhereUniqueInput
  >;
  update?: Maybe<
    | WorkspaceTokenUpdateWithWhereUniqueWithoutWorkspaceInput[]
    | WorkspaceTokenUpdateWithWhereUniqueWithoutWorkspaceInput
  >;
  upsert?: Maybe<
    | WorkspaceTokenUpsertWithWhereUniqueWithoutWorkspaceInput[]
    | WorkspaceTokenUpsertWithWhereUniqueWithoutWorkspaceInput
  >;
  deleteMany?: Maybe<
    WorkspaceTokenScalarWhereInput[] | WorkspaceTokenScalarWhereInput
  >;
  updateMany?: Maybe<
    | WorkspaceTokenUpdateManyWithWhereNestedInput[]
    | WorkspaceTokenUpdateManyWithWhereNestedInput
  >;
}

export interface WorkspaceTokenUpdateWithWhereUniqueWithoutWorkspaceInput {
  where: WorkspaceTokenWhereUniqueInput;
  data: WorkspaceTokenUpdateWithoutWorkspaceDataInput;
}

export interface WorkspaceTokenUpdateWithoutWorkspaceDataInput {
  privilege?: Maybe<Privilege>;
  revoked?: Maybe<Boolean>;
  participants?: Maybe<WorkspaceParticipantUpdateManyWithoutTokenInput>;
}

export interface WorkspaceParticipantUpdateManyWithoutTokenInput {
  create?: Maybe<
    | WorkspaceParticipantCreateWithoutTokenInput[]
    | WorkspaceParticipantCreateWithoutTokenInput
  >;
  delete?: Maybe<
    | WorkspaceParticipantWhereUniqueInput[]
    | WorkspaceParticipantWhereUniqueInput
  >;
  connect?: Maybe<
    | WorkspaceParticipantWhereUniqueInput[]
    | WorkspaceParticipantWhereUniqueInput
  >;
  set?: Maybe<
    | WorkspaceParticipantWhereUniqueInput[]
    | WorkspaceParticipantWhereUniqueInput
  >;
  disconnect?: Maybe<
    | WorkspaceParticipantWhereUniqueInput[]
    | WorkspaceParticipantWhereUniqueInput
  >;
  update?: Maybe<
    | WorkspaceParticipantUpdateWithWhereUniqueWithoutTokenInput[]
    | WorkspaceParticipantUpdateWithWhereUniqueWithoutTokenInput
  >;
  upsert?: Maybe<
    | WorkspaceParticipantUpsertWithWhereUniqueWithoutTokenInput[]
    | WorkspaceParticipantUpsertWithWhereUniqueWithoutTokenInput
  >;
  deleteMany?: Maybe<
    | WorkspaceParticipantScalarWhereInput[]
    | WorkspaceParticipantScalarWhereInput
  >;
  updateMany?: Maybe<
    | WorkspaceParticipantUpdateManyWithWhereNestedInput[]
    | WorkspaceParticipantUpdateManyWithWhereNestedInput
  >;
}

export interface WorkspaceParticipantUpdateWithWhereUniqueWithoutTokenInput {
  where: WorkspaceParticipantWhereUniqueInput;
  data: WorkspaceParticipantUpdateWithoutTokenDataInput;
}

export interface WorkspaceParticipantUpdateWithoutTokenDataInput {
  privilege?: Maybe<Privilege>;
  workspace?: Maybe<WorkspaceUpdateOneRequiredWithoutParticipantsInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutWorkspaceParticipationsInput>;
}

export interface UserUpdateOneRequiredWithoutWorkspaceParticipationsInput {
  create?: Maybe<UserCreateWithoutWorkspaceParticipationsInput>;
  update?: Maybe<UserUpdateWithoutWorkspaceParticipationsDataInput>;
  upsert?: Maybe<UserUpsertWithoutWorkspaceParticipationsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutWorkspaceParticipationsDataInput {
  tmcId?: Maybe<Int>;
  hakaId?: Maybe<String>;
  googleId?: Maybe<String>;
  role?: Maybe<Role>;
  deactivated?: Maybe<Boolean>;
  tokens?: Maybe<AccessTokenUpdateManyWithoutUserInput>;
  projectParticipations?: Maybe<ProjectParticipantUpdateManyWithoutUserInput>;
  seenGuides?: Maybe<UserUpdateseenGuidesInput>;
}

export interface UserUpdateseenGuidesInput {
  set?: Maybe<String[] | String>;
}

export interface UserUpsertWithoutWorkspaceParticipationsInput {
  update: UserUpdateWithoutWorkspaceParticipationsDataInput;
  create: UserCreateWithoutWorkspaceParticipationsInput;
}

export interface WorkspaceParticipantUpsertWithWhereUniqueWithoutTokenInput {
  where: WorkspaceParticipantWhereUniqueInput;
  update: WorkspaceParticipantUpdateWithoutTokenDataInput;
  create: WorkspaceParticipantCreateWithoutTokenInput;
}

export interface WorkspaceParticipantScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  privilege?: Maybe<Privilege>;
  privilege_not?: Maybe<Privilege>;
  privilege_in?: Maybe<Privilege[] | Privilege>;
  privilege_not_in?: Maybe<Privilege[] | Privilege>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    | WorkspaceParticipantScalarWhereInput[]
    | WorkspaceParticipantScalarWhereInput
  >;
  OR?: Maybe<
    | WorkspaceParticipantScalarWhereInput[]
    | WorkspaceParticipantScalarWhereInput
  >;
  NOT?: Maybe<
    | WorkspaceParticipantScalarWhereInput[]
    | WorkspaceParticipantScalarWhereInput
  >;
}

export interface WorkspaceParticipantUpdateManyWithWhereNestedInput {
  where: WorkspaceParticipantScalarWhereInput;
  data: WorkspaceParticipantUpdateManyDataInput;
}

export interface WorkspaceParticipantUpdateManyDataInput {
  privilege?: Maybe<Privilege>;
}

export interface WorkspaceTokenUpsertWithWhereUniqueWithoutWorkspaceInput {
  where: WorkspaceTokenWhereUniqueInput;
  update: WorkspaceTokenUpdateWithoutWorkspaceDataInput;
  create: WorkspaceTokenCreateWithoutWorkspaceInput;
}

export interface WorkspaceTokenScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  privilege?: Maybe<Privilege>;
  privilege_not?: Maybe<Privilege>;
  privilege_in?: Maybe<Privilege[] | Privilege>;
  privilege_not_in?: Maybe<Privilege[] | Privilege>;
  revoked?: Maybe<Boolean>;
  revoked_not?: Maybe<Boolean>;
  AND?: Maybe<
    WorkspaceTokenScalarWhereInput[] | WorkspaceTokenScalarWhereInput
  >;
  OR?: Maybe<WorkspaceTokenScalarWhereInput[] | WorkspaceTokenScalarWhereInput>;
  NOT?: Maybe<
    WorkspaceTokenScalarWhereInput[] | WorkspaceTokenScalarWhereInput
  >;
}

export interface WorkspaceTokenUpdateManyWithWhereNestedInput {
  where: WorkspaceTokenScalarWhereInput;
  data: WorkspaceTokenUpdateManyDataInput;
}

export interface WorkspaceTokenUpdateManyDataInput {
  privilege?: Maybe<Privilege>;
  revoked?: Maybe<Boolean>;
}

export interface PointGroupUpdateManyWithoutWorkspaceInput {
  create?: Maybe<
    | PointGroupCreateWithoutWorkspaceInput[]
    | PointGroupCreateWithoutWorkspaceInput
  >;
  delete?: Maybe<PointGroupWhereUniqueInput[] | PointGroupWhereUniqueInput>;
  connect?: Maybe<PointGroupWhereUniqueInput[] | PointGroupWhereUniqueInput>;
  set?: Maybe<PointGroupWhereUniqueInput[] | PointGroupWhereUniqueInput>;
  disconnect?: Maybe<PointGroupWhereUniqueInput[] | PointGroupWhereUniqueInput>;
  update?: Maybe<
    | PointGroupUpdateWithWhereUniqueWithoutWorkspaceInput[]
    | PointGroupUpdateWithWhereUniqueWithoutWorkspaceInput
  >;
  upsert?: Maybe<
    | PointGroupUpsertWithWhereUniqueWithoutWorkspaceInput[]
    | PointGroupUpsertWithWhereUniqueWithoutWorkspaceInput
  >;
  deleteMany?: Maybe<PointGroupScalarWhereInput[] | PointGroupScalarWhereInput>;
  updateMany?: Maybe<
    | PointGroupUpdateManyWithWhereNestedInput[]
    | PointGroupUpdateManyWithWhereNestedInput
  >;
}

export interface PointGroupUpdateWithWhereUniqueWithoutWorkspaceInput {
  where: PointGroupWhereUniqueInput;
  data: PointGroupUpdateWithoutWorkspaceDataInput;
}

export interface PointGroupUpdateWithoutWorkspaceDataInput {
  name?: Maybe<String>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  maxPoints?: Maybe<Int>;
  pointsPerConcept?: Maybe<Float>;
  course?: Maybe<CourseUpdateOneRequiredInput>;
  completions?: Maybe<CompletionUpdateManyWithoutPointGroupInput>;
  createdBy?: Maybe<UserUpdateOneInput>;
}

export interface CourseUpdateOneRequiredInput {
  create?: Maybe<CourseCreateInput>;
  update?: Maybe<CourseUpdateDataInput>;
  upsert?: Maybe<CourseUpsertNestedInput>;
  connect?: Maybe<CourseWhereUniqueInput>;
}

export interface CourseUpsertNestedInput {
  update: CourseUpdateDataInput;
  create: CourseCreateInput;
}

export interface CompletionUpdateManyWithoutPointGroupInput {
  create?: Maybe<
    | CompletionCreateWithoutPointGroupInput[]
    | CompletionCreateWithoutPointGroupInput
  >;
  delete?: Maybe<CompletionWhereUniqueInput[] | CompletionWhereUniqueInput>;
  connect?: Maybe<CompletionWhereUniqueInput[] | CompletionWhereUniqueInput>;
  set?: Maybe<CompletionWhereUniqueInput[] | CompletionWhereUniqueInput>;
  disconnect?: Maybe<CompletionWhereUniqueInput[] | CompletionWhereUniqueInput>;
  update?: Maybe<
    | CompletionUpdateWithWhereUniqueWithoutPointGroupInput[]
    | CompletionUpdateWithWhereUniqueWithoutPointGroupInput
  >;
  upsert?: Maybe<
    | CompletionUpsertWithWhereUniqueWithoutPointGroupInput[]
    | CompletionUpsertWithWhereUniqueWithoutPointGroupInput
  >;
  deleteMany?: Maybe<CompletionScalarWhereInput[] | CompletionScalarWhereInput>;
  updateMany?: Maybe<
    | CompletionUpdateManyWithWhereNestedInput[]
    | CompletionUpdateManyWithWhereNestedInput
  >;
}

export interface CompletionUpdateWithWhereUniqueWithoutPointGroupInput {
  where: CompletionWhereUniqueInput;
  data: CompletionUpdateWithoutPointGroupDataInput;
}

export interface CompletionUpdateWithoutPointGroupDataInput {
  user?: Maybe<UserUpdateOneRequiredInput>;
  conceptAmount?: Maybe<Int>;
}

export interface CompletionUpsertWithWhereUniqueWithoutPointGroupInput {
  where: CompletionWhereUniqueInput;
  update: CompletionUpdateWithoutPointGroupDataInput;
  create: CompletionCreateWithoutPointGroupInput;
}

export interface CompletionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  conceptAmount?: Maybe<Int>;
  conceptAmount_not?: Maybe<Int>;
  conceptAmount_in?: Maybe<Int[] | Int>;
  conceptAmount_not_in?: Maybe<Int[] | Int>;
  conceptAmount_lt?: Maybe<Int>;
  conceptAmount_lte?: Maybe<Int>;
  conceptAmount_gt?: Maybe<Int>;
  conceptAmount_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CompletionScalarWhereInput[] | CompletionScalarWhereInput>;
  OR?: Maybe<CompletionScalarWhereInput[] | CompletionScalarWhereInput>;
  NOT?: Maybe<CompletionScalarWhereInput[] | CompletionScalarWhereInput>;
}

export interface CompletionUpdateManyWithWhereNestedInput {
  where: CompletionScalarWhereInput;
  data: CompletionUpdateManyDataInput;
}

export interface CompletionUpdateManyDataInput {
  conceptAmount?: Maybe<Int>;
}

export interface UserUpdateOneInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface PointGroupUpsertWithWhereUniqueWithoutWorkspaceInput {
  where: PointGroupWhereUniqueInput;
  update: PointGroupUpdateWithoutWorkspaceDataInput;
  create: PointGroupCreateWithoutWorkspaceInput;
}

export interface PointGroupScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  startDate?: Maybe<DateTimeInput>;
  startDate_not?: Maybe<DateTimeInput>;
  startDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_lt?: Maybe<DateTimeInput>;
  startDate_lte?: Maybe<DateTimeInput>;
  startDate_gt?: Maybe<DateTimeInput>;
  startDate_gte?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  endDate_not?: Maybe<DateTimeInput>;
  endDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endDate_lt?: Maybe<DateTimeInput>;
  endDate_lte?: Maybe<DateTimeInput>;
  endDate_gt?: Maybe<DateTimeInput>;
  endDate_gte?: Maybe<DateTimeInput>;
  maxPoints?: Maybe<Int>;
  maxPoints_not?: Maybe<Int>;
  maxPoints_in?: Maybe<Int[] | Int>;
  maxPoints_not_in?: Maybe<Int[] | Int>;
  maxPoints_lt?: Maybe<Int>;
  maxPoints_lte?: Maybe<Int>;
  maxPoints_gt?: Maybe<Int>;
  maxPoints_gte?: Maybe<Int>;
  pointsPerConcept?: Maybe<Float>;
  pointsPerConcept_not?: Maybe<Float>;
  pointsPerConcept_in?: Maybe<Float[] | Float>;
  pointsPerConcept_not_in?: Maybe<Float[] | Float>;
  pointsPerConcept_lt?: Maybe<Float>;
  pointsPerConcept_lte?: Maybe<Float>;
  pointsPerConcept_gt?: Maybe<Float>;
  pointsPerConcept_gte?: Maybe<Float>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PointGroupScalarWhereInput[] | PointGroupScalarWhereInput>;
  OR?: Maybe<PointGroupScalarWhereInput[] | PointGroupScalarWhereInput>;
  NOT?: Maybe<PointGroupScalarWhereInput[] | PointGroupScalarWhereInput>;
}

export interface PointGroupUpdateManyWithWhereNestedInput {
  where: PointGroupScalarWhereInput;
  data: PointGroupUpdateManyDataInput;
}

export interface PointGroupUpdateManyDataInput {
  name?: Maybe<String>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  maxPoints?: Maybe<Int>;
  pointsPerConcept?: Maybe<Float>;
}

export interface WorkspaceUpsertWithoutGoalLinksInput {
  update: WorkspaceUpdateWithoutGoalLinksDataInput;
  create: WorkspaceCreateWithoutGoalLinksInput;
}

export interface GoalLinkUpsertWithWhereUniqueWithoutCourseInput {
  where: GoalLinkWhereUniqueInput;
  update: GoalLinkUpdateWithoutCourseDataInput;
  create: GoalLinkCreateWithoutCourseInput;
}

export interface WorkspaceUpsertWithoutTokensInput {
  update: WorkspaceUpdateWithoutTokensDataInput;
  create: WorkspaceCreateWithoutTokensInput;
}

export interface WorkspaceTokenUpsertWithoutParticipantsInput {
  update: WorkspaceTokenUpdateWithoutParticipantsDataInput;
  create: WorkspaceTokenCreateWithoutParticipantsInput;
}

export interface WorkspaceParticipantUpsertWithWhereUniqueWithoutWorkspaceInput {
  where: WorkspaceParticipantWhereUniqueInput;
  update: WorkspaceParticipantUpdateWithoutWorkspaceDataInput;
  create: WorkspaceParticipantCreateWithoutWorkspaceInput;
}

export interface WorkspaceUpsertWithoutConceptsInput {
  update: WorkspaceUpdateWithoutConceptsDataInput;
  create: WorkspaceCreateWithoutConceptsInput;
}

export interface ConceptUpsertWithoutLinksFromConceptInput {
  update: ConceptUpdateWithoutLinksFromConceptDataInput;
  create: ConceptCreateWithoutLinksFromConceptInput;
}

export interface WorkspaceUpdateOneRequiredWithoutConceptLinksInput {
  create?: Maybe<WorkspaceCreateWithoutConceptLinksInput>;
  update?: Maybe<WorkspaceUpdateWithoutConceptLinksDataInput>;
  upsert?: Maybe<WorkspaceUpsertWithoutConceptLinksInput>;
  connect?: Maybe<WorkspaceWhereUniqueInput>;
}

export interface WorkspaceUpdateWithoutConceptLinksDataInput {
  name?: Maybe<String>;
  sourceProject?: Maybe<ProjectUpdateOneWithoutWorkspacesInput>;
  sourceTemplate?: Maybe<WorkspaceUpdateOneWithoutClonesInput>;
  asMerge?: Maybe<ProjectUpdateOneWithoutMergesInput>;
  asTemplate?: Maybe<ProjectUpdateOneWithoutTemplatesInput>;
  clones?: Maybe<WorkspaceUpdateManyWithoutSourceTemplateInput>;
  courses?: Maybe<CourseUpdateManyWithoutWorkspaceInput>;
  courseOrder?: Maybe<WorkspaceUpdatecourseOrderInput>;
  concepts?: Maybe<ConceptUpdateManyWithoutWorkspaceInput>;
  commonConcepts?: Maybe<ConceptUpdateManyInput>;
  courseLinks?: Maybe<CourseLinkUpdateManyWithoutWorkspaceInput>;
  goals?: Maybe<ConceptUpdateManyInput>;
  goalLinks?: Maybe<GoalLinkUpdateManyWithoutWorkspaceInput>;
  participants?: Maybe<WorkspaceParticipantUpdateManyWithoutWorkspaceInput>;
  tokens?: Maybe<WorkspaceTokenUpdateManyWithoutWorkspaceInput>;
  mainCourse?: Maybe<CourseUpdateOneInput>;
  pointGroups?: Maybe<PointGroupUpdateManyWithoutWorkspaceInput>;
  courseTags?: Maybe<TagUpdateManyInput>;
  conceptTags?: Maybe<TagUpdateManyInput>;
  goalTags?: Maybe<TagUpdateManyInput>;
  createdBy?: Maybe<UserUpdateOneInput>;
}

export interface WorkspaceUpsertWithoutConceptLinksInput {
  update: WorkspaceUpdateWithoutConceptLinksDataInput;
  create: WorkspaceCreateWithoutConceptLinksInput;
}

export interface ConceptLinkUpsertWithWhereUniqueWithoutToInput {
  where: ConceptLinkWhereUniqueInput;
  update: ConceptLinkUpdateWithoutToDataInput;
  create: ConceptLinkCreateWithoutToInput;
}

export interface ConceptUpsertWithWhereUniqueNestedInput {
  where: ConceptWhereUniqueInput;
  update: ConceptUpdateDataInput;
  create: ConceptCreateInput;
}

export interface WorkspaceUpsertWithWhereUniqueWithoutAsTemplateInput {
  where: WorkspaceWhereUniqueInput;
  update: WorkspaceUpdateWithoutAsTemplateDataInput;
  create: WorkspaceCreateWithoutAsTemplateInput;
}

export interface WorkspaceScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<WorkspaceScalarWhereInput[] | WorkspaceScalarWhereInput>;
  OR?: Maybe<WorkspaceScalarWhereInput[] | WorkspaceScalarWhereInput>;
  NOT?: Maybe<WorkspaceScalarWhereInput[] | WorkspaceScalarWhereInput>;
}

export interface WorkspaceUpdateManyWithWhereNestedInput {
  where: WorkspaceScalarWhereInput;
  data: WorkspaceUpdateManyDataInput;
}

export interface WorkspaceUpdateManyDataInput {
  name?: Maybe<String>;
  courseOrder?: Maybe<WorkspaceUpdatecourseOrderInput>;
}

export interface ProjectTokenUpdateManyWithoutProjectInput {
  create?: Maybe<
    | ProjectTokenCreateWithoutProjectInput[]
    | ProjectTokenCreateWithoutProjectInput
  >;
  delete?: Maybe<ProjectTokenWhereUniqueInput[] | ProjectTokenWhereUniqueInput>;
  connect?: Maybe<
    ProjectTokenWhereUniqueInput[] | ProjectTokenWhereUniqueInput
  >;
  set?: Maybe<ProjectTokenWhereUniqueInput[] | ProjectTokenWhereUniqueInput>;
  disconnect?: Maybe<
    ProjectTokenWhereUniqueInput[] | ProjectTokenWhereUniqueInput
  >;
  update?: Maybe<
    | ProjectTokenUpdateWithWhereUniqueWithoutProjectInput[]
    | ProjectTokenUpdateWithWhereUniqueWithoutProjectInput
  >;
  upsert?: Maybe<
    | ProjectTokenUpsertWithWhereUniqueWithoutProjectInput[]
    | ProjectTokenUpsertWithWhereUniqueWithoutProjectInput
  >;
  deleteMany?: Maybe<
    ProjectTokenScalarWhereInput[] | ProjectTokenScalarWhereInput
  >;
  updateMany?: Maybe<
    | ProjectTokenUpdateManyWithWhereNestedInput[]
    | ProjectTokenUpdateManyWithWhereNestedInput
  >;
}

export interface ProjectTokenUpdateWithWhereUniqueWithoutProjectInput {
  where: ProjectTokenWhereUniqueInput;
  data: ProjectTokenUpdateWithoutProjectDataInput;
}

export interface ProjectTokenUpdateWithoutProjectDataInput {
  privilege?: Maybe<Privilege>;
  revoked?: Maybe<Boolean>;
  participants?: Maybe<ProjectParticipantUpdateManyWithoutTokenInput>;
}

export interface ProjectParticipantUpdateManyWithoutTokenInput {
  create?: Maybe<
    | ProjectParticipantCreateWithoutTokenInput[]
    | ProjectParticipantCreateWithoutTokenInput
  >;
  delete?: Maybe<
    ProjectParticipantWhereUniqueInput[] | ProjectParticipantWhereUniqueInput
  >;
  connect?: Maybe<
    ProjectParticipantWhereUniqueInput[] | ProjectParticipantWhereUniqueInput
  >;
  set?: Maybe<
    ProjectParticipantWhereUniqueInput[] | ProjectParticipantWhereUniqueInput
  >;
  disconnect?: Maybe<
    ProjectParticipantWhereUniqueInput[] | ProjectParticipantWhereUniqueInput
  >;
  update?: Maybe<
    | ProjectParticipantUpdateWithWhereUniqueWithoutTokenInput[]
    | ProjectParticipantUpdateWithWhereUniqueWithoutTokenInput
  >;
  upsert?: Maybe<
    | ProjectParticipantUpsertWithWhereUniqueWithoutTokenInput[]
    | ProjectParticipantUpsertWithWhereUniqueWithoutTokenInput
  >;
  deleteMany?: Maybe<
    ProjectParticipantScalarWhereInput[] | ProjectParticipantScalarWhereInput
  >;
  updateMany?: Maybe<
    | ProjectParticipantUpdateManyWithWhereNestedInput[]
    | ProjectParticipantUpdateManyWithWhereNestedInput
  >;
}

export interface ProjectParticipantUpdateWithWhereUniqueWithoutTokenInput {
  where: ProjectParticipantWhereUniqueInput;
  data: ProjectParticipantUpdateWithoutTokenDataInput;
}

export interface ProjectParticipantUpdateWithoutTokenDataInput {
  privilege?: Maybe<Privilege>;
  project?: Maybe<ProjectUpdateOneRequiredWithoutParticipantsInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutProjectParticipationsInput>;
}

export interface UserUpdateOneRequiredWithoutProjectParticipationsInput {
  create?: Maybe<UserCreateWithoutProjectParticipationsInput>;
  update?: Maybe<UserUpdateWithoutProjectParticipationsDataInput>;
  upsert?: Maybe<UserUpsertWithoutProjectParticipationsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutProjectParticipationsDataInput {
  tmcId?: Maybe<Int>;
  hakaId?: Maybe<String>;
  googleId?: Maybe<String>;
  role?: Maybe<Role>;
  deactivated?: Maybe<Boolean>;
  tokens?: Maybe<AccessTokenUpdateManyWithoutUserInput>;
  workspaceParticipations?: Maybe<
    WorkspaceParticipantUpdateManyWithoutUserInput
  >;
  seenGuides?: Maybe<UserUpdateseenGuidesInput>;
}

export interface UserUpsertWithoutProjectParticipationsInput {
  update: UserUpdateWithoutProjectParticipationsDataInput;
  create: UserCreateWithoutProjectParticipationsInput;
}

export interface ProjectParticipantUpsertWithWhereUniqueWithoutTokenInput {
  where: ProjectParticipantWhereUniqueInput;
  update: ProjectParticipantUpdateWithoutTokenDataInput;
  create: ProjectParticipantCreateWithoutTokenInput;
}

export interface ProjectParticipantScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  privilege?: Maybe<Privilege>;
  privilege_not?: Maybe<Privilege>;
  privilege_in?: Maybe<Privilege[] | Privilege>;
  privilege_not_in?: Maybe<Privilege[] | Privilege>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    ProjectParticipantScalarWhereInput[] | ProjectParticipantScalarWhereInput
  >;
  OR?: Maybe<
    ProjectParticipantScalarWhereInput[] | ProjectParticipantScalarWhereInput
  >;
  NOT?: Maybe<
    ProjectParticipantScalarWhereInput[] | ProjectParticipantScalarWhereInput
  >;
}

export interface ProjectParticipantUpdateManyWithWhereNestedInput {
  where: ProjectParticipantScalarWhereInput;
  data: ProjectParticipantUpdateManyDataInput;
}

export interface ProjectParticipantUpdateManyDataInput {
  privilege?: Maybe<Privilege>;
}

export interface ProjectTokenUpsertWithWhereUniqueWithoutProjectInput {
  where: ProjectTokenWhereUniqueInput;
  update: ProjectTokenUpdateWithoutProjectDataInput;
  create: ProjectTokenCreateWithoutProjectInput;
}

export interface ProjectTokenScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  privilege?: Maybe<Privilege>;
  privilege_not?: Maybe<Privilege>;
  privilege_in?: Maybe<Privilege[] | Privilege>;
  privilege_not_in?: Maybe<Privilege[] | Privilege>;
  revoked?: Maybe<Boolean>;
  revoked_not?: Maybe<Boolean>;
  AND?: Maybe<ProjectTokenScalarWhereInput[] | ProjectTokenScalarWhereInput>;
  OR?: Maybe<ProjectTokenScalarWhereInput[] | ProjectTokenScalarWhereInput>;
  NOT?: Maybe<ProjectTokenScalarWhereInput[] | ProjectTokenScalarWhereInput>;
}

export interface ProjectTokenUpdateManyWithWhereNestedInput {
  where: ProjectTokenScalarWhereInput;
  data: ProjectTokenUpdateManyDataInput;
}

export interface ProjectTokenUpdateManyDataInput {
  privilege?: Maybe<Privilege>;
  revoked?: Maybe<Boolean>;
}

export interface ProjectUpsertWithoutParticipantsInput {
  update: ProjectUpdateWithoutParticipantsDataInput;
  create: ProjectCreateWithoutParticipantsInput;
}

export interface ProjectTokenUpdateOneWithoutParticipantsInput {
  create?: Maybe<ProjectTokenCreateWithoutParticipantsInput>;
  update?: Maybe<ProjectTokenUpdateWithoutParticipantsDataInput>;
  upsert?: Maybe<ProjectTokenUpsertWithoutParticipantsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ProjectTokenWhereUniqueInput>;
}

export interface ProjectTokenUpdateWithoutParticipantsDataInput {
  privilege?: Maybe<Privilege>;
  revoked?: Maybe<Boolean>;
  project?: Maybe<ProjectUpdateOneRequiredWithoutTokensInput>;
}

export interface ProjectUpdateOneRequiredWithoutTokensInput {
  create?: Maybe<ProjectCreateWithoutTokensInput>;
  update?: Maybe<ProjectUpdateWithoutTokensDataInput>;
  upsert?: Maybe<ProjectUpsertWithoutTokensInput>;
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface ProjectUpdateWithoutTokensDataInput {
  name?: Maybe<String>;
  workspaces?: Maybe<WorkspaceUpdateManyWithoutSourceProjectInput>;
  activeTemplate?: Maybe<WorkspaceUpdateOneInput>;
  templates?: Maybe<WorkspaceUpdateManyWithoutAsTemplateInput>;
  merges?: Maybe<WorkspaceUpdateManyWithoutAsMergeInput>;
  participants?: Maybe<ProjectParticipantUpdateManyWithoutProjectInput>;
  createdBy?: Maybe<UserUpdateOneInput>;
}

export interface ProjectParticipantUpdateManyWithoutProjectInput {
  create?: Maybe<
    | ProjectParticipantCreateWithoutProjectInput[]
    | ProjectParticipantCreateWithoutProjectInput
  >;
  delete?: Maybe<
    ProjectParticipantWhereUniqueInput[] | ProjectParticipantWhereUniqueInput
  >;
  connect?: Maybe<
    ProjectParticipantWhereUniqueInput[] | ProjectParticipantWhereUniqueInput
  >;
  set?: Maybe<
    ProjectParticipantWhereUniqueInput[] | ProjectParticipantWhereUniqueInput
  >;
  disconnect?: Maybe<
    ProjectParticipantWhereUniqueInput[] | ProjectParticipantWhereUniqueInput
  >;
  update?: Maybe<
    | ProjectParticipantUpdateWithWhereUniqueWithoutProjectInput[]
    | ProjectParticipantUpdateWithWhereUniqueWithoutProjectInput
  >;
  upsert?: Maybe<
    | ProjectParticipantUpsertWithWhereUniqueWithoutProjectInput[]
    | ProjectParticipantUpsertWithWhereUniqueWithoutProjectInput
  >;
  deleteMany?: Maybe<
    ProjectParticipantScalarWhereInput[] | ProjectParticipantScalarWhereInput
  >;
  updateMany?: Maybe<
    | ProjectParticipantUpdateManyWithWhereNestedInput[]
    | ProjectParticipantUpdateManyWithWhereNestedInput
  >;
}

export interface ProjectParticipantUpdateWithWhereUniqueWithoutProjectInput {
  where: ProjectParticipantWhereUniqueInput;
  data: ProjectParticipantUpdateWithoutProjectDataInput;
}

export interface ProjectParticipantUpdateWithoutProjectDataInput {
  privilege?: Maybe<Privilege>;
  token?: Maybe<ProjectTokenUpdateOneWithoutParticipantsInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutProjectParticipationsInput>;
}

export interface ProjectParticipantUpsertWithWhereUniqueWithoutProjectInput {
  where: ProjectParticipantWhereUniqueInput;
  update: ProjectParticipantUpdateWithoutProjectDataInput;
  create: ProjectParticipantCreateWithoutProjectInput;
}

export interface ProjectUpsertWithoutTokensInput {
  update: ProjectUpdateWithoutTokensDataInput;
  create: ProjectCreateWithoutTokensInput;
}

export interface ProjectTokenUpsertWithoutParticipantsInput {
  update: ProjectTokenUpdateWithoutParticipantsDataInput;
  create: ProjectTokenCreateWithoutParticipantsInput;
}

export interface ProjectParticipantUpsertWithWhereUniqueWithoutUserInput {
  where: ProjectParticipantWhereUniqueInput;
  update: ProjectParticipantUpdateWithoutUserDataInput;
  create: ProjectParticipantCreateWithoutUserInput;
}

export interface CourseUpsertWithoutConceptsInput {
  update: CourseUpdateWithoutConceptsDataInput;
  create: CourseCreateWithoutConceptsInput;
}

export interface ConceptUpsertWithoutLinksToConceptInput {
  update: ConceptUpdateWithoutLinksToConceptDataInput;
  create: ConceptCreateWithoutLinksToConceptInput;
}

export interface ConceptLinkUpsertWithWhereUniqueWithoutFromInput {
  where: ConceptLinkWhereUniqueInput;
  update: ConceptLinkUpdateWithoutFromDataInput;
  create: ConceptLinkCreateWithoutFromInput;
}

export interface ConceptUpsertWithWhereUniqueWithoutSourceCommonInput {
  where: ConceptWhereUniqueInput;
  update: ConceptUpdateWithoutSourceCommonDataInput;
  create: ConceptCreateWithoutSourceCommonInput;
}

export interface ConceptUpsertWithWhereUniqueWithoutSourceConceptInput {
  where: ConceptWhereUniqueInput;
  update: ConceptUpdateWithoutSourceConceptDataInput;
  create: ConceptCreateWithoutSourceConceptInput;
}

export interface ConceptUpsertWithoutCommonClonesInput {
  update: ConceptUpdateWithoutCommonClonesDataInput;
  create: ConceptCreateWithoutCommonClonesInput;
}

export interface ConceptUpsertWithoutClonesInput {
  update: ConceptUpdateWithoutClonesDataInput;
  create: ConceptCreateWithoutClonesInput;
}

export interface ConceptUpsertWithWhereUniqueWithoutWorkspaceInput {
  where: ConceptWhereUniqueInput;
  update: ConceptUpdateWithoutWorkspaceDataInput;
  create: ConceptCreateWithoutWorkspaceInput;
}

export interface WorkspaceUpsertWithoutCoursesInput {
  update: WorkspaceUpdateWithoutCoursesDataInput;
  create: WorkspaceCreateWithoutCoursesInput;
}

export interface CourseUpsertWithoutLinksFromCourseInput {
  update: CourseUpdateWithoutLinksFromCourseDataInput;
  create: CourseCreateWithoutLinksFromCourseInput;
}

export interface WorkspaceUpdateOneRequiredWithoutCourseLinksInput {
  create?: Maybe<WorkspaceCreateWithoutCourseLinksInput>;
  update?: Maybe<WorkspaceUpdateWithoutCourseLinksDataInput>;
  upsert?: Maybe<WorkspaceUpsertWithoutCourseLinksInput>;
  connect?: Maybe<WorkspaceWhereUniqueInput>;
}

export interface WorkspaceUpdateWithoutCourseLinksDataInput {
  name?: Maybe<String>;
  sourceProject?: Maybe<ProjectUpdateOneWithoutWorkspacesInput>;
  sourceTemplate?: Maybe<WorkspaceUpdateOneWithoutClonesInput>;
  asMerge?: Maybe<ProjectUpdateOneWithoutMergesInput>;
  asTemplate?: Maybe<ProjectUpdateOneWithoutTemplatesInput>;
  clones?: Maybe<WorkspaceUpdateManyWithoutSourceTemplateInput>;
  courses?: Maybe<CourseUpdateManyWithoutWorkspaceInput>;
  courseOrder?: Maybe<WorkspaceUpdatecourseOrderInput>;
  concepts?: Maybe<ConceptUpdateManyWithoutWorkspaceInput>;
  commonConcepts?: Maybe<ConceptUpdateManyInput>;
  conceptLinks?: Maybe<ConceptLinkUpdateManyWithoutWorkspaceInput>;
  goals?: Maybe<ConceptUpdateManyInput>;
  goalLinks?: Maybe<GoalLinkUpdateManyWithoutWorkspaceInput>;
  participants?: Maybe<WorkspaceParticipantUpdateManyWithoutWorkspaceInput>;
  tokens?: Maybe<WorkspaceTokenUpdateManyWithoutWorkspaceInput>;
  mainCourse?: Maybe<CourseUpdateOneInput>;
  pointGroups?: Maybe<PointGroupUpdateManyWithoutWorkspaceInput>;
  courseTags?: Maybe<TagUpdateManyInput>;
  conceptTags?: Maybe<TagUpdateManyInput>;
  goalTags?: Maybe<TagUpdateManyInput>;
  createdBy?: Maybe<UserUpdateOneInput>;
}

export interface WorkspaceUpsertWithoutCourseLinksInput {
  update: WorkspaceUpdateWithoutCourseLinksDataInput;
  create: WorkspaceCreateWithoutCourseLinksInput;
}

export interface CourseLinkUpsertWithWhereUniqueWithoutToInput {
  where: CourseLinkWhereUniqueInput;
  update: CourseLinkUpdateWithoutToDataInput;
  create: CourseLinkCreateWithoutToInput;
}

export interface CourseUpsertWithWhereUniqueWithoutSourceCourseInput {
  where: CourseWhereUniqueInput;
  update: CourseUpdateWithoutSourceCourseDataInput;
  create: CourseCreateWithoutSourceCourseInput;
}

export interface CourseScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  official?: Maybe<Boolean>;
  official_not?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  frozen_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CourseScalarWhereInput[] | CourseScalarWhereInput>;
  OR?: Maybe<CourseScalarWhereInput[] | CourseScalarWhereInput>;
  NOT?: Maybe<CourseScalarWhereInput[] | CourseScalarWhereInput>;
}

export interface CourseUpdateManyWithWhereNestedInput {
  where: CourseScalarWhereInput;
  data: CourseUpdateManyDataInput;
}

export interface CourseUpdateManyDataInput {
  name?: Maybe<String>;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  conceptOrder?: Maybe<CourseUpdateconceptOrderInput>;
  objectiveOrder?: Maybe<CourseUpdateobjectiveOrderInput>;
}

export interface CourseUpsertWithoutLinksToCourseInput {
  update: CourseUpdateWithoutLinksToCourseDataInput;
  create: CourseCreateWithoutLinksToCourseInput;
}

export interface CourseLinkUpsertWithWhereUniqueWithoutFromInput {
  where: CourseLinkWhereUniqueInput;
  update: CourseLinkUpdateWithoutFromDataInput;
  create: CourseLinkCreateWithoutFromInput;
}

export interface CourseUpsertWithoutClonesInput {
  update: CourseUpdateWithoutClonesDataInput;
  create: CourseCreateWithoutClonesInput;
}

export interface CourseUpsertWithWhereUniqueWithoutWorkspaceInput {
  where: CourseWhereUniqueInput;
  update: CourseUpdateWithoutWorkspaceDataInput;
  create: CourseCreateWithoutWorkspaceInput;
}

export interface WorkspaceUpsertWithWhereUniqueWithoutSourceTemplateInput {
  where: WorkspaceWhereUniqueInput;
  update: WorkspaceUpdateWithoutSourceTemplateDataInput;
  create: WorkspaceCreateWithoutSourceTemplateInput;
}

export interface WorkspaceUpsertWithWhereUniqueWithoutAsMergeInput {
  where: WorkspaceWhereUniqueInput;
  update: WorkspaceUpdateWithoutAsMergeDataInput;
  create: WorkspaceCreateWithoutAsMergeInput;
}

export interface ProjectUpsertWithoutTemplatesInput {
  update: ProjectUpdateWithoutTemplatesDataInput;
  create: ProjectCreateWithoutTemplatesInput;
}

export interface WorkspaceUpsertWithWhereUniqueWithoutSourceProjectInput {
  where: WorkspaceWhereUniqueInput;
  update: WorkspaceUpdateWithoutSourceProjectDataInput;
  create: WorkspaceCreateWithoutSourceProjectInput;
}

export interface ProjectUpsertWithoutMergesInput {
  update: ProjectUpdateWithoutMergesDataInput;
  create: ProjectCreateWithoutMergesInput;
}

export interface WorkspaceUpsertWithoutClonesInput {
  update: WorkspaceUpdateWithoutClonesDataInput;
  create: WorkspaceCreateWithoutClonesInput;
}

export interface WorkspaceUpsertNestedInput {
  update: WorkspaceUpdateDataInput;
  create: WorkspaceCreateInput;
}

export interface ProjectUpsertWithoutWorkspacesInput {
  update: ProjectUpdateWithoutWorkspacesDataInput;
  create: ProjectCreateWithoutWorkspacesInput;
}

export interface WorkspaceUpsertWithoutParticipantsInput {
  update: WorkspaceUpdateWithoutParticipantsDataInput;
  create: WorkspaceCreateWithoutParticipantsInput;
}

export interface WorkspaceParticipantUpsertWithWhereUniqueWithoutUserInput {
  where: WorkspaceParticipantWhereUniqueInput;
  update: WorkspaceParticipantUpdateWithoutUserDataInput;
  create: WorkspaceParticipantCreateWithoutUserInput;
}

export interface UserUpsertWithoutTokensInput {
  update: UserUpdateWithoutTokensDataInput;
  create: UserCreateWithoutTokensInput;
}

export interface AccessTokenUpdateManyMutationInput {
  token?: Maybe<String>;
  lastSeenAgent?: Maybe<String>;
  lastSeenAddress?: Maybe<String>;
}

export interface CompletionCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneInput;
  conceptAmount?: Maybe<Int>;
  pointGroup: PointGroupCreateOneWithoutCompletionsInput;
}

export interface PointGroupCreateOneWithoutCompletionsInput {
  create?: Maybe<PointGroupCreateWithoutCompletionsInput>;
  connect?: Maybe<PointGroupWhereUniqueInput>;
}

export interface PointGroupCreateWithoutCompletionsInput {
  id?: Maybe<ID_Input>;
  name: String;
  startDate: DateTimeInput;
  endDate: DateTimeInput;
  maxPoints?: Maybe<Int>;
  pointsPerConcept?: Maybe<Float>;
  workspace: WorkspaceCreateOneWithoutPointGroupsInput;
  course: CourseCreateOneInput;
  createdBy?: Maybe<UserCreateOneInput>;
}

export interface WorkspaceCreateOneWithoutPointGroupsInput {
  create?: Maybe<WorkspaceCreateWithoutPointGroupsInput>;
  connect?: Maybe<WorkspaceWhereUniqueInput>;
}

export interface WorkspaceCreateWithoutPointGroupsInput {
  id?: Maybe<ID_Input>;
  name: String;
  sourceProject?: Maybe<ProjectCreateOneWithoutWorkspacesInput>;
  sourceTemplate?: Maybe<WorkspaceCreateOneWithoutClonesInput>;
  asMerge?: Maybe<ProjectCreateOneWithoutMergesInput>;
  asTemplate?: Maybe<ProjectCreateOneWithoutTemplatesInput>;
  clones?: Maybe<WorkspaceCreateManyWithoutSourceTemplateInput>;
  courses?: Maybe<CourseCreateManyWithoutWorkspaceInput>;
  courseOrder?: Maybe<WorkspaceCreatecourseOrderInput>;
  concepts?: Maybe<ConceptCreateManyWithoutWorkspaceInput>;
  commonConcepts?: Maybe<ConceptCreateManyInput>;
  conceptLinks?: Maybe<ConceptLinkCreateManyWithoutWorkspaceInput>;
  courseLinks?: Maybe<CourseLinkCreateManyWithoutWorkspaceInput>;
  goals?: Maybe<ConceptCreateManyInput>;
  goalLinks?: Maybe<GoalLinkCreateManyWithoutWorkspaceInput>;
  participants?: Maybe<WorkspaceParticipantCreateManyWithoutWorkspaceInput>;
  tokens?: Maybe<WorkspaceTokenCreateManyWithoutWorkspaceInput>;
  mainCourse?: Maybe<CourseCreateOneInput>;
  courseTags?: Maybe<TagCreateManyInput>;
  conceptTags?: Maybe<TagCreateManyInput>;
  goalTags?: Maybe<TagCreateManyInput>;
  createdBy?: Maybe<UserCreateOneInput>;
}

export interface CompletionUpdateInput {
  user?: Maybe<UserUpdateOneRequiredInput>;
  conceptAmount?: Maybe<Int>;
  pointGroup?: Maybe<PointGroupUpdateOneRequiredWithoutCompletionsInput>;
}

export interface PointGroupUpdateOneRequiredWithoutCompletionsInput {
  create?: Maybe<PointGroupCreateWithoutCompletionsInput>;
  update?: Maybe<PointGroupUpdateWithoutCompletionsDataInput>;
  upsert?: Maybe<PointGroupUpsertWithoutCompletionsInput>;
  connect?: Maybe<PointGroupWhereUniqueInput>;
}

export interface PointGroupUpdateWithoutCompletionsDataInput {
  name?: Maybe<String>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  maxPoints?: Maybe<Int>;
  pointsPerConcept?: Maybe<Float>;
  workspace?: Maybe<WorkspaceUpdateOneRequiredWithoutPointGroupsInput>;
  course?: Maybe<CourseUpdateOneRequiredInput>;
  createdBy?: Maybe<UserUpdateOneInput>;
}

export interface WorkspaceUpdateOneRequiredWithoutPointGroupsInput {
  create?: Maybe<WorkspaceCreateWithoutPointGroupsInput>;
  update?: Maybe<WorkspaceUpdateWithoutPointGroupsDataInput>;
  upsert?: Maybe<WorkspaceUpsertWithoutPointGroupsInput>;
  connect?: Maybe<WorkspaceWhereUniqueInput>;
}

export interface WorkspaceUpdateWithoutPointGroupsDataInput {
  name?: Maybe<String>;
  sourceProject?: Maybe<ProjectUpdateOneWithoutWorkspacesInput>;
  sourceTemplate?: Maybe<WorkspaceUpdateOneWithoutClonesInput>;
  asMerge?: Maybe<ProjectUpdateOneWithoutMergesInput>;
  asTemplate?: Maybe<ProjectUpdateOneWithoutTemplatesInput>;
  clones?: Maybe<WorkspaceUpdateManyWithoutSourceTemplateInput>;
  courses?: Maybe<CourseUpdateManyWithoutWorkspaceInput>;
  courseOrder?: Maybe<WorkspaceUpdatecourseOrderInput>;
  concepts?: Maybe<ConceptUpdateManyWithoutWorkspaceInput>;
  commonConcepts?: Maybe<ConceptUpdateManyInput>;
  conceptLinks?: Maybe<ConceptLinkUpdateManyWithoutWorkspaceInput>;
  courseLinks?: Maybe<CourseLinkUpdateManyWithoutWorkspaceInput>;
  goals?: Maybe<ConceptUpdateManyInput>;
  goalLinks?: Maybe<GoalLinkUpdateManyWithoutWorkspaceInput>;
  participants?: Maybe<WorkspaceParticipantUpdateManyWithoutWorkspaceInput>;
  tokens?: Maybe<WorkspaceTokenUpdateManyWithoutWorkspaceInput>;
  mainCourse?: Maybe<CourseUpdateOneInput>;
  courseTags?: Maybe<TagUpdateManyInput>;
  conceptTags?: Maybe<TagUpdateManyInput>;
  goalTags?: Maybe<TagUpdateManyInput>;
  createdBy?: Maybe<UserUpdateOneInput>;
}

export interface WorkspaceUpsertWithoutPointGroupsInput {
  update: WorkspaceUpdateWithoutPointGroupsDataInput;
  create: WorkspaceCreateWithoutPointGroupsInput;
}

export interface PointGroupUpsertWithoutCompletionsInput {
  update: PointGroupUpdateWithoutCompletionsDataInput;
  create: PointGroupCreateWithoutCompletionsInput;
}

export interface CompletionUpdateManyMutationInput {
  conceptAmount?: Maybe<Int>;
}

export interface ConceptUpdateInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  level?: Maybe<ConceptLevel>;
  position?: Maybe<String>;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  tags?: Maybe<TagUpdateManyInput>;
  count?: Maybe<Int>;
  sourceConcept?: Maybe<ConceptUpdateOneWithoutClonesInput>;
  clones?: Maybe<ConceptUpdateManyWithoutSourceConceptInput>;
  sourceCommon?: Maybe<ConceptUpdateOneWithoutCommonClonesInput>;
  commonClones?: Maybe<ConceptUpdateManyWithoutSourceCommonInput>;
  linksFromConcept?: Maybe<ConceptLinkUpdateManyWithoutFromInput>;
  linksToConcept?: Maybe<ConceptLinkUpdateManyWithoutToInput>;
  course?: Maybe<CourseUpdateOneWithoutConceptsInput>;
  workspace?: Maybe<WorkspaceUpdateOneRequiredWithoutConceptsInput>;
  createdBy?: Maybe<UserUpdateOneRequiredInput>;
}

export interface ConceptUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  level?: Maybe<ConceptLevel>;
  position?: Maybe<String>;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  count?: Maybe<Int>;
}

export interface ConceptLinkCreateInput {
  id?: Maybe<ID_Input>;
  from: ConceptCreateOneWithoutLinksFromConceptInput;
  to: ConceptCreateOneWithoutLinksToConceptInput;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  weight?: Maybe<Int>;
  count?: Maybe<Int>;
  text?: Maybe<String>;
  level?: Maybe<PrerequisiteLevel>;
  workspace: WorkspaceCreateOneWithoutConceptLinksInput;
  createdBy: UserCreateOneInput;
}

export interface ConceptLinkUpdateInput {
  from?: Maybe<ConceptUpdateOneRequiredWithoutLinksFromConceptInput>;
  to?: Maybe<ConceptUpdateOneRequiredWithoutLinksToConceptInput>;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  weight?: Maybe<Int>;
  count?: Maybe<Int>;
  text?: Maybe<String>;
  level?: Maybe<PrerequisiteLevel>;
  workspace?: Maybe<WorkspaceUpdateOneRequiredWithoutConceptLinksInput>;
  createdBy?: Maybe<UserUpdateOneRequiredInput>;
}

export interface ConceptLinkUpdateManyMutationInput {
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  weight?: Maybe<Int>;
  count?: Maybe<Int>;
  text?: Maybe<String>;
  level?: Maybe<PrerequisiteLevel>;
}

export interface CourseUpdateInput {
  name?: Maybe<String>;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  tags?: Maybe<TagUpdateManyInput>;
  sourceCourse?: Maybe<CourseUpdateOneWithoutClonesInput>;
  clones?: Maybe<CourseUpdateManyWithoutSourceCourseInput>;
  linksFromCourse?: Maybe<CourseLinkUpdateManyWithoutFromInput>;
  linksToCourse?: Maybe<CourseLinkUpdateManyWithoutToInput>;
  workspace?: Maybe<WorkspaceUpdateOneRequiredWithoutCoursesInput>;
  concepts?: Maybe<ConceptUpdateManyWithoutCourseInput>;
  conceptOrder?: Maybe<CourseUpdateconceptOrderInput>;
  objectiveOrder?: Maybe<CourseUpdateobjectiveOrderInput>;
  createdBy?: Maybe<UserUpdateOneRequiredInput>;
  goalLinks?: Maybe<GoalLinkUpdateManyWithoutCourseInput>;
}

export interface CourseUpdateManyMutationInput {
  name?: Maybe<String>;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  conceptOrder?: Maybe<CourseUpdateconceptOrderInput>;
  objectiveOrder?: Maybe<CourseUpdateobjectiveOrderInput>;
}

export interface CourseLinkCreateInput {
  id?: Maybe<ID_Input>;
  from: CourseCreateOneWithoutLinksFromCourseInput;
  to: CourseCreateOneWithoutLinksToCourseInput;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  weight?: Maybe<Int>;
  count?: Maybe<Int>;
  text?: Maybe<String>;
  workspace: WorkspaceCreateOneWithoutCourseLinksInput;
  createdBy: UserCreateOneInput;
}

export interface CourseLinkUpdateInput {
  from?: Maybe<CourseUpdateOneRequiredWithoutLinksFromCourseInput>;
  to?: Maybe<CourseUpdateOneRequiredWithoutLinksToCourseInput>;
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  weight?: Maybe<Int>;
  count?: Maybe<Int>;
  text?: Maybe<String>;
  workspace?: Maybe<WorkspaceUpdateOneRequiredWithoutCourseLinksInput>;
  createdBy?: Maybe<UserUpdateOneRequiredInput>;
}

export interface CourseLinkUpdateManyMutationInput {
  official?: Maybe<Boolean>;
  frozen?: Maybe<Boolean>;
  weight?: Maybe<Int>;
  count?: Maybe<Int>;
  text?: Maybe<String>;
}

export interface GoalLinkCreateInput {
  id?: Maybe<ID_Input>;
  course: CourseCreateOneWithoutGoalLinksInput;
  goal: ConceptCreateOneInput;
  workspace: WorkspaceCreateOneWithoutGoalLinksInput;
  text?: Maybe<String>;
  createdBy: UserCreateOneInput;
}

export interface GoalLinkUpdateInput {
  course?: Maybe<CourseUpdateOneRequiredWithoutGoalLinksInput>;
  goal?: Maybe<ConceptUpdateOneRequiredInput>;
  workspace?: Maybe<WorkspaceUpdateOneRequiredWithoutGoalLinksInput>;
  text?: Maybe<String>;
  createdBy?: Maybe<UserUpdateOneRequiredInput>;
}

export interface GoalLinkUpdateManyMutationInput {
  text?: Maybe<String>;
}

export interface PointGroupCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  startDate: DateTimeInput;
  endDate: DateTimeInput;
  maxPoints?: Maybe<Int>;
  pointsPerConcept?: Maybe<Float>;
  workspace: WorkspaceCreateOneWithoutPointGroupsInput;
  course: CourseCreateOneInput;
  completions?: Maybe<CompletionCreateManyWithoutPointGroupInput>;
  createdBy?: Maybe<UserCreateOneInput>;
}

export interface PointGroupUpdateInput {
  name?: Maybe<String>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  maxPoints?: Maybe<Int>;
  pointsPerConcept?: Maybe<Float>;
  workspace?: Maybe<WorkspaceUpdateOneRequiredWithoutPointGroupsInput>;
  course?: Maybe<CourseUpdateOneRequiredInput>;
  completions?: Maybe<CompletionUpdateManyWithoutPointGroupInput>;
  createdBy?: Maybe<UserUpdateOneInput>;
}

export interface PointGroupUpdateManyMutationInput {
  name?: Maybe<String>;
  startDate?: Maybe<DateTimeInput>;
  endDate?: Maybe<DateTimeInput>;
  maxPoints?: Maybe<Int>;
  pointsPerConcept?: Maybe<Float>;
}

export interface ProjectCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  workspaces?: Maybe<WorkspaceCreateManyWithoutSourceProjectInput>;
  activeTemplate?: Maybe<WorkspaceCreateOneInput>;
  templates?: Maybe<WorkspaceCreateManyWithoutAsTemplateInput>;
  merges?: Maybe<WorkspaceCreateManyWithoutAsMergeInput>;
  participants?: Maybe<ProjectParticipantCreateManyWithoutProjectInput>;
  tokens?: Maybe<ProjectTokenCreateManyWithoutProjectInput>;
  createdBy?: Maybe<UserCreateOneInput>;
}

export interface ProjectUpdateInput {
  name?: Maybe<String>;
  workspaces?: Maybe<WorkspaceUpdateManyWithoutSourceProjectInput>;
  activeTemplate?: Maybe<WorkspaceUpdateOneInput>;
  templates?: Maybe<WorkspaceUpdateManyWithoutAsTemplateInput>;
  merges?: Maybe<WorkspaceUpdateManyWithoutAsMergeInput>;
  participants?: Maybe<ProjectParticipantUpdateManyWithoutProjectInput>;
  tokens?: Maybe<ProjectTokenUpdateManyWithoutProjectInput>;
  createdBy?: Maybe<UserUpdateOneInput>;
}

export interface ProjectUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface ProjectParticipantCreateInput {
  id?: Maybe<ID_Input>;
  privilege: Privilege;
  project: ProjectCreateOneWithoutParticipantsInput;
  token?: Maybe<ProjectTokenCreateOneWithoutParticipantsInput>;
  user: UserCreateOneWithoutProjectParticipationsInput;
}

export interface ProjectParticipantUpdateInput {
  privilege?: Maybe<Privilege>;
  project?: Maybe<ProjectUpdateOneRequiredWithoutParticipantsInput>;
  token?: Maybe<ProjectTokenUpdateOneWithoutParticipantsInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutProjectParticipationsInput>;
}

export interface ProjectParticipantUpdateManyMutationInput {
  privilege?: Maybe<Privilege>;
}

export interface ProjectTokenCreateInput {
  id?: Maybe<ID_Input>;
  privilege: Privilege;
  revoked: Boolean;
  project: ProjectCreateOneWithoutTokensInput;
  participants?: Maybe<ProjectParticipantCreateManyWithoutTokenInput>;
}

export interface ProjectTokenUpdateInput {
  privilege?: Maybe<Privilege>;
  revoked?: Maybe<Boolean>;
  project?: Maybe<ProjectUpdateOneRequiredWithoutTokensInput>;
  participants?: Maybe<ProjectParticipantUpdateManyWithoutTokenInput>;
}

export interface ProjectTokenUpdateManyMutationInput {
  privilege?: Maybe<Privilege>;
  revoked?: Maybe<Boolean>;
}

export interface TagUpdateInput {
  name?: Maybe<String>;
  type?: Maybe<String>;
  priority?: Maybe<Int>;
}

export interface TagUpdateManyMutationInput {
  name?: Maybe<String>;
  type?: Maybe<String>;
  priority?: Maybe<Int>;
}

export interface UserUpdateInput {
  tmcId?: Maybe<Int>;
  hakaId?: Maybe<String>;
  googleId?: Maybe<String>;
  role?: Maybe<Role>;
  deactivated?: Maybe<Boolean>;
  tokens?: Maybe<AccessTokenUpdateManyWithoutUserInput>;
  workspaceParticipations?: Maybe<
    WorkspaceParticipantUpdateManyWithoutUserInput
  >;
  projectParticipations?: Maybe<ProjectParticipantUpdateManyWithoutUserInput>;
  seenGuides?: Maybe<UserUpdateseenGuidesInput>;
}

export interface UserUpdateManyMutationInput {
  tmcId?: Maybe<Int>;
  hakaId?: Maybe<String>;
  googleId?: Maybe<String>;
  role?: Maybe<Role>;
  deactivated?: Maybe<Boolean>;
  seenGuides?: Maybe<UserUpdateseenGuidesInput>;
}

export interface WorkspaceUpdateInput {
  name?: Maybe<String>;
  sourceProject?: Maybe<ProjectUpdateOneWithoutWorkspacesInput>;
  sourceTemplate?: Maybe<WorkspaceUpdateOneWithoutClonesInput>;
  asMerge?: Maybe<ProjectUpdateOneWithoutMergesInput>;
  asTemplate?: Maybe<ProjectUpdateOneWithoutTemplatesInput>;
  clones?: Maybe<WorkspaceUpdateManyWithoutSourceTemplateInput>;
  courses?: Maybe<CourseUpdateManyWithoutWorkspaceInput>;
  courseOrder?: Maybe<WorkspaceUpdatecourseOrderInput>;
  concepts?: Maybe<ConceptUpdateManyWithoutWorkspaceInput>;
  commonConcepts?: Maybe<ConceptUpdateManyInput>;
  conceptLinks?: Maybe<ConceptLinkUpdateManyWithoutWorkspaceInput>;
  courseLinks?: Maybe<CourseLinkUpdateManyWithoutWorkspaceInput>;
  goals?: Maybe<ConceptUpdateManyInput>;
  goalLinks?: Maybe<GoalLinkUpdateManyWithoutWorkspaceInput>;
  participants?: Maybe<WorkspaceParticipantUpdateManyWithoutWorkspaceInput>;
  tokens?: Maybe<WorkspaceTokenUpdateManyWithoutWorkspaceInput>;
  mainCourse?: Maybe<CourseUpdateOneInput>;
  pointGroups?: Maybe<PointGroupUpdateManyWithoutWorkspaceInput>;
  courseTags?: Maybe<TagUpdateManyInput>;
  conceptTags?: Maybe<TagUpdateManyInput>;
  goalTags?: Maybe<TagUpdateManyInput>;
  createdBy?: Maybe<UserUpdateOneInput>;
}

export interface WorkspaceUpdateManyMutationInput {
  name?: Maybe<String>;
  courseOrder?: Maybe<WorkspaceUpdatecourseOrderInput>;
}

export interface WorkspaceParticipantCreateInput {
  id?: Maybe<ID_Input>;
  privilege: Privilege;
  workspace: WorkspaceCreateOneWithoutParticipantsInput;
  token?: Maybe<WorkspaceTokenCreateOneWithoutParticipantsInput>;
  user: UserCreateOneWithoutWorkspaceParticipationsInput;
}

export interface WorkspaceParticipantUpdateInput {
  privilege?: Maybe<Privilege>;
  workspace?: Maybe<WorkspaceUpdateOneRequiredWithoutParticipantsInput>;
  token?: Maybe<WorkspaceTokenUpdateOneWithoutParticipantsInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutWorkspaceParticipationsInput>;
}

export interface WorkspaceParticipantUpdateManyMutationInput {
  privilege?: Maybe<Privilege>;
}

export interface WorkspaceTokenCreateInput {
  id?: Maybe<ID_Input>;
  privilege: Privilege;
  revoked: Boolean;
  workspace: WorkspaceCreateOneWithoutTokensInput;
  participants?: Maybe<WorkspaceParticipantCreateManyWithoutTokenInput>;
}

export interface WorkspaceTokenUpdateInput {
  privilege?: Maybe<Privilege>;
  revoked?: Maybe<Boolean>;
  workspace?: Maybe<WorkspaceUpdateOneRequiredWithoutTokensInput>;
  participants?: Maybe<WorkspaceParticipantUpdateManyWithoutTokenInput>;
}

export interface WorkspaceTokenUpdateManyMutationInput {
  privilege?: Maybe<Privilege>;
  revoked?: Maybe<Boolean>;
}

export interface AccessTokenSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AccessTokenWhereInput>;
  AND?: Maybe<
    AccessTokenSubscriptionWhereInput[] | AccessTokenSubscriptionWhereInput
  >;
  OR?: Maybe<
    AccessTokenSubscriptionWhereInput[] | AccessTokenSubscriptionWhereInput
  >;
  NOT?: Maybe<
    AccessTokenSubscriptionWhereInput[] | AccessTokenSubscriptionWhereInput
  >;
}

export interface CompletionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CompletionWhereInput>;
  AND?: Maybe<
    CompletionSubscriptionWhereInput[] | CompletionSubscriptionWhereInput
  >;
  OR?: Maybe<
    CompletionSubscriptionWhereInput[] | CompletionSubscriptionWhereInput
  >;
  NOT?: Maybe<
    CompletionSubscriptionWhereInput[] | CompletionSubscriptionWhereInput
  >;
}

export interface ConceptSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ConceptWhereInput>;
  AND?: Maybe<ConceptSubscriptionWhereInput[] | ConceptSubscriptionWhereInput>;
  OR?: Maybe<ConceptSubscriptionWhereInput[] | ConceptSubscriptionWhereInput>;
  NOT?: Maybe<ConceptSubscriptionWhereInput[] | ConceptSubscriptionWhereInput>;
}

export interface ConceptLinkSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ConceptLinkWhereInput>;
  AND?: Maybe<
    ConceptLinkSubscriptionWhereInput[] | ConceptLinkSubscriptionWhereInput
  >;
  OR?: Maybe<
    ConceptLinkSubscriptionWhereInput[] | ConceptLinkSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ConceptLinkSubscriptionWhereInput[] | ConceptLinkSubscriptionWhereInput
  >;
}

export interface CourseSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CourseWhereInput>;
  AND?: Maybe<CourseSubscriptionWhereInput[] | CourseSubscriptionWhereInput>;
  OR?: Maybe<CourseSubscriptionWhereInput[] | CourseSubscriptionWhereInput>;
  NOT?: Maybe<CourseSubscriptionWhereInput[] | CourseSubscriptionWhereInput>;
}

export interface CourseLinkSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CourseLinkWhereInput>;
  AND?: Maybe<
    CourseLinkSubscriptionWhereInput[] | CourseLinkSubscriptionWhereInput
  >;
  OR?: Maybe<
    CourseLinkSubscriptionWhereInput[] | CourseLinkSubscriptionWhereInput
  >;
  NOT?: Maybe<
    CourseLinkSubscriptionWhereInput[] | CourseLinkSubscriptionWhereInput
  >;
}

export interface GoalLinkSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GoalLinkWhereInput>;
  AND?: Maybe<
    GoalLinkSubscriptionWhereInput[] | GoalLinkSubscriptionWhereInput
  >;
  OR?: Maybe<GoalLinkSubscriptionWhereInput[] | GoalLinkSubscriptionWhereInput>;
  NOT?: Maybe<
    GoalLinkSubscriptionWhereInput[] | GoalLinkSubscriptionWhereInput
  >;
}

export interface PointGroupSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PointGroupWhereInput>;
  AND?: Maybe<
    PointGroupSubscriptionWhereInput[] | PointGroupSubscriptionWhereInput
  >;
  OR?: Maybe<
    PointGroupSubscriptionWhereInput[] | PointGroupSubscriptionWhereInput
  >;
  NOT?: Maybe<
    PointGroupSubscriptionWhereInput[] | PointGroupSubscriptionWhereInput
  >;
}

export interface ProjectSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProjectWhereInput>;
  AND?: Maybe<ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput>;
  OR?: Maybe<ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput>;
  NOT?: Maybe<ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput>;
}

export interface ProjectParticipantSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProjectParticipantWhereInput>;
  AND?: Maybe<
    | ProjectParticipantSubscriptionWhereInput[]
    | ProjectParticipantSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ProjectParticipantSubscriptionWhereInput[]
    | ProjectParticipantSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ProjectParticipantSubscriptionWhereInput[]
    | ProjectParticipantSubscriptionWhereInput
  >;
}

export interface ProjectTokenSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProjectTokenWhereInput>;
  AND?: Maybe<
    ProjectTokenSubscriptionWhereInput[] | ProjectTokenSubscriptionWhereInput
  >;
  OR?: Maybe<
    ProjectTokenSubscriptionWhereInput[] | ProjectTokenSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ProjectTokenSubscriptionWhereInput[] | ProjectTokenSubscriptionWhereInput
  >;
}

export interface TagSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TagWhereInput>;
  AND?: Maybe<TagSubscriptionWhereInput[] | TagSubscriptionWhereInput>;
  OR?: Maybe<TagSubscriptionWhereInput[] | TagSubscriptionWhereInput>;
  NOT?: Maybe<TagSubscriptionWhereInput[] | TagSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface WorkspaceSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<WorkspaceWhereInput>;
  AND?: Maybe<
    WorkspaceSubscriptionWhereInput[] | WorkspaceSubscriptionWhereInput
  >;
  OR?: Maybe<
    WorkspaceSubscriptionWhereInput[] | WorkspaceSubscriptionWhereInput
  >;
  NOT?: Maybe<
    WorkspaceSubscriptionWhereInput[] | WorkspaceSubscriptionWhereInput
  >;
}

export interface WorkspaceParticipantSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<WorkspaceParticipantWhereInput>;
  AND?: Maybe<
    | WorkspaceParticipantSubscriptionWhereInput[]
    | WorkspaceParticipantSubscriptionWhereInput
  >;
  OR?: Maybe<
    | WorkspaceParticipantSubscriptionWhereInput[]
    | WorkspaceParticipantSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | WorkspaceParticipantSubscriptionWhereInput[]
    | WorkspaceParticipantSubscriptionWhereInput
  >;
}

export interface WorkspaceTokenSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<WorkspaceTokenWhereInput>;
  AND?: Maybe<
    | WorkspaceTokenSubscriptionWhereInput[]
    | WorkspaceTokenSubscriptionWhereInput
  >;
  OR?: Maybe<
    | WorkspaceTokenSubscriptionWhereInput[]
    | WorkspaceTokenSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | WorkspaceTokenSubscriptionWhereInput[]
    | WorkspaceTokenSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface AccessToken {
  id: ID_Output;
  token: String;
  createdAt: DateTimeOutput;
  lastSeenTime: DateTimeOutput;
  lastSeenAgent: String;
  lastSeenAddress: String;
}

export interface AccessTokenPromise extends Promise<AccessToken>, Fragmentable {
  id: () => Promise<ID_Output>;
  token: () => Promise<String>;
  user: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  lastSeenTime: () => Promise<DateTimeOutput>;
  lastSeenAgent: () => Promise<String>;
  lastSeenAddress: () => Promise<String>;
}

export interface AccessTokenSubscription
  extends Promise<AsyncIterator<AccessToken>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  token: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  lastSeenTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  lastSeenAgent: () => Promise<AsyncIterator<String>>;
  lastSeenAddress: () => Promise<AsyncIterator<String>>;
}

export interface AccessTokenNullablePromise
  extends Promise<AccessToken | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  token: () => Promise<String>;
  user: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  lastSeenTime: () => Promise<DateTimeOutput>;
  lastSeenAgent: () => Promise<String>;
  lastSeenAddress: () => Promise<String>;
}

export interface User {
  id: ID_Output;
  tmcId?: Int;
  hakaId?: String;
  googleId?: String;
  role: Role;
  deactivated: Boolean;
  seenGuides: String[];
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  tmcId: () => Promise<Int>;
  hakaId: () => Promise<String>;
  googleId: () => Promise<String>;
  role: () => Promise<Role>;
  deactivated: () => Promise<Boolean>;
  tokens: <T = FragmentableArray<AccessToken>>(args?: {
    where?: AccessTokenWhereInput;
    orderBy?: AccessTokenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  workspaceParticipations: <
    T = FragmentableArray<WorkspaceParticipant>
  >(args?: {
    where?: WorkspaceParticipantWhereInput;
    orderBy?: WorkspaceParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  projectParticipations: <T = FragmentableArray<ProjectParticipant>>(args?: {
    where?: ProjectParticipantWhereInput;
    orderBy?: ProjectParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  seenGuides: () => Promise<String[]>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  tmcId: () => Promise<AsyncIterator<Int>>;
  hakaId: () => Promise<AsyncIterator<String>>;
  googleId: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  deactivated: () => Promise<AsyncIterator<Boolean>>;
  tokens: <T = Promise<AsyncIterator<AccessTokenSubscription>>>(args?: {
    where?: AccessTokenWhereInput;
    orderBy?: AccessTokenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  workspaceParticipations: <
    T = Promise<AsyncIterator<WorkspaceParticipantSubscription>>
  >(args?: {
    where?: WorkspaceParticipantWhereInput;
    orderBy?: WorkspaceParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  projectParticipations: <
    T = Promise<AsyncIterator<ProjectParticipantSubscription>>
  >(args?: {
    where?: ProjectParticipantWhereInput;
    orderBy?: ProjectParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  seenGuides: () => Promise<AsyncIterator<String[]>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  tmcId: () => Promise<Int>;
  hakaId: () => Promise<String>;
  googleId: () => Promise<String>;
  role: () => Promise<Role>;
  deactivated: () => Promise<Boolean>;
  tokens: <T = FragmentableArray<AccessToken>>(args?: {
    where?: AccessTokenWhereInput;
    orderBy?: AccessTokenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  workspaceParticipations: <
    T = FragmentableArray<WorkspaceParticipant>
  >(args?: {
    where?: WorkspaceParticipantWhereInput;
    orderBy?: WorkspaceParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  projectParticipations: <T = FragmentableArray<ProjectParticipant>>(args?: {
    where?: ProjectParticipantWhereInput;
    orderBy?: ProjectParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  seenGuides: () => Promise<String[]>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface WorkspaceParticipant {
  id: ID_Output;
  privilege: Privilege;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface WorkspaceParticipantPromise
  extends Promise<WorkspaceParticipant>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  privilege: () => Promise<Privilege>;
  workspace: <T = WorkspacePromise>() => T;
  token: <T = WorkspaceTokenPromise>() => T;
  user: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface WorkspaceParticipantSubscription
  extends Promise<AsyncIterator<WorkspaceParticipant>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  privilege: () => Promise<AsyncIterator<Privilege>>;
  workspace: <T = WorkspaceSubscription>() => T;
  token: <T = WorkspaceTokenSubscription>() => T;
  user: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface WorkspaceParticipantNullablePromise
  extends Promise<WorkspaceParticipant | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  privilege: () => Promise<Privilege>;
  workspace: <T = WorkspacePromise>() => T;
  token: <T = WorkspaceTokenPromise>() => T;
  user: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Workspace {
  id: ID_Output;
  name: String;
  courseOrder: ID_Output[];
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface WorkspacePromise extends Promise<Workspace>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  sourceProject: <T = ProjectPromise>() => T;
  sourceTemplate: <T = WorkspacePromise>() => T;
  asMerge: <T = ProjectPromise>() => T;
  asTemplate: <T = ProjectPromise>() => T;
  clones: <T = FragmentableArray<Workspace>>(args?: {
    where?: WorkspaceWhereInput;
    orderBy?: WorkspaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  courses: <T = FragmentableArray<Course>>(args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  courseOrder: () => Promise<ID_Output[]>;
  concepts: <T = FragmentableArray<Concept>>(args?: {
    where?: ConceptWhereInput;
    orderBy?: ConceptOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  commonConcepts: <T = FragmentableArray<Concept>>(args?: {
    where?: ConceptWhereInput;
    orderBy?: ConceptOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  conceptLinks: <T = FragmentableArray<ConceptLink>>(args?: {
    where?: ConceptLinkWhereInput;
    orderBy?: ConceptLinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  courseLinks: <T = FragmentableArray<CourseLink>>(args?: {
    where?: CourseLinkWhereInput;
    orderBy?: CourseLinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  goals: <T = FragmentableArray<Concept>>(args?: {
    where?: ConceptWhereInput;
    orderBy?: ConceptOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  goalLinks: <T = FragmentableArray<GoalLink>>(args?: {
    where?: GoalLinkWhereInput;
    orderBy?: GoalLinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  participants: <T = FragmentableArray<WorkspaceParticipant>>(args?: {
    where?: WorkspaceParticipantWhereInput;
    orderBy?: WorkspaceParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tokens: <T = FragmentableArray<WorkspaceToken>>(args?: {
    where?: WorkspaceTokenWhereInput;
    orderBy?: WorkspaceTokenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  mainCourse: <T = CoursePromise>() => T;
  pointGroups: <T = FragmentableArray<PointGroup>>(args?: {
    where?: PointGroupWhereInput;
    orderBy?: PointGroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  courseTags: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  conceptTags: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  goalTags: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdBy: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface WorkspaceSubscription
  extends Promise<AsyncIterator<Workspace>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  sourceProject: <T = ProjectSubscription>() => T;
  sourceTemplate: <T = WorkspaceSubscription>() => T;
  asMerge: <T = ProjectSubscription>() => T;
  asTemplate: <T = ProjectSubscription>() => T;
  clones: <T = Promise<AsyncIterator<WorkspaceSubscription>>>(args?: {
    where?: WorkspaceWhereInput;
    orderBy?: WorkspaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  courses: <T = Promise<AsyncIterator<CourseSubscription>>>(args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  courseOrder: () => Promise<AsyncIterator<ID_Output[]>>;
  concepts: <T = Promise<AsyncIterator<ConceptSubscription>>>(args?: {
    where?: ConceptWhereInput;
    orderBy?: ConceptOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  commonConcepts: <T = Promise<AsyncIterator<ConceptSubscription>>>(args?: {
    where?: ConceptWhereInput;
    orderBy?: ConceptOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  conceptLinks: <T = Promise<AsyncIterator<ConceptLinkSubscription>>>(args?: {
    where?: ConceptLinkWhereInput;
    orderBy?: ConceptLinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  courseLinks: <T = Promise<AsyncIterator<CourseLinkSubscription>>>(args?: {
    where?: CourseLinkWhereInput;
    orderBy?: CourseLinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  goals: <T = Promise<AsyncIterator<ConceptSubscription>>>(args?: {
    where?: ConceptWhereInput;
    orderBy?: ConceptOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  goalLinks: <T = Promise<AsyncIterator<GoalLinkSubscription>>>(args?: {
    where?: GoalLinkWhereInput;
    orderBy?: GoalLinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  participants: <
    T = Promise<AsyncIterator<WorkspaceParticipantSubscription>>
  >(args?: {
    where?: WorkspaceParticipantWhereInput;
    orderBy?: WorkspaceParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tokens: <T = Promise<AsyncIterator<WorkspaceTokenSubscription>>>(args?: {
    where?: WorkspaceTokenWhereInput;
    orderBy?: WorkspaceTokenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  mainCourse: <T = CourseSubscription>() => T;
  pointGroups: <T = Promise<AsyncIterator<PointGroupSubscription>>>(args?: {
    where?: PointGroupWhereInput;
    orderBy?: PointGroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  courseTags: <T = Promise<AsyncIterator<TagSubscription>>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  conceptTags: <T = Promise<AsyncIterator<TagSubscription>>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  goalTags: <T = Promise<AsyncIterator<TagSubscription>>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdBy: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface WorkspaceNullablePromise
  extends Promise<Workspace | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  sourceProject: <T = ProjectPromise>() => T;
  sourceTemplate: <T = WorkspacePromise>() => T;
  asMerge: <T = ProjectPromise>() => T;
  asTemplate: <T = ProjectPromise>() => T;
  clones: <T = FragmentableArray<Workspace>>(args?: {
    where?: WorkspaceWhereInput;
    orderBy?: WorkspaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  courses: <T = FragmentableArray<Course>>(args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  courseOrder: () => Promise<ID_Output[]>;
  concepts: <T = FragmentableArray<Concept>>(args?: {
    where?: ConceptWhereInput;
    orderBy?: ConceptOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  commonConcepts: <T = FragmentableArray<Concept>>(args?: {
    where?: ConceptWhereInput;
    orderBy?: ConceptOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  conceptLinks: <T = FragmentableArray<ConceptLink>>(args?: {
    where?: ConceptLinkWhereInput;
    orderBy?: ConceptLinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  courseLinks: <T = FragmentableArray<CourseLink>>(args?: {
    where?: CourseLinkWhereInput;
    orderBy?: CourseLinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  goals: <T = FragmentableArray<Concept>>(args?: {
    where?: ConceptWhereInput;
    orderBy?: ConceptOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  goalLinks: <T = FragmentableArray<GoalLink>>(args?: {
    where?: GoalLinkWhereInput;
    orderBy?: GoalLinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  participants: <T = FragmentableArray<WorkspaceParticipant>>(args?: {
    where?: WorkspaceParticipantWhereInput;
    orderBy?: WorkspaceParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tokens: <T = FragmentableArray<WorkspaceToken>>(args?: {
    where?: WorkspaceTokenWhereInput;
    orderBy?: WorkspaceTokenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  mainCourse: <T = CoursePromise>() => T;
  pointGroups: <T = FragmentableArray<PointGroup>>(args?: {
    where?: PointGroupWhereInput;
    orderBy?: PointGroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  courseTags: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  conceptTags: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  goalTags: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdBy: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Project {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProjectPromise extends Promise<Project>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  workspaces: <T = FragmentableArray<Workspace>>(args?: {
    where?: WorkspaceWhereInput;
    orderBy?: WorkspaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  activeTemplate: <T = WorkspacePromise>() => T;
  templates: <T = FragmentableArray<Workspace>>(args?: {
    where?: WorkspaceWhereInput;
    orderBy?: WorkspaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  merges: <T = FragmentableArray<Workspace>>(args?: {
    where?: WorkspaceWhereInput;
    orderBy?: WorkspaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  participants: <T = FragmentableArray<ProjectParticipant>>(args?: {
    where?: ProjectParticipantWhereInput;
    orderBy?: ProjectParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tokens: <T = FragmentableArray<ProjectToken>>(args?: {
    where?: ProjectTokenWhereInput;
    orderBy?: ProjectTokenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdBy: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProjectSubscription
  extends Promise<AsyncIterator<Project>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  workspaces: <T = Promise<AsyncIterator<WorkspaceSubscription>>>(args?: {
    where?: WorkspaceWhereInput;
    orderBy?: WorkspaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  activeTemplate: <T = WorkspaceSubscription>() => T;
  templates: <T = Promise<AsyncIterator<WorkspaceSubscription>>>(args?: {
    where?: WorkspaceWhereInput;
    orderBy?: WorkspaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  merges: <T = Promise<AsyncIterator<WorkspaceSubscription>>>(args?: {
    where?: WorkspaceWhereInput;
    orderBy?: WorkspaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  participants: <
    T = Promise<AsyncIterator<ProjectParticipantSubscription>>
  >(args?: {
    where?: ProjectParticipantWhereInput;
    orderBy?: ProjectParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tokens: <T = Promise<AsyncIterator<ProjectTokenSubscription>>>(args?: {
    where?: ProjectTokenWhereInput;
    orderBy?: ProjectTokenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdBy: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProjectNullablePromise
  extends Promise<Project | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  workspaces: <T = FragmentableArray<Workspace>>(args?: {
    where?: WorkspaceWhereInput;
    orderBy?: WorkspaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  activeTemplate: <T = WorkspacePromise>() => T;
  templates: <T = FragmentableArray<Workspace>>(args?: {
    where?: WorkspaceWhereInput;
    orderBy?: WorkspaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  merges: <T = FragmentableArray<Workspace>>(args?: {
    where?: WorkspaceWhereInput;
    orderBy?: WorkspaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  participants: <T = FragmentableArray<ProjectParticipant>>(args?: {
    where?: ProjectParticipantWhereInput;
    orderBy?: ProjectParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tokens: <T = FragmentableArray<ProjectToken>>(args?: {
    where?: ProjectTokenWhereInput;
    orderBy?: ProjectTokenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdBy: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProjectParticipant {
  id: ID_Output;
  privilege: Privilege;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProjectParticipantPromise
  extends Promise<ProjectParticipant>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  privilege: () => Promise<Privilege>;
  project: <T = ProjectPromise>() => T;
  token: <T = ProjectTokenPromise>() => T;
  user: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProjectParticipantSubscription
  extends Promise<AsyncIterator<ProjectParticipant>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  privilege: () => Promise<AsyncIterator<Privilege>>;
  project: <T = ProjectSubscription>() => T;
  token: <T = ProjectTokenSubscription>() => T;
  user: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProjectParticipantNullablePromise
  extends Promise<ProjectParticipant | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  privilege: () => Promise<Privilege>;
  project: <T = ProjectPromise>() => T;
  token: <T = ProjectTokenPromise>() => T;
  user: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProjectToken {
  id: ID_Output;
  privilege: Privilege;
  revoked: Boolean;
}

export interface ProjectTokenPromise
  extends Promise<ProjectToken>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  privilege: () => Promise<Privilege>;
  revoked: () => Promise<Boolean>;
  project: <T = ProjectPromise>() => T;
  participants: <T = FragmentableArray<ProjectParticipant>>(args?: {
    where?: ProjectParticipantWhereInput;
    orderBy?: ProjectParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProjectTokenSubscription
  extends Promise<AsyncIterator<ProjectToken>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  privilege: () => Promise<AsyncIterator<Privilege>>;
  revoked: () => Promise<AsyncIterator<Boolean>>;
  project: <T = ProjectSubscription>() => T;
  participants: <
    T = Promise<AsyncIterator<ProjectParticipantSubscription>>
  >(args?: {
    where?: ProjectParticipantWhereInput;
    orderBy?: ProjectParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProjectTokenNullablePromise
  extends Promise<ProjectToken | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  privilege: () => Promise<Privilege>;
  revoked: () => Promise<Boolean>;
  project: <T = ProjectPromise>() => T;
  participants: <T = FragmentableArray<ProjectParticipant>>(args?: {
    where?: ProjectParticipantWhereInput;
    orderBy?: ProjectParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Course {
  id: ID_Output;
  name: String;
  official: Boolean;
  frozen: Boolean;
  conceptOrder: ID_Output[];
  objectiveOrder: ID_Output[];
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CoursePromise extends Promise<Course>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  official: () => Promise<Boolean>;
  frozen: () => Promise<Boolean>;
  tags: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  sourceCourse: <T = CoursePromise>() => T;
  clones: <T = FragmentableArray<Course>>(args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  linksFromCourse: <T = FragmentableArray<CourseLink>>(args?: {
    where?: CourseLinkWhereInput;
    orderBy?: CourseLinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  linksToCourse: <T = FragmentableArray<CourseLink>>(args?: {
    where?: CourseLinkWhereInput;
    orderBy?: CourseLinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  workspace: <T = WorkspacePromise>() => T;
  concepts: <T = FragmentableArray<Concept>>(args?: {
    where?: ConceptWhereInput;
    orderBy?: ConceptOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  conceptOrder: () => Promise<ID_Output[]>;
  objectiveOrder: () => Promise<ID_Output[]>;
  createdBy: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  goalLinks: <T = FragmentableArray<GoalLink>>(args?: {
    where?: GoalLinkWhereInput;
    orderBy?: GoalLinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CourseSubscription
  extends Promise<AsyncIterator<Course>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  official: () => Promise<AsyncIterator<Boolean>>;
  frozen: () => Promise<AsyncIterator<Boolean>>;
  tags: <T = Promise<AsyncIterator<TagSubscription>>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  sourceCourse: <T = CourseSubscription>() => T;
  clones: <T = Promise<AsyncIterator<CourseSubscription>>>(args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  linksFromCourse: <T = Promise<AsyncIterator<CourseLinkSubscription>>>(args?: {
    where?: CourseLinkWhereInput;
    orderBy?: CourseLinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  linksToCourse: <T = Promise<AsyncIterator<CourseLinkSubscription>>>(args?: {
    where?: CourseLinkWhereInput;
    orderBy?: CourseLinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  workspace: <T = WorkspaceSubscription>() => T;
  concepts: <T = Promise<AsyncIterator<ConceptSubscription>>>(args?: {
    where?: ConceptWhereInput;
    orderBy?: ConceptOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  conceptOrder: () => Promise<AsyncIterator<ID_Output[]>>;
  objectiveOrder: () => Promise<AsyncIterator<ID_Output[]>>;
  createdBy: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  goalLinks: <T = Promise<AsyncIterator<GoalLinkSubscription>>>(args?: {
    where?: GoalLinkWhereInput;
    orderBy?: GoalLinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CourseNullablePromise
  extends Promise<Course | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  official: () => Promise<Boolean>;
  frozen: () => Promise<Boolean>;
  tags: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  sourceCourse: <T = CoursePromise>() => T;
  clones: <T = FragmentableArray<Course>>(args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  linksFromCourse: <T = FragmentableArray<CourseLink>>(args?: {
    where?: CourseLinkWhereInput;
    orderBy?: CourseLinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  linksToCourse: <T = FragmentableArray<CourseLink>>(args?: {
    where?: CourseLinkWhereInput;
    orderBy?: CourseLinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  workspace: <T = WorkspacePromise>() => T;
  concepts: <T = FragmentableArray<Concept>>(args?: {
    where?: ConceptWhereInput;
    orderBy?: ConceptOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  conceptOrder: () => Promise<ID_Output[]>;
  objectiveOrder: () => Promise<ID_Output[]>;
  createdBy: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  goalLinks: <T = FragmentableArray<GoalLink>>(args?: {
    where?: GoalLinkWhereInput;
    orderBy?: GoalLinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Tag {
  id: ID_Output;
  name: String;
  type: String;
  priority: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TagPromise extends Promise<Tag>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  type: () => Promise<String>;
  priority: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TagSubscription
  extends Promise<AsyncIterator<Tag>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  priority: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TagNullablePromise extends Promise<Tag | null>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  type: () => Promise<String>;
  priority: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CourseLink {
  id: ID_Output;
  official: Boolean;
  frozen: Boolean;
  weight: Int;
  count: Int;
  text?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CourseLinkPromise extends Promise<CourseLink>, Fragmentable {
  id: () => Promise<ID_Output>;
  from: <T = CoursePromise>() => T;
  to: <T = CoursePromise>() => T;
  official: () => Promise<Boolean>;
  frozen: () => Promise<Boolean>;
  weight: () => Promise<Int>;
  count: () => Promise<Int>;
  text: () => Promise<String>;
  workspace: <T = WorkspacePromise>() => T;
  createdBy: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CourseLinkSubscription
  extends Promise<AsyncIterator<CourseLink>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  from: <T = CourseSubscription>() => T;
  to: <T = CourseSubscription>() => T;
  official: () => Promise<AsyncIterator<Boolean>>;
  frozen: () => Promise<AsyncIterator<Boolean>>;
  weight: () => Promise<AsyncIterator<Int>>;
  count: () => Promise<AsyncIterator<Int>>;
  text: () => Promise<AsyncIterator<String>>;
  workspace: <T = WorkspaceSubscription>() => T;
  createdBy: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CourseLinkNullablePromise
  extends Promise<CourseLink | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  from: <T = CoursePromise>() => T;
  to: <T = CoursePromise>() => T;
  official: () => Promise<Boolean>;
  frozen: () => Promise<Boolean>;
  weight: () => Promise<Int>;
  count: () => Promise<Int>;
  text: () => Promise<String>;
  workspace: <T = WorkspacePromise>() => T;
  createdBy: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Concept {
  id: ID_Output;
  name: String;
  description?: String;
  level: ConceptLevel;
  position?: String;
  official: Boolean;
  frozen: Boolean;
  count: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ConceptPromise extends Promise<Concept>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  level: () => Promise<ConceptLevel>;
  position: () => Promise<String>;
  official: () => Promise<Boolean>;
  frozen: () => Promise<Boolean>;
  tags: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  count: () => Promise<Int>;
  sourceConcept: <T = ConceptPromise>() => T;
  clones: <T = FragmentableArray<Concept>>(args?: {
    where?: ConceptWhereInput;
    orderBy?: ConceptOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  sourceCommon: <T = ConceptPromise>() => T;
  commonClones: <T = FragmentableArray<Concept>>(args?: {
    where?: ConceptWhereInput;
    orderBy?: ConceptOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  linksFromConcept: <T = FragmentableArray<ConceptLink>>(args?: {
    where?: ConceptLinkWhereInput;
    orderBy?: ConceptLinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  linksToConcept: <T = FragmentableArray<ConceptLink>>(args?: {
    where?: ConceptLinkWhereInput;
    orderBy?: ConceptLinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  course: <T = CoursePromise>() => T;
  workspace: <T = WorkspacePromise>() => T;
  createdBy: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ConceptSubscription
  extends Promise<AsyncIterator<Concept>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  level: () => Promise<AsyncIterator<ConceptLevel>>;
  position: () => Promise<AsyncIterator<String>>;
  official: () => Promise<AsyncIterator<Boolean>>;
  frozen: () => Promise<AsyncIterator<Boolean>>;
  tags: <T = Promise<AsyncIterator<TagSubscription>>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  count: () => Promise<AsyncIterator<Int>>;
  sourceConcept: <T = ConceptSubscription>() => T;
  clones: <T = Promise<AsyncIterator<ConceptSubscription>>>(args?: {
    where?: ConceptWhereInput;
    orderBy?: ConceptOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  sourceCommon: <T = ConceptSubscription>() => T;
  commonClones: <T = Promise<AsyncIterator<ConceptSubscription>>>(args?: {
    where?: ConceptWhereInput;
    orderBy?: ConceptOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  linksFromConcept: <
    T = Promise<AsyncIterator<ConceptLinkSubscription>>
  >(args?: {
    where?: ConceptLinkWhereInput;
    orderBy?: ConceptLinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  linksToConcept: <T = Promise<AsyncIterator<ConceptLinkSubscription>>>(args?: {
    where?: ConceptLinkWhereInput;
    orderBy?: ConceptLinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  course: <T = CourseSubscription>() => T;
  workspace: <T = WorkspaceSubscription>() => T;
  createdBy: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ConceptNullablePromise
  extends Promise<Concept | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  level: () => Promise<ConceptLevel>;
  position: () => Promise<String>;
  official: () => Promise<Boolean>;
  frozen: () => Promise<Boolean>;
  tags: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  count: () => Promise<Int>;
  sourceConcept: <T = ConceptPromise>() => T;
  clones: <T = FragmentableArray<Concept>>(args?: {
    where?: ConceptWhereInput;
    orderBy?: ConceptOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  sourceCommon: <T = ConceptPromise>() => T;
  commonClones: <T = FragmentableArray<Concept>>(args?: {
    where?: ConceptWhereInput;
    orderBy?: ConceptOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  linksFromConcept: <T = FragmentableArray<ConceptLink>>(args?: {
    where?: ConceptLinkWhereInput;
    orderBy?: ConceptLinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  linksToConcept: <T = FragmentableArray<ConceptLink>>(args?: {
    where?: ConceptLinkWhereInput;
    orderBy?: ConceptLinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  course: <T = CoursePromise>() => T;
  workspace: <T = WorkspacePromise>() => T;
  createdBy: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ConceptLink {
  id: ID_Output;
  official: Boolean;
  frozen: Boolean;
  weight: Int;
  count: Int;
  text?: String;
  level: PrerequisiteLevel;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ConceptLinkPromise extends Promise<ConceptLink>, Fragmentable {
  id: () => Promise<ID_Output>;
  from: <T = ConceptPromise>() => T;
  to: <T = ConceptPromise>() => T;
  official: () => Promise<Boolean>;
  frozen: () => Promise<Boolean>;
  weight: () => Promise<Int>;
  count: () => Promise<Int>;
  text: () => Promise<String>;
  level: () => Promise<PrerequisiteLevel>;
  workspace: <T = WorkspacePromise>() => T;
  createdBy: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ConceptLinkSubscription
  extends Promise<AsyncIterator<ConceptLink>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  from: <T = ConceptSubscription>() => T;
  to: <T = ConceptSubscription>() => T;
  official: () => Promise<AsyncIterator<Boolean>>;
  frozen: () => Promise<AsyncIterator<Boolean>>;
  weight: () => Promise<AsyncIterator<Int>>;
  count: () => Promise<AsyncIterator<Int>>;
  text: () => Promise<AsyncIterator<String>>;
  level: () => Promise<AsyncIterator<PrerequisiteLevel>>;
  workspace: <T = WorkspaceSubscription>() => T;
  createdBy: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ConceptLinkNullablePromise
  extends Promise<ConceptLink | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  from: <T = ConceptPromise>() => T;
  to: <T = ConceptPromise>() => T;
  official: () => Promise<Boolean>;
  frozen: () => Promise<Boolean>;
  weight: () => Promise<Int>;
  count: () => Promise<Int>;
  text: () => Promise<String>;
  level: () => Promise<PrerequisiteLevel>;
  workspace: <T = WorkspacePromise>() => T;
  createdBy: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface GoalLink {
  id: ID_Output;
  text?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface GoalLinkPromise extends Promise<GoalLink>, Fragmentable {
  id: () => Promise<ID_Output>;
  course: <T = CoursePromise>() => T;
  goal: <T = ConceptPromise>() => T;
  workspace: <T = WorkspacePromise>() => T;
  text: () => Promise<String>;
  createdBy: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface GoalLinkSubscription
  extends Promise<AsyncIterator<GoalLink>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  course: <T = CourseSubscription>() => T;
  goal: <T = ConceptSubscription>() => T;
  workspace: <T = WorkspaceSubscription>() => T;
  text: () => Promise<AsyncIterator<String>>;
  createdBy: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface GoalLinkNullablePromise
  extends Promise<GoalLink | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  course: <T = CoursePromise>() => T;
  goal: <T = ConceptPromise>() => T;
  workspace: <T = WorkspacePromise>() => T;
  text: () => Promise<String>;
  createdBy: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface WorkspaceToken {
  id: ID_Output;
  privilege: Privilege;
  revoked: Boolean;
}

export interface WorkspaceTokenPromise
  extends Promise<WorkspaceToken>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  privilege: () => Promise<Privilege>;
  revoked: () => Promise<Boolean>;
  workspace: <T = WorkspacePromise>() => T;
  participants: <T = FragmentableArray<WorkspaceParticipant>>(args?: {
    where?: WorkspaceParticipantWhereInput;
    orderBy?: WorkspaceParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface WorkspaceTokenSubscription
  extends Promise<AsyncIterator<WorkspaceToken>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  privilege: () => Promise<AsyncIterator<Privilege>>;
  revoked: () => Promise<AsyncIterator<Boolean>>;
  workspace: <T = WorkspaceSubscription>() => T;
  participants: <
    T = Promise<AsyncIterator<WorkspaceParticipantSubscription>>
  >(args?: {
    where?: WorkspaceParticipantWhereInput;
    orderBy?: WorkspaceParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface WorkspaceTokenNullablePromise
  extends Promise<WorkspaceToken | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  privilege: () => Promise<Privilege>;
  revoked: () => Promise<Boolean>;
  workspace: <T = WorkspacePromise>() => T;
  participants: <T = FragmentableArray<WorkspaceParticipant>>(args?: {
    where?: WorkspaceParticipantWhereInput;
    orderBy?: WorkspaceParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PointGroup {
  id: ID_Output;
  name: String;
  startDate: DateTimeOutput;
  endDate: DateTimeOutput;
  maxPoints: Int;
  pointsPerConcept: Float;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PointGroupPromise extends Promise<PointGroup>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
  maxPoints: () => Promise<Int>;
  pointsPerConcept: () => Promise<Float>;
  workspace: <T = WorkspacePromise>() => T;
  course: <T = CoursePromise>() => T;
  completions: <T = FragmentableArray<Completion>>(args?: {
    where?: CompletionWhereInput;
    orderBy?: CompletionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdBy: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PointGroupSubscription
  extends Promise<AsyncIterator<PointGroup>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  endDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  maxPoints: () => Promise<AsyncIterator<Int>>;
  pointsPerConcept: () => Promise<AsyncIterator<Float>>;
  workspace: <T = WorkspaceSubscription>() => T;
  course: <T = CourseSubscription>() => T;
  completions: <T = Promise<AsyncIterator<CompletionSubscription>>>(args?: {
    where?: CompletionWhereInput;
    orderBy?: CompletionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdBy: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PointGroupNullablePromise
  extends Promise<PointGroup | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
  maxPoints: () => Promise<Int>;
  pointsPerConcept: () => Promise<Float>;
  workspace: <T = WorkspacePromise>() => T;
  course: <T = CoursePromise>() => T;
  completions: <T = FragmentableArray<Completion>>(args?: {
    where?: CompletionWhereInput;
    orderBy?: CompletionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdBy: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Completion {
  id: ID_Output;
  conceptAmount: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CompletionPromise extends Promise<Completion>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  conceptAmount: () => Promise<Int>;
  pointGroup: <T = PointGroupPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CompletionSubscription
  extends Promise<AsyncIterator<Completion>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  conceptAmount: () => Promise<AsyncIterator<Int>>;
  pointGroup: <T = PointGroupSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CompletionNullablePromise
  extends Promise<Completion | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  conceptAmount: () => Promise<Int>;
  pointGroup: <T = PointGroupPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AccessTokenConnection {
  pageInfo: PageInfo;
  edges: AccessTokenEdge[];
}

export interface AccessTokenConnectionPromise
  extends Promise<AccessTokenConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AccessTokenEdge>>() => T;
  aggregate: <T = AggregateAccessTokenPromise>() => T;
}

export interface AccessTokenConnectionSubscription
  extends Promise<AsyncIterator<AccessTokenConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AccessTokenEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAccessTokenSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AccessTokenEdge {
  node: AccessToken;
  cursor: String;
}

export interface AccessTokenEdgePromise
  extends Promise<AccessTokenEdge>,
    Fragmentable {
  node: <T = AccessTokenPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AccessTokenEdgeSubscription
  extends Promise<AsyncIterator<AccessTokenEdge>>,
    Fragmentable {
  node: <T = AccessTokenSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAccessToken {
  count: Int;
}

export interface AggregateAccessTokenPromise
  extends Promise<AggregateAccessToken>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAccessTokenSubscription
  extends Promise<AsyncIterator<AggregateAccessToken>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CompletionConnection {
  pageInfo: PageInfo;
  edges: CompletionEdge[];
}

export interface CompletionConnectionPromise
  extends Promise<CompletionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CompletionEdge>>() => T;
  aggregate: <T = AggregateCompletionPromise>() => T;
}

export interface CompletionConnectionSubscription
  extends Promise<AsyncIterator<CompletionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CompletionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCompletionSubscription>() => T;
}

export interface CompletionEdge {
  node: Completion;
  cursor: String;
}

export interface CompletionEdgePromise
  extends Promise<CompletionEdge>,
    Fragmentable {
  node: <T = CompletionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CompletionEdgeSubscription
  extends Promise<AsyncIterator<CompletionEdge>>,
    Fragmentable {
  node: <T = CompletionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCompletion {
  count: Int;
}

export interface AggregateCompletionPromise
  extends Promise<AggregateCompletion>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCompletionSubscription
  extends Promise<AsyncIterator<AggregateCompletion>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ConceptConnection {
  pageInfo: PageInfo;
  edges: ConceptEdge[];
}

export interface ConceptConnectionPromise
  extends Promise<ConceptConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ConceptEdge>>() => T;
  aggregate: <T = AggregateConceptPromise>() => T;
}

export interface ConceptConnectionSubscription
  extends Promise<AsyncIterator<ConceptConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ConceptEdgeSubscription>>>() => T;
  aggregate: <T = AggregateConceptSubscription>() => T;
}

export interface ConceptEdge {
  node: Concept;
  cursor: String;
}

export interface ConceptEdgePromise extends Promise<ConceptEdge>, Fragmentable {
  node: <T = ConceptPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ConceptEdgeSubscription
  extends Promise<AsyncIterator<ConceptEdge>>,
    Fragmentable {
  node: <T = ConceptSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateConcept {
  count: Int;
}

export interface AggregateConceptPromise
  extends Promise<AggregateConcept>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateConceptSubscription
  extends Promise<AsyncIterator<AggregateConcept>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ConceptLinkConnection {
  pageInfo: PageInfo;
  edges: ConceptLinkEdge[];
}

export interface ConceptLinkConnectionPromise
  extends Promise<ConceptLinkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ConceptLinkEdge>>() => T;
  aggregate: <T = AggregateConceptLinkPromise>() => T;
}

export interface ConceptLinkConnectionSubscription
  extends Promise<AsyncIterator<ConceptLinkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ConceptLinkEdgeSubscription>>>() => T;
  aggregate: <T = AggregateConceptLinkSubscription>() => T;
}

export interface ConceptLinkEdge {
  node: ConceptLink;
  cursor: String;
}

export interface ConceptLinkEdgePromise
  extends Promise<ConceptLinkEdge>,
    Fragmentable {
  node: <T = ConceptLinkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ConceptLinkEdgeSubscription
  extends Promise<AsyncIterator<ConceptLinkEdge>>,
    Fragmentable {
  node: <T = ConceptLinkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateConceptLink {
  count: Int;
}

export interface AggregateConceptLinkPromise
  extends Promise<AggregateConceptLink>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateConceptLinkSubscription
  extends Promise<AsyncIterator<AggregateConceptLink>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CourseConnection {
  pageInfo: PageInfo;
  edges: CourseEdge[];
}

export interface CourseConnectionPromise
  extends Promise<CourseConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CourseEdge>>() => T;
  aggregate: <T = AggregateCoursePromise>() => T;
}

export interface CourseConnectionSubscription
  extends Promise<AsyncIterator<CourseConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CourseEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCourseSubscription>() => T;
}

export interface CourseEdge {
  node: Course;
  cursor: String;
}

export interface CourseEdgePromise extends Promise<CourseEdge>, Fragmentable {
  node: <T = CoursePromise>() => T;
  cursor: () => Promise<String>;
}

export interface CourseEdgeSubscription
  extends Promise<AsyncIterator<CourseEdge>>,
    Fragmentable {
  node: <T = CourseSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCourse {
  count: Int;
}

export interface AggregateCoursePromise
  extends Promise<AggregateCourse>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCourseSubscription
  extends Promise<AsyncIterator<AggregateCourse>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CourseLinkConnection {
  pageInfo: PageInfo;
  edges: CourseLinkEdge[];
}

export interface CourseLinkConnectionPromise
  extends Promise<CourseLinkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CourseLinkEdge>>() => T;
  aggregate: <T = AggregateCourseLinkPromise>() => T;
}

export interface CourseLinkConnectionSubscription
  extends Promise<AsyncIterator<CourseLinkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CourseLinkEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCourseLinkSubscription>() => T;
}

export interface CourseLinkEdge {
  node: CourseLink;
  cursor: String;
}

export interface CourseLinkEdgePromise
  extends Promise<CourseLinkEdge>,
    Fragmentable {
  node: <T = CourseLinkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CourseLinkEdgeSubscription
  extends Promise<AsyncIterator<CourseLinkEdge>>,
    Fragmentable {
  node: <T = CourseLinkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCourseLink {
  count: Int;
}

export interface AggregateCourseLinkPromise
  extends Promise<AggregateCourseLink>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCourseLinkSubscription
  extends Promise<AsyncIterator<AggregateCourseLink>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GoalLinkConnection {
  pageInfo: PageInfo;
  edges: GoalLinkEdge[];
}

export interface GoalLinkConnectionPromise
  extends Promise<GoalLinkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GoalLinkEdge>>() => T;
  aggregate: <T = AggregateGoalLinkPromise>() => T;
}

export interface GoalLinkConnectionSubscription
  extends Promise<AsyncIterator<GoalLinkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GoalLinkEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGoalLinkSubscription>() => T;
}

export interface GoalLinkEdge {
  node: GoalLink;
  cursor: String;
}

export interface GoalLinkEdgePromise
  extends Promise<GoalLinkEdge>,
    Fragmentable {
  node: <T = GoalLinkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GoalLinkEdgeSubscription
  extends Promise<AsyncIterator<GoalLinkEdge>>,
    Fragmentable {
  node: <T = GoalLinkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGoalLink {
  count: Int;
}

export interface AggregateGoalLinkPromise
  extends Promise<AggregateGoalLink>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGoalLinkSubscription
  extends Promise<AsyncIterator<AggregateGoalLink>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PointGroupConnection {
  pageInfo: PageInfo;
  edges: PointGroupEdge[];
}

export interface PointGroupConnectionPromise
  extends Promise<PointGroupConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PointGroupEdge>>() => T;
  aggregate: <T = AggregatePointGroupPromise>() => T;
}

export interface PointGroupConnectionSubscription
  extends Promise<AsyncIterator<PointGroupConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PointGroupEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePointGroupSubscription>() => T;
}

export interface PointGroupEdge {
  node: PointGroup;
  cursor: String;
}

export interface PointGroupEdgePromise
  extends Promise<PointGroupEdge>,
    Fragmentable {
  node: <T = PointGroupPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PointGroupEdgeSubscription
  extends Promise<AsyncIterator<PointGroupEdge>>,
    Fragmentable {
  node: <T = PointGroupSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePointGroup {
  count: Int;
}

export interface AggregatePointGroupPromise
  extends Promise<AggregatePointGroup>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePointGroupSubscription
  extends Promise<AsyncIterator<AggregatePointGroup>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProjectConnection {
  pageInfo: PageInfo;
  edges: ProjectEdge[];
}

export interface ProjectConnectionPromise
  extends Promise<ProjectConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProjectEdge>>() => T;
  aggregate: <T = AggregateProjectPromise>() => T;
}

export interface ProjectConnectionSubscription
  extends Promise<AsyncIterator<ProjectConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProjectEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProjectSubscription>() => T;
}

export interface ProjectEdge {
  node: Project;
  cursor: String;
}

export interface ProjectEdgePromise extends Promise<ProjectEdge>, Fragmentable {
  node: <T = ProjectPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProjectEdgeSubscription
  extends Promise<AsyncIterator<ProjectEdge>>,
    Fragmentable {
  node: <T = ProjectSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProject {
  count: Int;
}

export interface AggregateProjectPromise
  extends Promise<AggregateProject>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProjectSubscription
  extends Promise<AsyncIterator<AggregateProject>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProjectParticipantConnection {
  pageInfo: PageInfo;
  edges: ProjectParticipantEdge[];
}

export interface ProjectParticipantConnectionPromise
  extends Promise<ProjectParticipantConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProjectParticipantEdge>>() => T;
  aggregate: <T = AggregateProjectParticipantPromise>() => T;
}

export interface ProjectParticipantConnectionSubscription
  extends Promise<AsyncIterator<ProjectParticipantConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ProjectParticipantEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateProjectParticipantSubscription>() => T;
}

export interface ProjectParticipantEdge {
  node: ProjectParticipant;
  cursor: String;
}

export interface ProjectParticipantEdgePromise
  extends Promise<ProjectParticipantEdge>,
    Fragmentable {
  node: <T = ProjectParticipantPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProjectParticipantEdgeSubscription
  extends Promise<AsyncIterator<ProjectParticipantEdge>>,
    Fragmentable {
  node: <T = ProjectParticipantSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProjectParticipant {
  count: Int;
}

export interface AggregateProjectParticipantPromise
  extends Promise<AggregateProjectParticipant>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProjectParticipantSubscription
  extends Promise<AsyncIterator<AggregateProjectParticipant>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProjectTokenConnection {
  pageInfo: PageInfo;
  edges: ProjectTokenEdge[];
}

export interface ProjectTokenConnectionPromise
  extends Promise<ProjectTokenConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProjectTokenEdge>>() => T;
  aggregate: <T = AggregateProjectTokenPromise>() => T;
}

export interface ProjectTokenConnectionSubscription
  extends Promise<AsyncIterator<ProjectTokenConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProjectTokenEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProjectTokenSubscription>() => T;
}

export interface ProjectTokenEdge {
  node: ProjectToken;
  cursor: String;
}

export interface ProjectTokenEdgePromise
  extends Promise<ProjectTokenEdge>,
    Fragmentable {
  node: <T = ProjectTokenPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProjectTokenEdgeSubscription
  extends Promise<AsyncIterator<ProjectTokenEdge>>,
    Fragmentable {
  node: <T = ProjectTokenSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProjectToken {
  count: Int;
}

export interface AggregateProjectTokenPromise
  extends Promise<AggregateProjectToken>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProjectTokenSubscription
  extends Promise<AsyncIterator<AggregateProjectToken>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TagConnection {
  pageInfo: PageInfo;
  edges: TagEdge[];
}

export interface TagConnectionPromise
  extends Promise<TagConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TagEdge>>() => T;
  aggregate: <T = AggregateTagPromise>() => T;
}

export interface TagConnectionSubscription
  extends Promise<AsyncIterator<TagConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TagEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTagSubscription>() => T;
}

export interface TagEdge {
  node: Tag;
  cursor: String;
}

export interface TagEdgePromise extends Promise<TagEdge>, Fragmentable {
  node: <T = TagPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TagEdgeSubscription
  extends Promise<AsyncIterator<TagEdge>>,
    Fragmentable {
  node: <T = TagSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTag {
  count: Int;
}

export interface AggregateTagPromise
  extends Promise<AggregateTag>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTagSubscription
  extends Promise<AsyncIterator<AggregateTag>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface WorkspaceConnection {
  pageInfo: PageInfo;
  edges: WorkspaceEdge[];
}

export interface WorkspaceConnectionPromise
  extends Promise<WorkspaceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WorkspaceEdge>>() => T;
  aggregate: <T = AggregateWorkspacePromise>() => T;
}

export interface WorkspaceConnectionSubscription
  extends Promise<AsyncIterator<WorkspaceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WorkspaceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWorkspaceSubscription>() => T;
}

export interface WorkspaceEdge {
  node: Workspace;
  cursor: String;
}

export interface WorkspaceEdgePromise
  extends Promise<WorkspaceEdge>,
    Fragmentable {
  node: <T = WorkspacePromise>() => T;
  cursor: () => Promise<String>;
}

export interface WorkspaceEdgeSubscription
  extends Promise<AsyncIterator<WorkspaceEdge>>,
    Fragmentable {
  node: <T = WorkspaceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateWorkspace {
  count: Int;
}

export interface AggregateWorkspacePromise
  extends Promise<AggregateWorkspace>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWorkspaceSubscription
  extends Promise<AsyncIterator<AggregateWorkspace>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface WorkspaceParticipantConnection {
  pageInfo: PageInfo;
  edges: WorkspaceParticipantEdge[];
}

export interface WorkspaceParticipantConnectionPromise
  extends Promise<WorkspaceParticipantConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WorkspaceParticipantEdge>>() => T;
  aggregate: <T = AggregateWorkspaceParticipantPromise>() => T;
}

export interface WorkspaceParticipantConnectionSubscription
  extends Promise<AsyncIterator<WorkspaceParticipantConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<WorkspaceParticipantEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateWorkspaceParticipantSubscription>() => T;
}

export interface WorkspaceParticipantEdge {
  node: WorkspaceParticipant;
  cursor: String;
}

export interface WorkspaceParticipantEdgePromise
  extends Promise<WorkspaceParticipantEdge>,
    Fragmentable {
  node: <T = WorkspaceParticipantPromise>() => T;
  cursor: () => Promise<String>;
}

export interface WorkspaceParticipantEdgeSubscription
  extends Promise<AsyncIterator<WorkspaceParticipantEdge>>,
    Fragmentable {
  node: <T = WorkspaceParticipantSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateWorkspaceParticipant {
  count: Int;
}

export interface AggregateWorkspaceParticipantPromise
  extends Promise<AggregateWorkspaceParticipant>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWorkspaceParticipantSubscription
  extends Promise<AsyncIterator<AggregateWorkspaceParticipant>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface WorkspaceTokenConnection {
  pageInfo: PageInfo;
  edges: WorkspaceTokenEdge[];
}

export interface WorkspaceTokenConnectionPromise
  extends Promise<WorkspaceTokenConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WorkspaceTokenEdge>>() => T;
  aggregate: <T = AggregateWorkspaceTokenPromise>() => T;
}

export interface WorkspaceTokenConnectionSubscription
  extends Promise<AsyncIterator<WorkspaceTokenConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WorkspaceTokenEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWorkspaceTokenSubscription>() => T;
}

export interface WorkspaceTokenEdge {
  node: WorkspaceToken;
  cursor: String;
}

export interface WorkspaceTokenEdgePromise
  extends Promise<WorkspaceTokenEdge>,
    Fragmentable {
  node: <T = WorkspaceTokenPromise>() => T;
  cursor: () => Promise<String>;
}

export interface WorkspaceTokenEdgeSubscription
  extends Promise<AsyncIterator<WorkspaceTokenEdge>>,
    Fragmentable {
  node: <T = WorkspaceTokenSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateWorkspaceToken {
  count: Int;
}

export interface AggregateWorkspaceTokenPromise
  extends Promise<AggregateWorkspaceToken>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWorkspaceTokenSubscription
  extends Promise<AsyncIterator<AggregateWorkspaceToken>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AccessTokenSubscriptionPayload {
  mutation: MutationType;
  node: AccessToken;
  updatedFields: String[];
  previousValues: AccessTokenPreviousValues;
}

export interface AccessTokenSubscriptionPayloadPromise
  extends Promise<AccessTokenSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AccessTokenPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AccessTokenPreviousValuesPromise>() => T;
}

export interface AccessTokenSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AccessTokenSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AccessTokenSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AccessTokenPreviousValuesSubscription>() => T;
}

export interface AccessTokenPreviousValues {
  id: ID_Output;
  token: String;
  createdAt: DateTimeOutput;
  lastSeenTime: DateTimeOutput;
  lastSeenAgent: String;
  lastSeenAddress: String;
}

export interface AccessTokenPreviousValuesPromise
  extends Promise<AccessTokenPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  token: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  lastSeenTime: () => Promise<DateTimeOutput>;
  lastSeenAgent: () => Promise<String>;
  lastSeenAddress: () => Promise<String>;
}

export interface AccessTokenPreviousValuesSubscription
  extends Promise<AsyncIterator<AccessTokenPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  token: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  lastSeenTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  lastSeenAgent: () => Promise<AsyncIterator<String>>;
  lastSeenAddress: () => Promise<AsyncIterator<String>>;
}

export interface CompletionSubscriptionPayload {
  mutation: MutationType;
  node: Completion;
  updatedFields: String[];
  previousValues: CompletionPreviousValues;
}

export interface CompletionSubscriptionPayloadPromise
  extends Promise<CompletionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CompletionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CompletionPreviousValuesPromise>() => T;
}

export interface CompletionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CompletionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CompletionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CompletionPreviousValuesSubscription>() => T;
}

export interface CompletionPreviousValues {
  id: ID_Output;
  conceptAmount: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CompletionPreviousValuesPromise
  extends Promise<CompletionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  conceptAmount: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CompletionPreviousValuesSubscription
  extends Promise<AsyncIterator<CompletionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  conceptAmount: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ConceptSubscriptionPayload {
  mutation: MutationType;
  node: Concept;
  updatedFields: String[];
  previousValues: ConceptPreviousValues;
}

export interface ConceptSubscriptionPayloadPromise
  extends Promise<ConceptSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ConceptPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ConceptPreviousValuesPromise>() => T;
}

export interface ConceptSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ConceptSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ConceptSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ConceptPreviousValuesSubscription>() => T;
}

export interface ConceptPreviousValues {
  id: ID_Output;
  name: String;
  description?: String;
  level: ConceptLevel;
  position?: String;
  official: Boolean;
  frozen: Boolean;
  count: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ConceptPreviousValuesPromise
  extends Promise<ConceptPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  level: () => Promise<ConceptLevel>;
  position: () => Promise<String>;
  official: () => Promise<Boolean>;
  frozen: () => Promise<Boolean>;
  count: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ConceptPreviousValuesSubscription
  extends Promise<AsyncIterator<ConceptPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  level: () => Promise<AsyncIterator<ConceptLevel>>;
  position: () => Promise<AsyncIterator<String>>;
  official: () => Promise<AsyncIterator<Boolean>>;
  frozen: () => Promise<AsyncIterator<Boolean>>;
  count: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ConceptLinkSubscriptionPayload {
  mutation: MutationType;
  node: ConceptLink;
  updatedFields: String[];
  previousValues: ConceptLinkPreviousValues;
}

export interface ConceptLinkSubscriptionPayloadPromise
  extends Promise<ConceptLinkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ConceptLinkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ConceptLinkPreviousValuesPromise>() => T;
}

export interface ConceptLinkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ConceptLinkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ConceptLinkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ConceptLinkPreviousValuesSubscription>() => T;
}

export interface ConceptLinkPreviousValues {
  id: ID_Output;
  official: Boolean;
  frozen: Boolean;
  weight: Int;
  count: Int;
  text?: String;
  level: PrerequisiteLevel;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ConceptLinkPreviousValuesPromise
  extends Promise<ConceptLinkPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  official: () => Promise<Boolean>;
  frozen: () => Promise<Boolean>;
  weight: () => Promise<Int>;
  count: () => Promise<Int>;
  text: () => Promise<String>;
  level: () => Promise<PrerequisiteLevel>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ConceptLinkPreviousValuesSubscription
  extends Promise<AsyncIterator<ConceptLinkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  official: () => Promise<AsyncIterator<Boolean>>;
  frozen: () => Promise<AsyncIterator<Boolean>>;
  weight: () => Promise<AsyncIterator<Int>>;
  count: () => Promise<AsyncIterator<Int>>;
  text: () => Promise<AsyncIterator<String>>;
  level: () => Promise<AsyncIterator<PrerequisiteLevel>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CourseSubscriptionPayload {
  mutation: MutationType;
  node: Course;
  updatedFields: String[];
  previousValues: CoursePreviousValues;
}

export interface CourseSubscriptionPayloadPromise
  extends Promise<CourseSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CoursePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CoursePreviousValuesPromise>() => T;
}

export interface CourseSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CourseSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CourseSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CoursePreviousValuesSubscription>() => T;
}

export interface CoursePreviousValues {
  id: ID_Output;
  name: String;
  official: Boolean;
  frozen: Boolean;
  conceptOrder: ID_Output[];
  objectiveOrder: ID_Output[];
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CoursePreviousValuesPromise
  extends Promise<CoursePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  official: () => Promise<Boolean>;
  frozen: () => Promise<Boolean>;
  conceptOrder: () => Promise<ID_Output[]>;
  objectiveOrder: () => Promise<ID_Output[]>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CoursePreviousValuesSubscription
  extends Promise<AsyncIterator<CoursePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  official: () => Promise<AsyncIterator<Boolean>>;
  frozen: () => Promise<AsyncIterator<Boolean>>;
  conceptOrder: () => Promise<AsyncIterator<ID_Output[]>>;
  objectiveOrder: () => Promise<AsyncIterator<ID_Output[]>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CourseLinkSubscriptionPayload {
  mutation: MutationType;
  node: CourseLink;
  updatedFields: String[];
  previousValues: CourseLinkPreviousValues;
}

export interface CourseLinkSubscriptionPayloadPromise
  extends Promise<CourseLinkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CourseLinkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CourseLinkPreviousValuesPromise>() => T;
}

export interface CourseLinkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CourseLinkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CourseLinkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CourseLinkPreviousValuesSubscription>() => T;
}

export interface CourseLinkPreviousValues {
  id: ID_Output;
  official: Boolean;
  frozen: Boolean;
  weight: Int;
  count: Int;
  text?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CourseLinkPreviousValuesPromise
  extends Promise<CourseLinkPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  official: () => Promise<Boolean>;
  frozen: () => Promise<Boolean>;
  weight: () => Promise<Int>;
  count: () => Promise<Int>;
  text: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CourseLinkPreviousValuesSubscription
  extends Promise<AsyncIterator<CourseLinkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  official: () => Promise<AsyncIterator<Boolean>>;
  frozen: () => Promise<AsyncIterator<Boolean>>;
  weight: () => Promise<AsyncIterator<Int>>;
  count: () => Promise<AsyncIterator<Int>>;
  text: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface GoalLinkSubscriptionPayload {
  mutation: MutationType;
  node: GoalLink;
  updatedFields: String[];
  previousValues: GoalLinkPreviousValues;
}

export interface GoalLinkSubscriptionPayloadPromise
  extends Promise<GoalLinkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GoalLinkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GoalLinkPreviousValuesPromise>() => T;
}

export interface GoalLinkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GoalLinkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GoalLinkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GoalLinkPreviousValuesSubscription>() => T;
}

export interface GoalLinkPreviousValues {
  id: ID_Output;
  text?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface GoalLinkPreviousValuesPromise
  extends Promise<GoalLinkPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface GoalLinkPreviousValuesSubscription
  extends Promise<AsyncIterator<GoalLinkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PointGroupSubscriptionPayload {
  mutation: MutationType;
  node: PointGroup;
  updatedFields: String[];
  previousValues: PointGroupPreviousValues;
}

export interface PointGroupSubscriptionPayloadPromise
  extends Promise<PointGroupSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PointGroupPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PointGroupPreviousValuesPromise>() => T;
}

export interface PointGroupSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PointGroupSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PointGroupSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PointGroupPreviousValuesSubscription>() => T;
}

export interface PointGroupPreviousValues {
  id: ID_Output;
  name: String;
  startDate: DateTimeOutput;
  endDate: DateTimeOutput;
  maxPoints: Int;
  pointsPerConcept: Float;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PointGroupPreviousValuesPromise
  extends Promise<PointGroupPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  startDate: () => Promise<DateTimeOutput>;
  endDate: () => Promise<DateTimeOutput>;
  maxPoints: () => Promise<Int>;
  pointsPerConcept: () => Promise<Float>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PointGroupPreviousValuesSubscription
  extends Promise<AsyncIterator<PointGroupPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  endDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  maxPoints: () => Promise<AsyncIterator<Int>>;
  pointsPerConcept: () => Promise<AsyncIterator<Float>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProjectSubscriptionPayload {
  mutation: MutationType;
  node: Project;
  updatedFields: String[];
  previousValues: ProjectPreviousValues;
}

export interface ProjectSubscriptionPayloadPromise
  extends Promise<ProjectSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProjectPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProjectPreviousValuesPromise>() => T;
}

export interface ProjectSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProjectSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProjectSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProjectPreviousValuesSubscription>() => T;
}

export interface ProjectPreviousValues {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProjectPreviousValuesPromise
  extends Promise<ProjectPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProjectPreviousValuesSubscription
  extends Promise<AsyncIterator<ProjectPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProjectParticipantSubscriptionPayload {
  mutation: MutationType;
  node: ProjectParticipant;
  updatedFields: String[];
  previousValues: ProjectParticipantPreviousValues;
}

export interface ProjectParticipantSubscriptionPayloadPromise
  extends Promise<ProjectParticipantSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProjectParticipantPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProjectParticipantPreviousValuesPromise>() => T;
}

export interface ProjectParticipantSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProjectParticipantSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProjectParticipantSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProjectParticipantPreviousValuesSubscription>() => T;
}

export interface ProjectParticipantPreviousValues {
  id: ID_Output;
  privilege: Privilege;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProjectParticipantPreviousValuesPromise
  extends Promise<ProjectParticipantPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  privilege: () => Promise<Privilege>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProjectParticipantPreviousValuesSubscription
  extends Promise<AsyncIterator<ProjectParticipantPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  privilege: () => Promise<AsyncIterator<Privilege>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProjectTokenSubscriptionPayload {
  mutation: MutationType;
  node: ProjectToken;
  updatedFields: String[];
  previousValues: ProjectTokenPreviousValues;
}

export interface ProjectTokenSubscriptionPayloadPromise
  extends Promise<ProjectTokenSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProjectTokenPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProjectTokenPreviousValuesPromise>() => T;
}

export interface ProjectTokenSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProjectTokenSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProjectTokenSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProjectTokenPreviousValuesSubscription>() => T;
}

export interface ProjectTokenPreviousValues {
  id: ID_Output;
  privilege: Privilege;
  revoked: Boolean;
}

export interface ProjectTokenPreviousValuesPromise
  extends Promise<ProjectTokenPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  privilege: () => Promise<Privilege>;
  revoked: () => Promise<Boolean>;
}

export interface ProjectTokenPreviousValuesSubscription
  extends Promise<AsyncIterator<ProjectTokenPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  privilege: () => Promise<AsyncIterator<Privilege>>;
  revoked: () => Promise<AsyncIterator<Boolean>>;
}

export interface TagSubscriptionPayload {
  mutation: MutationType;
  node: Tag;
  updatedFields: String[];
  previousValues: TagPreviousValues;
}

export interface TagSubscriptionPayloadPromise
  extends Promise<TagSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TagPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TagPreviousValuesPromise>() => T;
}

export interface TagSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TagSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TagSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TagPreviousValuesSubscription>() => T;
}

export interface TagPreviousValues {
  id: ID_Output;
  name: String;
  type: String;
  priority: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TagPreviousValuesPromise
  extends Promise<TagPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  type: () => Promise<String>;
  priority: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TagPreviousValuesSubscription
  extends Promise<AsyncIterator<TagPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  priority: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  tmcId?: Int;
  hakaId?: String;
  googleId?: String;
  role: Role;
  deactivated: Boolean;
  seenGuides: String[];
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  tmcId: () => Promise<Int>;
  hakaId: () => Promise<String>;
  googleId: () => Promise<String>;
  role: () => Promise<Role>;
  deactivated: () => Promise<Boolean>;
  seenGuides: () => Promise<String[]>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  tmcId: () => Promise<AsyncIterator<Int>>;
  hakaId: () => Promise<AsyncIterator<String>>;
  googleId: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  deactivated: () => Promise<AsyncIterator<Boolean>>;
  seenGuides: () => Promise<AsyncIterator<String[]>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface WorkspaceSubscriptionPayload {
  mutation: MutationType;
  node: Workspace;
  updatedFields: String[];
  previousValues: WorkspacePreviousValues;
}

export interface WorkspaceSubscriptionPayloadPromise
  extends Promise<WorkspaceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WorkspacePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WorkspacePreviousValuesPromise>() => T;
}

export interface WorkspaceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WorkspaceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WorkspaceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WorkspacePreviousValuesSubscription>() => T;
}

export interface WorkspacePreviousValues {
  id: ID_Output;
  name: String;
  courseOrder: ID_Output[];
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface WorkspacePreviousValuesPromise
  extends Promise<WorkspacePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  courseOrder: () => Promise<ID_Output[]>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface WorkspacePreviousValuesSubscription
  extends Promise<AsyncIterator<WorkspacePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  courseOrder: () => Promise<AsyncIterator<ID_Output[]>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface WorkspaceParticipantSubscriptionPayload {
  mutation: MutationType;
  node: WorkspaceParticipant;
  updatedFields: String[];
  previousValues: WorkspaceParticipantPreviousValues;
}

export interface WorkspaceParticipantSubscriptionPayloadPromise
  extends Promise<WorkspaceParticipantSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WorkspaceParticipantPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WorkspaceParticipantPreviousValuesPromise>() => T;
}

export interface WorkspaceParticipantSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WorkspaceParticipantSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WorkspaceParticipantSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WorkspaceParticipantPreviousValuesSubscription>() => T;
}

export interface WorkspaceParticipantPreviousValues {
  id: ID_Output;
  privilege: Privilege;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface WorkspaceParticipantPreviousValuesPromise
  extends Promise<WorkspaceParticipantPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  privilege: () => Promise<Privilege>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface WorkspaceParticipantPreviousValuesSubscription
  extends Promise<AsyncIterator<WorkspaceParticipantPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  privilege: () => Promise<AsyncIterator<Privilege>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface WorkspaceTokenSubscriptionPayload {
  mutation: MutationType;
  node: WorkspaceToken;
  updatedFields: String[];
  previousValues: WorkspaceTokenPreviousValues;
}

export interface WorkspaceTokenSubscriptionPayloadPromise
  extends Promise<WorkspaceTokenSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WorkspaceTokenPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WorkspaceTokenPreviousValuesPromise>() => T;
}

export interface WorkspaceTokenSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WorkspaceTokenSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WorkspaceTokenSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WorkspaceTokenPreviousValuesSubscription>() => T;
}

export interface WorkspaceTokenPreviousValues {
  id: ID_Output;
  privilege: Privilege;
  revoked: Boolean;
}

export interface WorkspaceTokenPreviousValuesPromise
  extends Promise<WorkspaceTokenPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  privilege: () => Promise<Privilege>;
  revoked: () => Promise<Boolean>;
}

export interface WorkspaceTokenPreviousValuesSubscription
  extends Promise<AsyncIterator<WorkspaceTokenPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  privilege: () => Promise<AsyncIterator<Privilege>>;
  revoked: () => Promise<AsyncIterator<Boolean>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "AccessToken",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  },
  {
    name: "Privilege",
    embedded: false
  },
  {
    name: "Project",
    embedded: false
  },
  {
    name: "Workspace",
    embedded: false
  },
  {
    name: "WorkspaceParticipant",
    embedded: false
  },
  {
    name: "ProjectParticipant",
    embedded: false
  },
  {
    name: "WorkspaceToken",
    embedded: false
  },
  {
    name: "ProjectToken",
    embedded: false
  },
  {
    name: "CourseLink",
    embedded: false
  },
  {
    name: "Course",
    embedded: false
  },
  {
    name: "ConceptLink",
    embedded: false
  },
  {
    name: "ConceptLevel",
    embedded: false
  },
  {
    name: "PrerequisiteLevel",
    embedded: false
  },
  {
    name: "GoalLink",
    embedded: false
  },
  {
    name: "Concept",
    embedded: false
  },
  {
    name: "PointGroup",
    embedded: false
  },
  {
    name: "Completion",
    embedded: false
  },
  {
    name: "Tag",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
