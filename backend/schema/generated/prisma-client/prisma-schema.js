module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AccessToken {
  id: ID!
  token: String!
  user: User!
  createdAt: DateTime!
  lastSeenTime: DateTime!
  lastSeenAgent: String!
  lastSeenAddress: String!
}

type AccessTokenConnection {
  pageInfo: PageInfo!
  edges: [AccessTokenEdge]!
  aggregate: AggregateAccessToken!
}

input AccessTokenCreateInput {
  id: ID
  token: String!
  user: UserCreateOneWithoutTokensInput!
  lastSeenAgent: String!
  lastSeenAddress: String!
}

input AccessTokenCreateManyWithoutUserInput {
  create: [AccessTokenCreateWithoutUserInput!]
  connect: [AccessTokenWhereUniqueInput!]
}

input AccessTokenCreateWithoutUserInput {
  id: ID
  token: String!
  lastSeenAgent: String!
  lastSeenAddress: String!
}

type AccessTokenEdge {
  node: AccessToken!
  cursor: String!
}

enum AccessTokenOrderByInput {
  id_ASC
  id_DESC
  token_ASC
  token_DESC
  createdAt_ASC
  createdAt_DESC
  lastSeenTime_ASC
  lastSeenTime_DESC
  lastSeenAgent_ASC
  lastSeenAgent_DESC
  lastSeenAddress_ASC
  lastSeenAddress_DESC
}

type AccessTokenPreviousValues {
  id: ID!
  token: String!
  createdAt: DateTime!
  lastSeenTime: DateTime!
  lastSeenAgent: String!
  lastSeenAddress: String!
}

input AccessTokenScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  token: String
  token_not: String
  token_in: [String!]
  token_not_in: [String!]
  token_lt: String
  token_lte: String
  token_gt: String
  token_gte: String
  token_contains: String
  token_not_contains: String
  token_starts_with: String
  token_not_starts_with: String
  token_ends_with: String
  token_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  lastSeenTime: DateTime
  lastSeenTime_not: DateTime
  lastSeenTime_in: [DateTime!]
  lastSeenTime_not_in: [DateTime!]
  lastSeenTime_lt: DateTime
  lastSeenTime_lte: DateTime
  lastSeenTime_gt: DateTime
  lastSeenTime_gte: DateTime
  lastSeenAgent: String
  lastSeenAgent_not: String
  lastSeenAgent_in: [String!]
  lastSeenAgent_not_in: [String!]
  lastSeenAgent_lt: String
  lastSeenAgent_lte: String
  lastSeenAgent_gt: String
  lastSeenAgent_gte: String
  lastSeenAgent_contains: String
  lastSeenAgent_not_contains: String
  lastSeenAgent_starts_with: String
  lastSeenAgent_not_starts_with: String
  lastSeenAgent_ends_with: String
  lastSeenAgent_not_ends_with: String
  lastSeenAddress: String
  lastSeenAddress_not: String
  lastSeenAddress_in: [String!]
  lastSeenAddress_not_in: [String!]
  lastSeenAddress_lt: String
  lastSeenAddress_lte: String
  lastSeenAddress_gt: String
  lastSeenAddress_gte: String
  lastSeenAddress_contains: String
  lastSeenAddress_not_contains: String
  lastSeenAddress_starts_with: String
  lastSeenAddress_not_starts_with: String
  lastSeenAddress_ends_with: String
  lastSeenAddress_not_ends_with: String
  AND: [AccessTokenScalarWhereInput!]
  OR: [AccessTokenScalarWhereInput!]
  NOT: [AccessTokenScalarWhereInput!]
}

type AccessTokenSubscriptionPayload {
  mutation: MutationType!
  node: AccessToken
  updatedFields: [String!]
  previousValues: AccessTokenPreviousValues
}

input AccessTokenSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AccessTokenWhereInput
  AND: [AccessTokenSubscriptionWhereInput!]
  OR: [AccessTokenSubscriptionWhereInput!]
  NOT: [AccessTokenSubscriptionWhereInput!]
}

input AccessTokenUpdateInput {
  token: String
  user: UserUpdateOneRequiredWithoutTokensInput
  lastSeenAgent: String
  lastSeenAddress: String
}

input AccessTokenUpdateManyDataInput {
  token: String
  lastSeenAgent: String
  lastSeenAddress: String
}

input AccessTokenUpdateManyMutationInput {
  token: String
  lastSeenAgent: String
  lastSeenAddress: String
}

input AccessTokenUpdateManyWithoutUserInput {
  create: [AccessTokenCreateWithoutUserInput!]
  delete: [AccessTokenWhereUniqueInput!]
  connect: [AccessTokenWhereUniqueInput!]
  set: [AccessTokenWhereUniqueInput!]
  disconnect: [AccessTokenWhereUniqueInput!]
  update: [AccessTokenUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [AccessTokenUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [AccessTokenScalarWhereInput!]
  updateMany: [AccessTokenUpdateManyWithWhereNestedInput!]
}

input AccessTokenUpdateManyWithWhereNestedInput {
  where: AccessTokenScalarWhereInput!
  data: AccessTokenUpdateManyDataInput!
}

input AccessTokenUpdateWithoutUserDataInput {
  token: String
  lastSeenAgent: String
  lastSeenAddress: String
}

input AccessTokenUpdateWithWhereUniqueWithoutUserInput {
  where: AccessTokenWhereUniqueInput!
  data: AccessTokenUpdateWithoutUserDataInput!
}

input AccessTokenUpsertWithWhereUniqueWithoutUserInput {
  where: AccessTokenWhereUniqueInput!
  update: AccessTokenUpdateWithoutUserDataInput!
  create: AccessTokenCreateWithoutUserInput!
}

input AccessTokenWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  token: String
  token_not: String
  token_in: [String!]
  token_not_in: [String!]
  token_lt: String
  token_lte: String
  token_gt: String
  token_gte: String
  token_contains: String
  token_not_contains: String
  token_starts_with: String
  token_not_starts_with: String
  token_ends_with: String
  token_not_ends_with: String
  user: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  lastSeenTime: DateTime
  lastSeenTime_not: DateTime
  lastSeenTime_in: [DateTime!]
  lastSeenTime_not_in: [DateTime!]
  lastSeenTime_lt: DateTime
  lastSeenTime_lte: DateTime
  lastSeenTime_gt: DateTime
  lastSeenTime_gte: DateTime
  lastSeenAgent: String
  lastSeenAgent_not: String
  lastSeenAgent_in: [String!]
  lastSeenAgent_not_in: [String!]
  lastSeenAgent_lt: String
  lastSeenAgent_lte: String
  lastSeenAgent_gt: String
  lastSeenAgent_gte: String
  lastSeenAgent_contains: String
  lastSeenAgent_not_contains: String
  lastSeenAgent_starts_with: String
  lastSeenAgent_not_starts_with: String
  lastSeenAgent_ends_with: String
  lastSeenAgent_not_ends_with: String
  lastSeenAddress: String
  lastSeenAddress_not: String
  lastSeenAddress_in: [String!]
  lastSeenAddress_not_in: [String!]
  lastSeenAddress_lt: String
  lastSeenAddress_lte: String
  lastSeenAddress_gt: String
  lastSeenAddress_gte: String
  lastSeenAddress_contains: String
  lastSeenAddress_not_contains: String
  lastSeenAddress_starts_with: String
  lastSeenAddress_not_starts_with: String
  lastSeenAddress_ends_with: String
  lastSeenAddress_not_ends_with: String
  AND: [AccessTokenWhereInput!]
  OR: [AccessTokenWhereInput!]
  NOT: [AccessTokenWhereInput!]
}

input AccessTokenWhereUniqueInput {
  id: ID
  token: String
}

type AggregateAccessToken {
  count: Int!
}

type AggregateCompletion {
  count: Int!
}

type AggregateConcept {
  count: Int!
}

type AggregateConceptLink {
  count: Int!
}

type AggregateCourse {
  count: Int!
}

type AggregateCourseLink {
  count: Int!
}

type AggregateGoalLink {
  count: Int!
}

type AggregateObjectiveLink {
  count: Int!
}

type AggregatePointGroup {
  count: Int!
}

type AggregateProject {
  count: Int!
}

type AggregateProjectParticipant {
  count: Int!
}

type AggregateProjectToken {
  count: Int!
}

type AggregateTag {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateWorkspace {
  count: Int!
}

type AggregateWorkspaceParticipant {
  count: Int!
}

type AggregateWorkspaceToken {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Completion {
  id: ID!
  user: User!
  conceptAmount: Int!
  pointGroup: PointGroup!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CompletionConnection {
  pageInfo: PageInfo!
  edges: [CompletionEdge]!
  aggregate: AggregateCompletion!
}

input CompletionCreateInput {
  id: ID
  user: UserCreateOneInput!
  conceptAmount: Int
  pointGroup: PointGroupCreateOneWithoutCompletionsInput!
}

input CompletionCreateManyWithoutPointGroupInput {
  create: [CompletionCreateWithoutPointGroupInput!]
  connect: [CompletionWhereUniqueInput!]
}

input CompletionCreateWithoutPointGroupInput {
  id: ID
  user: UserCreateOneInput!
  conceptAmount: Int
}

type CompletionEdge {
  node: Completion!
  cursor: String!
}

enum CompletionOrderByInput {
  id_ASC
  id_DESC
  conceptAmount_ASC
  conceptAmount_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CompletionPreviousValues {
  id: ID!
  conceptAmount: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CompletionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  conceptAmount: Int
  conceptAmount_not: Int
  conceptAmount_in: [Int!]
  conceptAmount_not_in: [Int!]
  conceptAmount_lt: Int
  conceptAmount_lte: Int
  conceptAmount_gt: Int
  conceptAmount_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CompletionScalarWhereInput!]
  OR: [CompletionScalarWhereInput!]
  NOT: [CompletionScalarWhereInput!]
}

type CompletionSubscriptionPayload {
  mutation: MutationType!
  node: Completion
  updatedFields: [String!]
  previousValues: CompletionPreviousValues
}

input CompletionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CompletionWhereInput
  AND: [CompletionSubscriptionWhereInput!]
  OR: [CompletionSubscriptionWhereInput!]
  NOT: [CompletionSubscriptionWhereInput!]
}

input CompletionUpdateInput {
  user: UserUpdateOneRequiredInput
  conceptAmount: Int
  pointGroup: PointGroupUpdateOneRequiredWithoutCompletionsInput
}

input CompletionUpdateManyDataInput {
  conceptAmount: Int
}

input CompletionUpdateManyMutationInput {
  conceptAmount: Int
}

input CompletionUpdateManyWithoutPointGroupInput {
  create: [CompletionCreateWithoutPointGroupInput!]
  delete: [CompletionWhereUniqueInput!]
  connect: [CompletionWhereUniqueInput!]
  set: [CompletionWhereUniqueInput!]
  disconnect: [CompletionWhereUniqueInput!]
  update: [CompletionUpdateWithWhereUniqueWithoutPointGroupInput!]
  upsert: [CompletionUpsertWithWhereUniqueWithoutPointGroupInput!]
  deleteMany: [CompletionScalarWhereInput!]
  updateMany: [CompletionUpdateManyWithWhereNestedInput!]
}

input CompletionUpdateManyWithWhereNestedInput {
  where: CompletionScalarWhereInput!
  data: CompletionUpdateManyDataInput!
}

input CompletionUpdateWithoutPointGroupDataInput {
  user: UserUpdateOneRequiredInput
  conceptAmount: Int
}

input CompletionUpdateWithWhereUniqueWithoutPointGroupInput {
  where: CompletionWhereUniqueInput!
  data: CompletionUpdateWithoutPointGroupDataInput!
}

input CompletionUpsertWithWhereUniqueWithoutPointGroupInput {
  where: CompletionWhereUniqueInput!
  update: CompletionUpdateWithoutPointGroupDataInput!
  create: CompletionCreateWithoutPointGroupInput!
}

input CompletionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  conceptAmount: Int
  conceptAmount_not: Int
  conceptAmount_in: [Int!]
  conceptAmount_not_in: [Int!]
  conceptAmount_lt: Int
  conceptAmount_lte: Int
  conceptAmount_gt: Int
  conceptAmount_gte: Int
  pointGroup: PointGroupWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CompletionWhereInput!]
  OR: [CompletionWhereInput!]
  NOT: [CompletionWhereInput!]
}

input CompletionWhereUniqueInput {
  id: ID
}

type Concept {
  id: ID!
  name: String!
  description: String
  level: ConceptLevel!
  position: String
  official: Boolean!
  frozen: Boolean!
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
  count: Int!
  sourceConcept: Concept
  clones(where: ConceptWhereInput, orderBy: ConceptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Concept!]
  sourceCommon: Concept
  commonClones(where: ConceptWhereInput, orderBy: ConceptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Concept!]
  linksFromConcept(where: ConceptLinkWhereInput, orderBy: ConceptLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ConceptLink!]
  linksToConcept(where: ConceptLinkWhereInput, orderBy: ConceptLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ConceptLink!]
  goalLinks(where: GoalLinkWhereInput, orderBy: GoalLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GoalLink!]
  course: Course
  workspace: Workspace!
  createdBy: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ConceptConnection {
  pageInfo: PageInfo!
  edges: [ConceptEdge]!
  aggregate: AggregateConcept!
}

input ConceptCreateInput {
  id: ID
  name: String!
  description: String
  level: ConceptLevel
  position: String
  official: Boolean
  frozen: Boolean
  tags: TagCreateManyInput
  count: Int
  sourceConcept: ConceptCreateOneWithoutClonesInput
  clones: ConceptCreateManyWithoutSourceConceptInput
  sourceCommon: ConceptCreateOneWithoutCommonClonesInput
  commonClones: ConceptCreateManyWithoutSourceCommonInput
  linksFromConcept: ConceptLinkCreateManyWithoutFromInput
  linksToConcept: ConceptLinkCreateManyWithoutToInput
  goalLinks: GoalLinkCreateManyWithoutGoalInput
  course: CourseCreateOneWithoutConceptsInput
  workspace: WorkspaceCreateOneWithoutConceptsInput!
  createdBy: UserCreateOneInput!
}

input ConceptCreateManyInput {
  create: [ConceptCreateInput!]
  connect: [ConceptWhereUniqueInput!]
}

input ConceptCreateManyWithoutCourseInput {
  create: [ConceptCreateWithoutCourseInput!]
  connect: [ConceptWhereUniqueInput!]
}

input ConceptCreateManyWithoutSourceCommonInput {
  create: [ConceptCreateWithoutSourceCommonInput!]
  connect: [ConceptWhereUniqueInput!]
}

input ConceptCreateManyWithoutSourceConceptInput {
  create: [ConceptCreateWithoutSourceConceptInput!]
  connect: [ConceptWhereUniqueInput!]
}

input ConceptCreateManyWithoutWorkspaceInput {
  create: [ConceptCreateWithoutWorkspaceInput!]
  connect: [ConceptWhereUniqueInput!]
}

input ConceptCreateOneInput {
  create: ConceptCreateInput
  connect: ConceptWhereUniqueInput
}

input ConceptCreateOneWithoutClonesInput {
  create: ConceptCreateWithoutClonesInput
  connect: ConceptWhereUniqueInput
}

input ConceptCreateOneWithoutCommonClonesInput {
  create: ConceptCreateWithoutCommonClonesInput
  connect: ConceptWhereUniqueInput
}

input ConceptCreateOneWithoutGoalLinksInput {
  create: ConceptCreateWithoutGoalLinksInput
  connect: ConceptWhereUniqueInput
}

input ConceptCreateOneWithoutLinksFromConceptInput {
  create: ConceptCreateWithoutLinksFromConceptInput
  connect: ConceptWhereUniqueInput
}

input ConceptCreateOneWithoutLinksToConceptInput {
  create: ConceptCreateWithoutLinksToConceptInput
  connect: ConceptWhereUniqueInput
}

input ConceptCreateWithoutClonesInput {
  id: ID
  name: String!
  description: String
  level: ConceptLevel
  position: String
  official: Boolean
  frozen: Boolean
  tags: TagCreateManyInput
  count: Int
  sourceConcept: ConceptCreateOneWithoutClonesInput
  sourceCommon: ConceptCreateOneWithoutCommonClonesInput
  commonClones: ConceptCreateManyWithoutSourceCommonInput
  linksFromConcept: ConceptLinkCreateManyWithoutFromInput
  linksToConcept: ConceptLinkCreateManyWithoutToInput
  goalLinks: GoalLinkCreateManyWithoutGoalInput
  course: CourseCreateOneWithoutConceptsInput
  workspace: WorkspaceCreateOneWithoutConceptsInput!
  createdBy: UserCreateOneInput!
}

input ConceptCreateWithoutCommonClonesInput {
  id: ID
  name: String!
  description: String
  level: ConceptLevel
  position: String
  official: Boolean
  frozen: Boolean
  tags: TagCreateManyInput
  count: Int
  sourceConcept: ConceptCreateOneWithoutClonesInput
  clones: ConceptCreateManyWithoutSourceConceptInput
  sourceCommon: ConceptCreateOneWithoutCommonClonesInput
  linksFromConcept: ConceptLinkCreateManyWithoutFromInput
  linksToConcept: ConceptLinkCreateManyWithoutToInput
  goalLinks: GoalLinkCreateManyWithoutGoalInput
  course: CourseCreateOneWithoutConceptsInput
  workspace: WorkspaceCreateOneWithoutConceptsInput!
  createdBy: UserCreateOneInput!
}

input ConceptCreateWithoutCourseInput {
  id: ID
  name: String!
  description: String
  level: ConceptLevel
  position: String
  official: Boolean
  frozen: Boolean
  tags: TagCreateManyInput
  count: Int
  sourceConcept: ConceptCreateOneWithoutClonesInput
  clones: ConceptCreateManyWithoutSourceConceptInput
  sourceCommon: ConceptCreateOneWithoutCommonClonesInput
  commonClones: ConceptCreateManyWithoutSourceCommonInput
  linksFromConcept: ConceptLinkCreateManyWithoutFromInput
  linksToConcept: ConceptLinkCreateManyWithoutToInput
  goalLinks: GoalLinkCreateManyWithoutGoalInput
  workspace: WorkspaceCreateOneWithoutConceptsInput!
  createdBy: UserCreateOneInput!
}

input ConceptCreateWithoutGoalLinksInput {
  id: ID
  name: String!
  description: String
  level: ConceptLevel
  position: String
  official: Boolean
  frozen: Boolean
  tags: TagCreateManyInput
  count: Int
  sourceConcept: ConceptCreateOneWithoutClonesInput
  clones: ConceptCreateManyWithoutSourceConceptInput
  sourceCommon: ConceptCreateOneWithoutCommonClonesInput
  commonClones: ConceptCreateManyWithoutSourceCommonInput
  linksFromConcept: ConceptLinkCreateManyWithoutFromInput
  linksToConcept: ConceptLinkCreateManyWithoutToInput
  course: CourseCreateOneWithoutConceptsInput
  workspace: WorkspaceCreateOneWithoutConceptsInput!
  createdBy: UserCreateOneInput!
}

input ConceptCreateWithoutLinksFromConceptInput {
  id: ID
  name: String!
  description: String
  level: ConceptLevel
  position: String
  official: Boolean
  frozen: Boolean
  tags: TagCreateManyInput
  count: Int
  sourceConcept: ConceptCreateOneWithoutClonesInput
  clones: ConceptCreateManyWithoutSourceConceptInput
  sourceCommon: ConceptCreateOneWithoutCommonClonesInput
  commonClones: ConceptCreateManyWithoutSourceCommonInput
  linksToConcept: ConceptLinkCreateManyWithoutToInput
  goalLinks: GoalLinkCreateManyWithoutGoalInput
  course: CourseCreateOneWithoutConceptsInput
  workspace: WorkspaceCreateOneWithoutConceptsInput!
  createdBy: UserCreateOneInput!
}

input ConceptCreateWithoutLinksToConceptInput {
  id: ID
  name: String!
  description: String
  level: ConceptLevel
  position: String
  official: Boolean
  frozen: Boolean
  tags: TagCreateManyInput
  count: Int
  sourceConcept: ConceptCreateOneWithoutClonesInput
  clones: ConceptCreateManyWithoutSourceConceptInput
  sourceCommon: ConceptCreateOneWithoutCommonClonesInput
  commonClones: ConceptCreateManyWithoutSourceCommonInput
  linksFromConcept: ConceptLinkCreateManyWithoutFromInput
  goalLinks: GoalLinkCreateManyWithoutGoalInput
  course: CourseCreateOneWithoutConceptsInput
  workspace: WorkspaceCreateOneWithoutConceptsInput!
  createdBy: UserCreateOneInput!
}

input ConceptCreateWithoutSourceCommonInput {
  id: ID
  name: String!
  description: String
  level: ConceptLevel
  position: String
  official: Boolean
  frozen: Boolean
  tags: TagCreateManyInput
  count: Int
  sourceConcept: ConceptCreateOneWithoutClonesInput
  clones: ConceptCreateManyWithoutSourceConceptInput
  commonClones: ConceptCreateManyWithoutSourceCommonInput
  linksFromConcept: ConceptLinkCreateManyWithoutFromInput
  linksToConcept: ConceptLinkCreateManyWithoutToInput
  goalLinks: GoalLinkCreateManyWithoutGoalInput
  course: CourseCreateOneWithoutConceptsInput
  workspace: WorkspaceCreateOneWithoutConceptsInput!
  createdBy: UserCreateOneInput!
}

input ConceptCreateWithoutSourceConceptInput {
  id: ID
  name: String!
  description: String
  level: ConceptLevel
  position: String
  official: Boolean
  frozen: Boolean
  tags: TagCreateManyInput
  count: Int
  clones: ConceptCreateManyWithoutSourceConceptInput
  sourceCommon: ConceptCreateOneWithoutCommonClonesInput
  commonClones: ConceptCreateManyWithoutSourceCommonInput
  linksFromConcept: ConceptLinkCreateManyWithoutFromInput
  linksToConcept: ConceptLinkCreateManyWithoutToInput
  goalLinks: GoalLinkCreateManyWithoutGoalInput
  course: CourseCreateOneWithoutConceptsInput
  workspace: WorkspaceCreateOneWithoutConceptsInput!
  createdBy: UserCreateOneInput!
}

input ConceptCreateWithoutWorkspaceInput {
  id: ID
  name: String!
  description: String
  level: ConceptLevel
  position: String
  official: Boolean
  frozen: Boolean
  tags: TagCreateManyInput
  count: Int
  sourceConcept: ConceptCreateOneWithoutClonesInput
  clones: ConceptCreateManyWithoutSourceConceptInput
  sourceCommon: ConceptCreateOneWithoutCommonClonesInput
  commonClones: ConceptCreateManyWithoutSourceCommonInput
  linksFromConcept: ConceptLinkCreateManyWithoutFromInput
  linksToConcept: ConceptLinkCreateManyWithoutToInput
  goalLinks: GoalLinkCreateManyWithoutGoalInput
  course: CourseCreateOneWithoutConceptsInput
  createdBy: UserCreateOneInput!
}

type ConceptEdge {
  node: Concept!
  cursor: String!
}

enum ConceptLevel {
  OBJECTIVE
  CONCEPT
  GOAL
  COMMON
}

type ConceptLink {
  id: ID!
  from: Concept!
  to: Concept!
  official: Boolean!
  frozen: Boolean!
  weight: Int!
  count: Int!
  text: String
  workspace: Workspace!
  createdBy: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ConceptLinkConnection {
  pageInfo: PageInfo!
  edges: [ConceptLinkEdge]!
  aggregate: AggregateConceptLink!
}

input ConceptLinkCreateInput {
  id: ID
  from: ConceptCreateOneWithoutLinksFromConceptInput!
  to: ConceptCreateOneWithoutLinksToConceptInput!
  official: Boolean
  frozen: Boolean
  weight: Int
  count: Int
  text: String
  workspace: WorkspaceCreateOneWithoutConceptLinksInput!
  createdBy: UserCreateOneInput!
}

input ConceptLinkCreateManyWithoutFromInput {
  create: [ConceptLinkCreateWithoutFromInput!]
  connect: [ConceptLinkWhereUniqueInput!]
}

input ConceptLinkCreateManyWithoutToInput {
  create: [ConceptLinkCreateWithoutToInput!]
  connect: [ConceptLinkWhereUniqueInput!]
}

input ConceptLinkCreateManyWithoutWorkspaceInput {
  create: [ConceptLinkCreateWithoutWorkspaceInput!]
  connect: [ConceptLinkWhereUniqueInput!]
}

input ConceptLinkCreateWithoutFromInput {
  id: ID
  to: ConceptCreateOneWithoutLinksToConceptInput!
  official: Boolean
  frozen: Boolean
  weight: Int
  count: Int
  text: String
  workspace: WorkspaceCreateOneWithoutConceptLinksInput!
  createdBy: UserCreateOneInput!
}

input ConceptLinkCreateWithoutToInput {
  id: ID
  from: ConceptCreateOneWithoutLinksFromConceptInput!
  official: Boolean
  frozen: Boolean
  weight: Int
  count: Int
  text: String
  workspace: WorkspaceCreateOneWithoutConceptLinksInput!
  createdBy: UserCreateOneInput!
}

input ConceptLinkCreateWithoutWorkspaceInput {
  id: ID
  from: ConceptCreateOneWithoutLinksFromConceptInput!
  to: ConceptCreateOneWithoutLinksToConceptInput!
  official: Boolean
  frozen: Boolean
  weight: Int
  count: Int
  text: String
  createdBy: UserCreateOneInput!
}

type ConceptLinkEdge {
  node: ConceptLink!
  cursor: String!
}

enum ConceptLinkOrderByInput {
  id_ASC
  id_DESC
  official_ASC
  official_DESC
  frozen_ASC
  frozen_DESC
  weight_ASC
  weight_DESC
  count_ASC
  count_DESC
  text_ASC
  text_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ConceptLinkPreviousValues {
  id: ID!
  official: Boolean!
  frozen: Boolean!
  weight: Int!
  count: Int!
  text: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ConceptLinkScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  official: Boolean
  official_not: Boolean
  frozen: Boolean
  frozen_not: Boolean
  weight: Int
  weight_not: Int
  weight_in: [Int!]
  weight_not_in: [Int!]
  weight_lt: Int
  weight_lte: Int
  weight_gt: Int
  weight_gte: Int
  count: Int
  count_not: Int
  count_in: [Int!]
  count_not_in: [Int!]
  count_lt: Int
  count_lte: Int
  count_gt: Int
  count_gte: Int
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ConceptLinkScalarWhereInput!]
  OR: [ConceptLinkScalarWhereInput!]
  NOT: [ConceptLinkScalarWhereInput!]
}

type ConceptLinkSubscriptionPayload {
  mutation: MutationType!
  node: ConceptLink
  updatedFields: [String!]
  previousValues: ConceptLinkPreviousValues
}

input ConceptLinkSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ConceptLinkWhereInput
  AND: [ConceptLinkSubscriptionWhereInput!]
  OR: [ConceptLinkSubscriptionWhereInput!]
  NOT: [ConceptLinkSubscriptionWhereInput!]
}

input ConceptLinkUpdateInput {
  from: ConceptUpdateOneRequiredWithoutLinksFromConceptInput
  to: ConceptUpdateOneRequiredWithoutLinksToConceptInput
  official: Boolean
  frozen: Boolean
  weight: Int
  count: Int
  text: String
  workspace: WorkspaceUpdateOneRequiredWithoutConceptLinksInput
  createdBy: UserUpdateOneRequiredInput
}

input ConceptLinkUpdateManyDataInput {
  official: Boolean
  frozen: Boolean
  weight: Int
  count: Int
  text: String
}

input ConceptLinkUpdateManyMutationInput {
  official: Boolean
  frozen: Boolean
  weight: Int
  count: Int
  text: String
}

input ConceptLinkUpdateManyWithoutFromInput {
  create: [ConceptLinkCreateWithoutFromInput!]
  delete: [ConceptLinkWhereUniqueInput!]
  connect: [ConceptLinkWhereUniqueInput!]
  set: [ConceptLinkWhereUniqueInput!]
  disconnect: [ConceptLinkWhereUniqueInput!]
  update: [ConceptLinkUpdateWithWhereUniqueWithoutFromInput!]
  upsert: [ConceptLinkUpsertWithWhereUniqueWithoutFromInput!]
  deleteMany: [ConceptLinkScalarWhereInput!]
  updateMany: [ConceptLinkUpdateManyWithWhereNestedInput!]
}

input ConceptLinkUpdateManyWithoutToInput {
  create: [ConceptLinkCreateWithoutToInput!]
  delete: [ConceptLinkWhereUniqueInput!]
  connect: [ConceptLinkWhereUniqueInput!]
  set: [ConceptLinkWhereUniqueInput!]
  disconnect: [ConceptLinkWhereUniqueInput!]
  update: [ConceptLinkUpdateWithWhereUniqueWithoutToInput!]
  upsert: [ConceptLinkUpsertWithWhereUniqueWithoutToInput!]
  deleteMany: [ConceptLinkScalarWhereInput!]
  updateMany: [ConceptLinkUpdateManyWithWhereNestedInput!]
}

input ConceptLinkUpdateManyWithoutWorkspaceInput {
  create: [ConceptLinkCreateWithoutWorkspaceInput!]
  delete: [ConceptLinkWhereUniqueInput!]
  connect: [ConceptLinkWhereUniqueInput!]
  set: [ConceptLinkWhereUniqueInput!]
  disconnect: [ConceptLinkWhereUniqueInput!]
  update: [ConceptLinkUpdateWithWhereUniqueWithoutWorkspaceInput!]
  upsert: [ConceptLinkUpsertWithWhereUniqueWithoutWorkspaceInput!]
  deleteMany: [ConceptLinkScalarWhereInput!]
  updateMany: [ConceptLinkUpdateManyWithWhereNestedInput!]
}

input ConceptLinkUpdateManyWithWhereNestedInput {
  where: ConceptLinkScalarWhereInput!
  data: ConceptLinkUpdateManyDataInput!
}

input ConceptLinkUpdateWithoutFromDataInput {
  to: ConceptUpdateOneRequiredWithoutLinksToConceptInput
  official: Boolean
  frozen: Boolean
  weight: Int
  count: Int
  text: String
  workspace: WorkspaceUpdateOneRequiredWithoutConceptLinksInput
  createdBy: UserUpdateOneRequiredInput
}

input ConceptLinkUpdateWithoutToDataInput {
  from: ConceptUpdateOneRequiredWithoutLinksFromConceptInput
  official: Boolean
  frozen: Boolean
  weight: Int
  count: Int
  text: String
  workspace: WorkspaceUpdateOneRequiredWithoutConceptLinksInput
  createdBy: UserUpdateOneRequiredInput
}

input ConceptLinkUpdateWithoutWorkspaceDataInput {
  from: ConceptUpdateOneRequiredWithoutLinksFromConceptInput
  to: ConceptUpdateOneRequiredWithoutLinksToConceptInput
  official: Boolean
  frozen: Boolean
  weight: Int
  count: Int
  text: String
  createdBy: UserUpdateOneRequiredInput
}

input ConceptLinkUpdateWithWhereUniqueWithoutFromInput {
  where: ConceptLinkWhereUniqueInput!
  data: ConceptLinkUpdateWithoutFromDataInput!
}

input ConceptLinkUpdateWithWhereUniqueWithoutToInput {
  where: ConceptLinkWhereUniqueInput!
  data: ConceptLinkUpdateWithoutToDataInput!
}

input ConceptLinkUpdateWithWhereUniqueWithoutWorkspaceInput {
  where: ConceptLinkWhereUniqueInput!
  data: ConceptLinkUpdateWithoutWorkspaceDataInput!
}

input ConceptLinkUpsertWithWhereUniqueWithoutFromInput {
  where: ConceptLinkWhereUniqueInput!
  update: ConceptLinkUpdateWithoutFromDataInput!
  create: ConceptLinkCreateWithoutFromInput!
}

input ConceptLinkUpsertWithWhereUniqueWithoutToInput {
  where: ConceptLinkWhereUniqueInput!
  update: ConceptLinkUpdateWithoutToDataInput!
  create: ConceptLinkCreateWithoutToInput!
}

input ConceptLinkUpsertWithWhereUniqueWithoutWorkspaceInput {
  where: ConceptLinkWhereUniqueInput!
  update: ConceptLinkUpdateWithoutWorkspaceDataInput!
  create: ConceptLinkCreateWithoutWorkspaceInput!
}

input ConceptLinkWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  from: ConceptWhereInput
  to: ConceptWhereInput
  official: Boolean
  official_not: Boolean
  frozen: Boolean
  frozen_not: Boolean
  weight: Int
  weight_not: Int
  weight_in: [Int!]
  weight_not_in: [Int!]
  weight_lt: Int
  weight_lte: Int
  weight_gt: Int
  weight_gte: Int
  count: Int
  count_not: Int
  count_in: [Int!]
  count_not_in: [Int!]
  count_lt: Int
  count_lte: Int
  count_gt: Int
  count_gte: Int
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  workspace: WorkspaceWhereInput
  createdBy: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ConceptLinkWhereInput!]
  OR: [ConceptLinkWhereInput!]
  NOT: [ConceptLinkWhereInput!]
}

input ConceptLinkWhereUniqueInput {
  id: ID
}

enum ConceptOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  level_ASC
  level_DESC
  position_ASC
  position_DESC
  official_ASC
  official_DESC
  frozen_ASC
  frozen_DESC
  count_ASC
  count_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ConceptPreviousValues {
  id: ID!
  name: String!
  description: String
  level: ConceptLevel!
  position: String
  official: Boolean!
  frozen: Boolean!
  count: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ConceptScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  level: ConceptLevel
  level_not: ConceptLevel
  level_in: [ConceptLevel!]
  level_not_in: [ConceptLevel!]
  position: String
  position_not: String
  position_in: [String!]
  position_not_in: [String!]
  position_lt: String
  position_lte: String
  position_gt: String
  position_gte: String
  position_contains: String
  position_not_contains: String
  position_starts_with: String
  position_not_starts_with: String
  position_ends_with: String
  position_not_ends_with: String
  official: Boolean
  official_not: Boolean
  frozen: Boolean
  frozen_not: Boolean
  count: Int
  count_not: Int
  count_in: [Int!]
  count_not_in: [Int!]
  count_lt: Int
  count_lte: Int
  count_gt: Int
  count_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ConceptScalarWhereInput!]
  OR: [ConceptScalarWhereInput!]
  NOT: [ConceptScalarWhereInput!]
}

type ConceptSubscriptionPayload {
  mutation: MutationType!
  node: Concept
  updatedFields: [String!]
  previousValues: ConceptPreviousValues
}

input ConceptSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ConceptWhereInput
  AND: [ConceptSubscriptionWhereInput!]
  OR: [ConceptSubscriptionWhereInput!]
  NOT: [ConceptSubscriptionWhereInput!]
}

input ConceptUpdateDataInput {
  name: String
  description: String
  level: ConceptLevel
  position: String
  official: Boolean
  frozen: Boolean
  tags: TagUpdateManyInput
  count: Int
  sourceConcept: ConceptUpdateOneWithoutClonesInput
  clones: ConceptUpdateManyWithoutSourceConceptInput
  sourceCommon: ConceptUpdateOneWithoutCommonClonesInput
  commonClones: ConceptUpdateManyWithoutSourceCommonInput
  linksFromConcept: ConceptLinkUpdateManyWithoutFromInput
  linksToConcept: ConceptLinkUpdateManyWithoutToInput
  goalLinks: GoalLinkUpdateManyWithoutGoalInput
  course: CourseUpdateOneWithoutConceptsInput
  workspace: WorkspaceUpdateOneRequiredWithoutConceptsInput
  createdBy: UserUpdateOneRequiredInput
}

input ConceptUpdateInput {
  name: String
  description: String
  level: ConceptLevel
  position: String
  official: Boolean
  frozen: Boolean
  tags: TagUpdateManyInput
  count: Int
  sourceConcept: ConceptUpdateOneWithoutClonesInput
  clones: ConceptUpdateManyWithoutSourceConceptInput
  sourceCommon: ConceptUpdateOneWithoutCommonClonesInput
  commonClones: ConceptUpdateManyWithoutSourceCommonInput
  linksFromConcept: ConceptLinkUpdateManyWithoutFromInput
  linksToConcept: ConceptLinkUpdateManyWithoutToInput
  goalLinks: GoalLinkUpdateManyWithoutGoalInput
  course: CourseUpdateOneWithoutConceptsInput
  workspace: WorkspaceUpdateOneRequiredWithoutConceptsInput
  createdBy: UserUpdateOneRequiredInput
}

input ConceptUpdateManyDataInput {
  name: String
  description: String
  level: ConceptLevel
  position: String
  official: Boolean
  frozen: Boolean
  count: Int
}

input ConceptUpdateManyInput {
  create: [ConceptCreateInput!]
  update: [ConceptUpdateWithWhereUniqueNestedInput!]
  upsert: [ConceptUpsertWithWhereUniqueNestedInput!]
  delete: [ConceptWhereUniqueInput!]
  connect: [ConceptWhereUniqueInput!]
  set: [ConceptWhereUniqueInput!]
  disconnect: [ConceptWhereUniqueInput!]
  deleteMany: [ConceptScalarWhereInput!]
  updateMany: [ConceptUpdateManyWithWhereNestedInput!]
}

input ConceptUpdateManyMutationInput {
  name: String
  description: String
  level: ConceptLevel
  position: String
  official: Boolean
  frozen: Boolean
  count: Int
}

input ConceptUpdateManyWithoutCourseInput {
  create: [ConceptCreateWithoutCourseInput!]
  delete: [ConceptWhereUniqueInput!]
  connect: [ConceptWhereUniqueInput!]
  set: [ConceptWhereUniqueInput!]
  disconnect: [ConceptWhereUniqueInput!]
  update: [ConceptUpdateWithWhereUniqueWithoutCourseInput!]
  upsert: [ConceptUpsertWithWhereUniqueWithoutCourseInput!]
  deleteMany: [ConceptScalarWhereInput!]
  updateMany: [ConceptUpdateManyWithWhereNestedInput!]
}

input ConceptUpdateManyWithoutSourceCommonInput {
  create: [ConceptCreateWithoutSourceCommonInput!]
  delete: [ConceptWhereUniqueInput!]
  connect: [ConceptWhereUniqueInput!]
  set: [ConceptWhereUniqueInput!]
  disconnect: [ConceptWhereUniqueInput!]
  update: [ConceptUpdateWithWhereUniqueWithoutSourceCommonInput!]
  upsert: [ConceptUpsertWithWhereUniqueWithoutSourceCommonInput!]
  deleteMany: [ConceptScalarWhereInput!]
  updateMany: [ConceptUpdateManyWithWhereNestedInput!]
}

input ConceptUpdateManyWithoutSourceConceptInput {
  create: [ConceptCreateWithoutSourceConceptInput!]
  delete: [ConceptWhereUniqueInput!]
  connect: [ConceptWhereUniqueInput!]
  set: [ConceptWhereUniqueInput!]
  disconnect: [ConceptWhereUniqueInput!]
  update: [ConceptUpdateWithWhereUniqueWithoutSourceConceptInput!]
  upsert: [ConceptUpsertWithWhereUniqueWithoutSourceConceptInput!]
  deleteMany: [ConceptScalarWhereInput!]
  updateMany: [ConceptUpdateManyWithWhereNestedInput!]
}

input ConceptUpdateManyWithoutWorkspaceInput {
  create: [ConceptCreateWithoutWorkspaceInput!]
  delete: [ConceptWhereUniqueInput!]
  connect: [ConceptWhereUniqueInput!]
  set: [ConceptWhereUniqueInput!]
  disconnect: [ConceptWhereUniqueInput!]
  update: [ConceptUpdateWithWhereUniqueWithoutWorkspaceInput!]
  upsert: [ConceptUpsertWithWhereUniqueWithoutWorkspaceInput!]
  deleteMany: [ConceptScalarWhereInput!]
  updateMany: [ConceptUpdateManyWithWhereNestedInput!]
}

input ConceptUpdateManyWithWhereNestedInput {
  where: ConceptScalarWhereInput!
  data: ConceptUpdateManyDataInput!
}

input ConceptUpdateOneRequiredInput {
  create: ConceptCreateInput
  update: ConceptUpdateDataInput
  upsert: ConceptUpsertNestedInput
  connect: ConceptWhereUniqueInput
}

input ConceptUpdateOneRequiredWithoutGoalLinksInput {
  create: ConceptCreateWithoutGoalLinksInput
  update: ConceptUpdateWithoutGoalLinksDataInput
  upsert: ConceptUpsertWithoutGoalLinksInput
  connect: ConceptWhereUniqueInput
}

input ConceptUpdateOneRequiredWithoutLinksFromConceptInput {
  create: ConceptCreateWithoutLinksFromConceptInput
  update: ConceptUpdateWithoutLinksFromConceptDataInput
  upsert: ConceptUpsertWithoutLinksFromConceptInput
  connect: ConceptWhereUniqueInput
}

input ConceptUpdateOneRequiredWithoutLinksToConceptInput {
  create: ConceptCreateWithoutLinksToConceptInput
  update: ConceptUpdateWithoutLinksToConceptDataInput
  upsert: ConceptUpsertWithoutLinksToConceptInput
  connect: ConceptWhereUniqueInput
}

input ConceptUpdateOneWithoutClonesInput {
  create: ConceptCreateWithoutClonesInput
  update: ConceptUpdateWithoutClonesDataInput
  upsert: ConceptUpsertWithoutClonesInput
  delete: Boolean
  disconnect: Boolean
  connect: ConceptWhereUniqueInput
}

input ConceptUpdateOneWithoutCommonClonesInput {
  create: ConceptCreateWithoutCommonClonesInput
  update: ConceptUpdateWithoutCommonClonesDataInput
  upsert: ConceptUpsertWithoutCommonClonesInput
  delete: Boolean
  disconnect: Boolean
  connect: ConceptWhereUniqueInput
}

input ConceptUpdateWithoutClonesDataInput {
  name: String
  description: String
  level: ConceptLevel
  position: String
  official: Boolean
  frozen: Boolean
  tags: TagUpdateManyInput
  count: Int
  sourceConcept: ConceptUpdateOneWithoutClonesInput
  sourceCommon: ConceptUpdateOneWithoutCommonClonesInput
  commonClones: ConceptUpdateManyWithoutSourceCommonInput
  linksFromConcept: ConceptLinkUpdateManyWithoutFromInput
  linksToConcept: ConceptLinkUpdateManyWithoutToInput
  goalLinks: GoalLinkUpdateManyWithoutGoalInput
  course: CourseUpdateOneWithoutConceptsInput
  workspace: WorkspaceUpdateOneRequiredWithoutConceptsInput
  createdBy: UserUpdateOneRequiredInput
}

input ConceptUpdateWithoutCommonClonesDataInput {
  name: String
  description: String
  level: ConceptLevel
  position: String
  official: Boolean
  frozen: Boolean
  tags: TagUpdateManyInput
  count: Int
  sourceConcept: ConceptUpdateOneWithoutClonesInput
  clones: ConceptUpdateManyWithoutSourceConceptInput
  sourceCommon: ConceptUpdateOneWithoutCommonClonesInput
  linksFromConcept: ConceptLinkUpdateManyWithoutFromInput
  linksToConcept: ConceptLinkUpdateManyWithoutToInput
  goalLinks: GoalLinkUpdateManyWithoutGoalInput
  course: CourseUpdateOneWithoutConceptsInput
  workspace: WorkspaceUpdateOneRequiredWithoutConceptsInput
  createdBy: UserUpdateOneRequiredInput
}

input ConceptUpdateWithoutCourseDataInput {
  name: String
  description: String
  level: ConceptLevel
  position: String
  official: Boolean
  frozen: Boolean
  tags: TagUpdateManyInput
  count: Int
  sourceConcept: ConceptUpdateOneWithoutClonesInput
  clones: ConceptUpdateManyWithoutSourceConceptInput
  sourceCommon: ConceptUpdateOneWithoutCommonClonesInput
  commonClones: ConceptUpdateManyWithoutSourceCommonInput
  linksFromConcept: ConceptLinkUpdateManyWithoutFromInput
  linksToConcept: ConceptLinkUpdateManyWithoutToInput
  goalLinks: GoalLinkUpdateManyWithoutGoalInput
  workspace: WorkspaceUpdateOneRequiredWithoutConceptsInput
  createdBy: UserUpdateOneRequiredInput
}

input ConceptUpdateWithoutGoalLinksDataInput {
  name: String
  description: String
  level: ConceptLevel
  position: String
  official: Boolean
  frozen: Boolean
  tags: TagUpdateManyInput
  count: Int
  sourceConcept: ConceptUpdateOneWithoutClonesInput
  clones: ConceptUpdateManyWithoutSourceConceptInput
  sourceCommon: ConceptUpdateOneWithoutCommonClonesInput
  commonClones: ConceptUpdateManyWithoutSourceCommonInput
  linksFromConcept: ConceptLinkUpdateManyWithoutFromInput
  linksToConcept: ConceptLinkUpdateManyWithoutToInput
  course: CourseUpdateOneWithoutConceptsInput
  workspace: WorkspaceUpdateOneRequiredWithoutConceptsInput
  createdBy: UserUpdateOneRequiredInput
}

input ConceptUpdateWithoutLinksFromConceptDataInput {
  name: String
  description: String
  level: ConceptLevel
  position: String
  official: Boolean
  frozen: Boolean
  tags: TagUpdateManyInput
  count: Int
  sourceConcept: ConceptUpdateOneWithoutClonesInput
  clones: ConceptUpdateManyWithoutSourceConceptInput
  sourceCommon: ConceptUpdateOneWithoutCommonClonesInput
  commonClones: ConceptUpdateManyWithoutSourceCommonInput
  linksToConcept: ConceptLinkUpdateManyWithoutToInput
  goalLinks: GoalLinkUpdateManyWithoutGoalInput
  course: CourseUpdateOneWithoutConceptsInput
  workspace: WorkspaceUpdateOneRequiredWithoutConceptsInput
  createdBy: UserUpdateOneRequiredInput
}

input ConceptUpdateWithoutLinksToConceptDataInput {
  name: String
  description: String
  level: ConceptLevel
  position: String
  official: Boolean
  frozen: Boolean
  tags: TagUpdateManyInput
  count: Int
  sourceConcept: ConceptUpdateOneWithoutClonesInput
  clones: ConceptUpdateManyWithoutSourceConceptInput
  sourceCommon: ConceptUpdateOneWithoutCommonClonesInput
  commonClones: ConceptUpdateManyWithoutSourceCommonInput
  linksFromConcept: ConceptLinkUpdateManyWithoutFromInput
  goalLinks: GoalLinkUpdateManyWithoutGoalInput
  course: CourseUpdateOneWithoutConceptsInput
  workspace: WorkspaceUpdateOneRequiredWithoutConceptsInput
  createdBy: UserUpdateOneRequiredInput
}

input ConceptUpdateWithoutSourceCommonDataInput {
  name: String
  description: String
  level: ConceptLevel
  position: String
  official: Boolean
  frozen: Boolean
  tags: TagUpdateManyInput
  count: Int
  sourceConcept: ConceptUpdateOneWithoutClonesInput
  clones: ConceptUpdateManyWithoutSourceConceptInput
  commonClones: ConceptUpdateManyWithoutSourceCommonInput
  linksFromConcept: ConceptLinkUpdateManyWithoutFromInput
  linksToConcept: ConceptLinkUpdateManyWithoutToInput
  goalLinks: GoalLinkUpdateManyWithoutGoalInput
  course: CourseUpdateOneWithoutConceptsInput
  workspace: WorkspaceUpdateOneRequiredWithoutConceptsInput
  createdBy: UserUpdateOneRequiredInput
}

input ConceptUpdateWithoutSourceConceptDataInput {
  name: String
  description: String
  level: ConceptLevel
  position: String
  official: Boolean
  frozen: Boolean
  tags: TagUpdateManyInput
  count: Int
  clones: ConceptUpdateManyWithoutSourceConceptInput
  sourceCommon: ConceptUpdateOneWithoutCommonClonesInput
  commonClones: ConceptUpdateManyWithoutSourceCommonInput
  linksFromConcept: ConceptLinkUpdateManyWithoutFromInput
  linksToConcept: ConceptLinkUpdateManyWithoutToInput
  goalLinks: GoalLinkUpdateManyWithoutGoalInput
  course: CourseUpdateOneWithoutConceptsInput
  workspace: WorkspaceUpdateOneRequiredWithoutConceptsInput
  createdBy: UserUpdateOneRequiredInput
}

input ConceptUpdateWithoutWorkspaceDataInput {
  name: String
  description: String
  level: ConceptLevel
  position: String
  official: Boolean
  frozen: Boolean
  tags: TagUpdateManyInput
  count: Int
  sourceConcept: ConceptUpdateOneWithoutClonesInput
  clones: ConceptUpdateManyWithoutSourceConceptInput
  sourceCommon: ConceptUpdateOneWithoutCommonClonesInput
  commonClones: ConceptUpdateManyWithoutSourceCommonInput
  linksFromConcept: ConceptLinkUpdateManyWithoutFromInput
  linksToConcept: ConceptLinkUpdateManyWithoutToInput
  goalLinks: GoalLinkUpdateManyWithoutGoalInput
  course: CourseUpdateOneWithoutConceptsInput
  createdBy: UserUpdateOneRequiredInput
}

input ConceptUpdateWithWhereUniqueNestedInput {
  where: ConceptWhereUniqueInput!
  data: ConceptUpdateDataInput!
}

input ConceptUpdateWithWhereUniqueWithoutCourseInput {
  where: ConceptWhereUniqueInput!
  data: ConceptUpdateWithoutCourseDataInput!
}

input ConceptUpdateWithWhereUniqueWithoutSourceCommonInput {
  where: ConceptWhereUniqueInput!
  data: ConceptUpdateWithoutSourceCommonDataInput!
}

input ConceptUpdateWithWhereUniqueWithoutSourceConceptInput {
  where: ConceptWhereUniqueInput!
  data: ConceptUpdateWithoutSourceConceptDataInput!
}

input ConceptUpdateWithWhereUniqueWithoutWorkspaceInput {
  where: ConceptWhereUniqueInput!
  data: ConceptUpdateWithoutWorkspaceDataInput!
}

input ConceptUpsertNestedInput {
  update: ConceptUpdateDataInput!
  create: ConceptCreateInput!
}

input ConceptUpsertWithoutClonesInput {
  update: ConceptUpdateWithoutClonesDataInput!
  create: ConceptCreateWithoutClonesInput!
}

input ConceptUpsertWithoutCommonClonesInput {
  update: ConceptUpdateWithoutCommonClonesDataInput!
  create: ConceptCreateWithoutCommonClonesInput!
}

input ConceptUpsertWithoutGoalLinksInput {
  update: ConceptUpdateWithoutGoalLinksDataInput!
  create: ConceptCreateWithoutGoalLinksInput!
}

input ConceptUpsertWithoutLinksFromConceptInput {
  update: ConceptUpdateWithoutLinksFromConceptDataInput!
  create: ConceptCreateWithoutLinksFromConceptInput!
}

input ConceptUpsertWithoutLinksToConceptInput {
  update: ConceptUpdateWithoutLinksToConceptDataInput!
  create: ConceptCreateWithoutLinksToConceptInput!
}

input ConceptUpsertWithWhereUniqueNestedInput {
  where: ConceptWhereUniqueInput!
  update: ConceptUpdateDataInput!
  create: ConceptCreateInput!
}

input ConceptUpsertWithWhereUniqueWithoutCourseInput {
  where: ConceptWhereUniqueInput!
  update: ConceptUpdateWithoutCourseDataInput!
  create: ConceptCreateWithoutCourseInput!
}

input ConceptUpsertWithWhereUniqueWithoutSourceCommonInput {
  where: ConceptWhereUniqueInput!
  update: ConceptUpdateWithoutSourceCommonDataInput!
  create: ConceptCreateWithoutSourceCommonInput!
}

input ConceptUpsertWithWhereUniqueWithoutSourceConceptInput {
  where: ConceptWhereUniqueInput!
  update: ConceptUpdateWithoutSourceConceptDataInput!
  create: ConceptCreateWithoutSourceConceptInput!
}

input ConceptUpsertWithWhereUniqueWithoutWorkspaceInput {
  where: ConceptWhereUniqueInput!
  update: ConceptUpdateWithoutWorkspaceDataInput!
  create: ConceptCreateWithoutWorkspaceInput!
}

input ConceptWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  level: ConceptLevel
  level_not: ConceptLevel
  level_in: [ConceptLevel!]
  level_not_in: [ConceptLevel!]
  position: String
  position_not: String
  position_in: [String!]
  position_not_in: [String!]
  position_lt: String
  position_lte: String
  position_gt: String
  position_gte: String
  position_contains: String
  position_not_contains: String
  position_starts_with: String
  position_not_starts_with: String
  position_ends_with: String
  position_not_ends_with: String
  official: Boolean
  official_not: Boolean
  frozen: Boolean
  frozen_not: Boolean
  tags_every: TagWhereInput
  tags_some: TagWhereInput
  tags_none: TagWhereInput
  count: Int
  count_not: Int
  count_in: [Int!]
  count_not_in: [Int!]
  count_lt: Int
  count_lte: Int
  count_gt: Int
  count_gte: Int
  sourceConcept: ConceptWhereInput
  clones_every: ConceptWhereInput
  clones_some: ConceptWhereInput
  clones_none: ConceptWhereInput
  sourceCommon: ConceptWhereInput
  commonClones_every: ConceptWhereInput
  commonClones_some: ConceptWhereInput
  commonClones_none: ConceptWhereInput
  linksFromConcept_every: ConceptLinkWhereInput
  linksFromConcept_some: ConceptLinkWhereInput
  linksFromConcept_none: ConceptLinkWhereInput
  linksToConcept_every: ConceptLinkWhereInput
  linksToConcept_some: ConceptLinkWhereInput
  linksToConcept_none: ConceptLinkWhereInput
  goalLinks_every: GoalLinkWhereInput
  goalLinks_some: GoalLinkWhereInput
  goalLinks_none: GoalLinkWhereInput
  course: CourseWhereInput
  workspace: WorkspaceWhereInput
  createdBy: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ConceptWhereInput!]
  OR: [ConceptWhereInput!]
  NOT: [ConceptWhereInput!]
}

input ConceptWhereUniqueInput {
  id: ID
}

type Course {
  id: ID!
  name: String!
  description: String!
  official: Boolean!
  frozen: Boolean!
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
  sourceCourse: Course
  clones(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course!]
  linksFromCourse(where: CourseLinkWhereInput, orderBy: CourseLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CourseLink!]
  linksToCourse(where: CourseLinkWhereInput, orderBy: CourseLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CourseLink!]
  workspace: Workspace!
  concepts(where: ConceptWhereInput, orderBy: ConceptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Concept!]
  conceptOrder: [ID!]!
  objectiveOrder: [ID!]!
  createdBy: User!
  createdAt: DateTime!
  updatedAt: DateTime!
  goalLinks(where: GoalLinkWhereInput, orderBy: GoalLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GoalLink!]
  objectiveLinks(where: ObjectiveLinkWhereInput, orderBy: ObjectiveLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ObjectiveLink!]
}

type CourseConnection {
  pageInfo: PageInfo!
  edges: [CourseEdge]!
  aggregate: AggregateCourse!
}

input CourseCreateconceptOrderInput {
  set: [ID!]
}

input CourseCreateInput {
  id: ID
  name: String!
  description: String!
  official: Boolean
  frozen: Boolean
  tags: TagCreateManyInput
  sourceCourse: CourseCreateOneWithoutClonesInput
  clones: CourseCreateManyWithoutSourceCourseInput
  linksFromCourse: CourseLinkCreateManyWithoutFromInput
  linksToCourse: CourseLinkCreateManyWithoutToInput
  workspace: WorkspaceCreateOneWithoutCoursesInput!
  concepts: ConceptCreateManyWithoutCourseInput
  conceptOrder: CourseCreateconceptOrderInput
  objectiveOrder: CourseCreateobjectiveOrderInput
  createdBy: UserCreateOneInput!
  goalLinks: GoalLinkCreateManyWithoutCourseInput
  objectiveLinks: ObjectiveLinkCreateManyWithoutCourseInput
}

input CourseCreateManyWithoutSourceCourseInput {
  create: [CourseCreateWithoutSourceCourseInput!]
  connect: [CourseWhereUniqueInput!]
}

input CourseCreateManyWithoutWorkspaceInput {
  create: [CourseCreateWithoutWorkspaceInput!]
  connect: [CourseWhereUniqueInput!]
}

input CourseCreateobjectiveOrderInput {
  set: [ID!]
}

input CourseCreateOneInput {
  create: CourseCreateInput
  connect: CourseWhereUniqueInput
}

input CourseCreateOneWithoutClonesInput {
  create: CourseCreateWithoutClonesInput
  connect: CourseWhereUniqueInput
}

input CourseCreateOneWithoutConceptsInput {
  create: CourseCreateWithoutConceptsInput
  connect: CourseWhereUniqueInput
}

input CourseCreateOneWithoutGoalLinksInput {
  create: CourseCreateWithoutGoalLinksInput
  connect: CourseWhereUniqueInput
}

input CourseCreateOneWithoutLinksFromCourseInput {
  create: CourseCreateWithoutLinksFromCourseInput
  connect: CourseWhereUniqueInput
}

input CourseCreateOneWithoutLinksToCourseInput {
  create: CourseCreateWithoutLinksToCourseInput
  connect: CourseWhereUniqueInput
}

input CourseCreateOneWithoutObjectiveLinksInput {
  create: CourseCreateWithoutObjectiveLinksInput
  connect: CourseWhereUniqueInput
}

input CourseCreateWithoutClonesInput {
  id: ID
  name: String!
  description: String!
  official: Boolean
  frozen: Boolean
  tags: TagCreateManyInput
  sourceCourse: CourseCreateOneWithoutClonesInput
  linksFromCourse: CourseLinkCreateManyWithoutFromInput
  linksToCourse: CourseLinkCreateManyWithoutToInput
  workspace: WorkspaceCreateOneWithoutCoursesInput!
  concepts: ConceptCreateManyWithoutCourseInput
  conceptOrder: CourseCreateconceptOrderInput
  objectiveOrder: CourseCreateobjectiveOrderInput
  createdBy: UserCreateOneInput!
  goalLinks: GoalLinkCreateManyWithoutCourseInput
  objectiveLinks: ObjectiveLinkCreateManyWithoutCourseInput
}

input CourseCreateWithoutConceptsInput {
  id: ID
  name: String!
  description: String!
  official: Boolean
  frozen: Boolean
  tags: TagCreateManyInput
  sourceCourse: CourseCreateOneWithoutClonesInput
  clones: CourseCreateManyWithoutSourceCourseInput
  linksFromCourse: CourseLinkCreateManyWithoutFromInput
  linksToCourse: CourseLinkCreateManyWithoutToInput
  workspace: WorkspaceCreateOneWithoutCoursesInput!
  conceptOrder: CourseCreateconceptOrderInput
  objectiveOrder: CourseCreateobjectiveOrderInput
  createdBy: UserCreateOneInput!
  goalLinks: GoalLinkCreateManyWithoutCourseInput
  objectiveLinks: ObjectiveLinkCreateManyWithoutCourseInput
}

input CourseCreateWithoutGoalLinksInput {
  id: ID
  name: String!
  description: String!
  official: Boolean
  frozen: Boolean
  tags: TagCreateManyInput
  sourceCourse: CourseCreateOneWithoutClonesInput
  clones: CourseCreateManyWithoutSourceCourseInput
  linksFromCourse: CourseLinkCreateManyWithoutFromInput
  linksToCourse: CourseLinkCreateManyWithoutToInput
  workspace: WorkspaceCreateOneWithoutCoursesInput!
  concepts: ConceptCreateManyWithoutCourseInput
  conceptOrder: CourseCreateconceptOrderInput
  objectiveOrder: CourseCreateobjectiveOrderInput
  createdBy: UserCreateOneInput!
  objectiveLinks: ObjectiveLinkCreateManyWithoutCourseInput
}

input CourseCreateWithoutLinksFromCourseInput {
  id: ID
  name: String!
  description: String!
  official: Boolean
  frozen: Boolean
  tags: TagCreateManyInput
  sourceCourse: CourseCreateOneWithoutClonesInput
  clones: CourseCreateManyWithoutSourceCourseInput
  linksToCourse: CourseLinkCreateManyWithoutToInput
  workspace: WorkspaceCreateOneWithoutCoursesInput!
  concepts: ConceptCreateManyWithoutCourseInput
  conceptOrder: CourseCreateconceptOrderInput
  objectiveOrder: CourseCreateobjectiveOrderInput
  createdBy: UserCreateOneInput!
  goalLinks: GoalLinkCreateManyWithoutCourseInput
  objectiveLinks: ObjectiveLinkCreateManyWithoutCourseInput
}

input CourseCreateWithoutLinksToCourseInput {
  id: ID
  name: String!
  description: String!
  official: Boolean
  frozen: Boolean
  tags: TagCreateManyInput
  sourceCourse: CourseCreateOneWithoutClonesInput
  clones: CourseCreateManyWithoutSourceCourseInput
  linksFromCourse: CourseLinkCreateManyWithoutFromInput
  workspace: WorkspaceCreateOneWithoutCoursesInput!
  concepts: ConceptCreateManyWithoutCourseInput
  conceptOrder: CourseCreateconceptOrderInput
  objectiveOrder: CourseCreateobjectiveOrderInput
  createdBy: UserCreateOneInput!
  goalLinks: GoalLinkCreateManyWithoutCourseInput
  objectiveLinks: ObjectiveLinkCreateManyWithoutCourseInput
}

input CourseCreateWithoutObjectiveLinksInput {
  id: ID
  name: String!
  description: String!
  official: Boolean
  frozen: Boolean
  tags: TagCreateManyInput
  sourceCourse: CourseCreateOneWithoutClonesInput
  clones: CourseCreateManyWithoutSourceCourseInput
  linksFromCourse: CourseLinkCreateManyWithoutFromInput
  linksToCourse: CourseLinkCreateManyWithoutToInput
  workspace: WorkspaceCreateOneWithoutCoursesInput!
  concepts: ConceptCreateManyWithoutCourseInput
  conceptOrder: CourseCreateconceptOrderInput
  objectiveOrder: CourseCreateobjectiveOrderInput
  createdBy: UserCreateOneInput!
  goalLinks: GoalLinkCreateManyWithoutCourseInput
}

input CourseCreateWithoutSourceCourseInput {
  id: ID
  name: String!
  description: String!
  official: Boolean
  frozen: Boolean
  tags: TagCreateManyInput
  clones: CourseCreateManyWithoutSourceCourseInput
  linksFromCourse: CourseLinkCreateManyWithoutFromInput
  linksToCourse: CourseLinkCreateManyWithoutToInput
  workspace: WorkspaceCreateOneWithoutCoursesInput!
  concepts: ConceptCreateManyWithoutCourseInput
  conceptOrder: CourseCreateconceptOrderInput
  objectiveOrder: CourseCreateobjectiveOrderInput
  createdBy: UserCreateOneInput!
  goalLinks: GoalLinkCreateManyWithoutCourseInput
  objectiveLinks: ObjectiveLinkCreateManyWithoutCourseInput
}

input CourseCreateWithoutWorkspaceInput {
  id: ID
  name: String!
  description: String!
  official: Boolean
  frozen: Boolean
  tags: TagCreateManyInput
  sourceCourse: CourseCreateOneWithoutClonesInput
  clones: CourseCreateManyWithoutSourceCourseInput
  linksFromCourse: CourseLinkCreateManyWithoutFromInput
  linksToCourse: CourseLinkCreateManyWithoutToInput
  concepts: ConceptCreateManyWithoutCourseInput
  conceptOrder: CourseCreateconceptOrderInput
  objectiveOrder: CourseCreateobjectiveOrderInput
  createdBy: UserCreateOneInput!
  goalLinks: GoalLinkCreateManyWithoutCourseInput
  objectiveLinks: ObjectiveLinkCreateManyWithoutCourseInput
}

type CourseEdge {
  node: Course!
  cursor: String!
}

type CourseLink {
  id: ID!
  from: Course!
  to: Course!
  official: Boolean!
  frozen: Boolean!
  weight: Int!
  count: Int!
  text: String
  workspace: Workspace!
  createdBy: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CourseLinkConnection {
  pageInfo: PageInfo!
  edges: [CourseLinkEdge]!
  aggregate: AggregateCourseLink!
}

input CourseLinkCreateInput {
  id: ID
  from: CourseCreateOneWithoutLinksFromCourseInput!
  to: CourseCreateOneWithoutLinksToCourseInput!
  official: Boolean
  frozen: Boolean
  weight: Int
  count: Int
  text: String
  workspace: WorkspaceCreateOneWithoutCourseLinksInput!
  createdBy: UserCreateOneInput!
}

input CourseLinkCreateManyWithoutFromInput {
  create: [CourseLinkCreateWithoutFromInput!]
  connect: [CourseLinkWhereUniqueInput!]
}

input CourseLinkCreateManyWithoutToInput {
  create: [CourseLinkCreateWithoutToInput!]
  connect: [CourseLinkWhereUniqueInput!]
}

input CourseLinkCreateManyWithoutWorkspaceInput {
  create: [CourseLinkCreateWithoutWorkspaceInput!]
  connect: [CourseLinkWhereUniqueInput!]
}

input CourseLinkCreateWithoutFromInput {
  id: ID
  to: CourseCreateOneWithoutLinksToCourseInput!
  official: Boolean
  frozen: Boolean
  weight: Int
  count: Int
  text: String
  workspace: WorkspaceCreateOneWithoutCourseLinksInput!
  createdBy: UserCreateOneInput!
}

input CourseLinkCreateWithoutToInput {
  id: ID
  from: CourseCreateOneWithoutLinksFromCourseInput!
  official: Boolean
  frozen: Boolean
  weight: Int
  count: Int
  text: String
  workspace: WorkspaceCreateOneWithoutCourseLinksInput!
  createdBy: UserCreateOneInput!
}

input CourseLinkCreateWithoutWorkspaceInput {
  id: ID
  from: CourseCreateOneWithoutLinksFromCourseInput!
  to: CourseCreateOneWithoutLinksToCourseInput!
  official: Boolean
  frozen: Boolean
  weight: Int
  count: Int
  text: String
  createdBy: UserCreateOneInput!
}

type CourseLinkEdge {
  node: CourseLink!
  cursor: String!
}

enum CourseLinkOrderByInput {
  id_ASC
  id_DESC
  official_ASC
  official_DESC
  frozen_ASC
  frozen_DESC
  weight_ASC
  weight_DESC
  count_ASC
  count_DESC
  text_ASC
  text_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CourseLinkPreviousValues {
  id: ID!
  official: Boolean!
  frozen: Boolean!
  weight: Int!
  count: Int!
  text: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CourseLinkScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  official: Boolean
  official_not: Boolean
  frozen: Boolean
  frozen_not: Boolean
  weight: Int
  weight_not: Int
  weight_in: [Int!]
  weight_not_in: [Int!]
  weight_lt: Int
  weight_lte: Int
  weight_gt: Int
  weight_gte: Int
  count: Int
  count_not: Int
  count_in: [Int!]
  count_not_in: [Int!]
  count_lt: Int
  count_lte: Int
  count_gt: Int
  count_gte: Int
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CourseLinkScalarWhereInput!]
  OR: [CourseLinkScalarWhereInput!]
  NOT: [CourseLinkScalarWhereInput!]
}

type CourseLinkSubscriptionPayload {
  mutation: MutationType!
  node: CourseLink
  updatedFields: [String!]
  previousValues: CourseLinkPreviousValues
}

input CourseLinkSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CourseLinkWhereInput
  AND: [CourseLinkSubscriptionWhereInput!]
  OR: [CourseLinkSubscriptionWhereInput!]
  NOT: [CourseLinkSubscriptionWhereInput!]
}

input CourseLinkUpdateInput {
  from: CourseUpdateOneRequiredWithoutLinksFromCourseInput
  to: CourseUpdateOneRequiredWithoutLinksToCourseInput
  official: Boolean
  frozen: Boolean
  weight: Int
  count: Int
  text: String
  workspace: WorkspaceUpdateOneRequiredWithoutCourseLinksInput
  createdBy: UserUpdateOneRequiredInput
}

input CourseLinkUpdateManyDataInput {
  official: Boolean
  frozen: Boolean
  weight: Int
  count: Int
  text: String
}

input CourseLinkUpdateManyMutationInput {
  official: Boolean
  frozen: Boolean
  weight: Int
  count: Int
  text: String
}

input CourseLinkUpdateManyWithoutFromInput {
  create: [CourseLinkCreateWithoutFromInput!]
  delete: [CourseLinkWhereUniqueInput!]
  connect: [CourseLinkWhereUniqueInput!]
  set: [CourseLinkWhereUniqueInput!]
  disconnect: [CourseLinkWhereUniqueInput!]
  update: [CourseLinkUpdateWithWhereUniqueWithoutFromInput!]
  upsert: [CourseLinkUpsertWithWhereUniqueWithoutFromInput!]
  deleteMany: [CourseLinkScalarWhereInput!]
  updateMany: [CourseLinkUpdateManyWithWhereNestedInput!]
}

input CourseLinkUpdateManyWithoutToInput {
  create: [CourseLinkCreateWithoutToInput!]
  delete: [CourseLinkWhereUniqueInput!]
  connect: [CourseLinkWhereUniqueInput!]
  set: [CourseLinkWhereUniqueInput!]
  disconnect: [CourseLinkWhereUniqueInput!]
  update: [CourseLinkUpdateWithWhereUniqueWithoutToInput!]
  upsert: [CourseLinkUpsertWithWhereUniqueWithoutToInput!]
  deleteMany: [CourseLinkScalarWhereInput!]
  updateMany: [CourseLinkUpdateManyWithWhereNestedInput!]
}

input CourseLinkUpdateManyWithoutWorkspaceInput {
  create: [CourseLinkCreateWithoutWorkspaceInput!]
  delete: [CourseLinkWhereUniqueInput!]
  connect: [CourseLinkWhereUniqueInput!]
  set: [CourseLinkWhereUniqueInput!]
  disconnect: [CourseLinkWhereUniqueInput!]
  update: [CourseLinkUpdateWithWhereUniqueWithoutWorkspaceInput!]
  upsert: [CourseLinkUpsertWithWhereUniqueWithoutWorkspaceInput!]
  deleteMany: [CourseLinkScalarWhereInput!]
  updateMany: [CourseLinkUpdateManyWithWhereNestedInput!]
}

input CourseLinkUpdateManyWithWhereNestedInput {
  where: CourseLinkScalarWhereInput!
  data: CourseLinkUpdateManyDataInput!
}

input CourseLinkUpdateWithoutFromDataInput {
  to: CourseUpdateOneRequiredWithoutLinksToCourseInput
  official: Boolean
  frozen: Boolean
  weight: Int
  count: Int
  text: String
  workspace: WorkspaceUpdateOneRequiredWithoutCourseLinksInput
  createdBy: UserUpdateOneRequiredInput
}

input CourseLinkUpdateWithoutToDataInput {
  from: CourseUpdateOneRequiredWithoutLinksFromCourseInput
  official: Boolean
  frozen: Boolean
  weight: Int
  count: Int
  text: String
  workspace: WorkspaceUpdateOneRequiredWithoutCourseLinksInput
  createdBy: UserUpdateOneRequiredInput
}

input CourseLinkUpdateWithoutWorkspaceDataInput {
  from: CourseUpdateOneRequiredWithoutLinksFromCourseInput
  to: CourseUpdateOneRequiredWithoutLinksToCourseInput
  official: Boolean
  frozen: Boolean
  weight: Int
  count: Int
  text: String
  createdBy: UserUpdateOneRequiredInput
}

input CourseLinkUpdateWithWhereUniqueWithoutFromInput {
  where: CourseLinkWhereUniqueInput!
  data: CourseLinkUpdateWithoutFromDataInput!
}

input CourseLinkUpdateWithWhereUniqueWithoutToInput {
  where: CourseLinkWhereUniqueInput!
  data: CourseLinkUpdateWithoutToDataInput!
}

input CourseLinkUpdateWithWhereUniqueWithoutWorkspaceInput {
  where: CourseLinkWhereUniqueInput!
  data: CourseLinkUpdateWithoutWorkspaceDataInput!
}

input CourseLinkUpsertWithWhereUniqueWithoutFromInput {
  where: CourseLinkWhereUniqueInput!
  update: CourseLinkUpdateWithoutFromDataInput!
  create: CourseLinkCreateWithoutFromInput!
}

input CourseLinkUpsertWithWhereUniqueWithoutToInput {
  where: CourseLinkWhereUniqueInput!
  update: CourseLinkUpdateWithoutToDataInput!
  create: CourseLinkCreateWithoutToInput!
}

input CourseLinkUpsertWithWhereUniqueWithoutWorkspaceInput {
  where: CourseLinkWhereUniqueInput!
  update: CourseLinkUpdateWithoutWorkspaceDataInput!
  create: CourseLinkCreateWithoutWorkspaceInput!
}

input CourseLinkWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  from: CourseWhereInput
  to: CourseWhereInput
  official: Boolean
  official_not: Boolean
  frozen: Boolean
  frozen_not: Boolean
  weight: Int
  weight_not: Int
  weight_in: [Int!]
  weight_not_in: [Int!]
  weight_lt: Int
  weight_lte: Int
  weight_gt: Int
  weight_gte: Int
  count: Int
  count_not: Int
  count_in: [Int!]
  count_not_in: [Int!]
  count_lt: Int
  count_lte: Int
  count_gt: Int
  count_gte: Int
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  workspace: WorkspaceWhereInput
  createdBy: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CourseLinkWhereInput!]
  OR: [CourseLinkWhereInput!]
  NOT: [CourseLinkWhereInput!]
}

input CourseLinkWhereUniqueInput {
  id: ID
}

enum CourseOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  official_ASC
  official_DESC
  frozen_ASC
  frozen_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CoursePreviousValues {
  id: ID!
  name: String!
  description: String!
  official: Boolean!
  frozen: Boolean!
  conceptOrder: [ID!]!
  objectiveOrder: [ID!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CourseScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  official: Boolean
  official_not: Boolean
  frozen: Boolean
  frozen_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CourseScalarWhereInput!]
  OR: [CourseScalarWhereInput!]
  NOT: [CourseScalarWhereInput!]
}

type CourseSubscriptionPayload {
  mutation: MutationType!
  node: Course
  updatedFields: [String!]
  previousValues: CoursePreviousValues
}

input CourseSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CourseWhereInput
  AND: [CourseSubscriptionWhereInput!]
  OR: [CourseSubscriptionWhereInput!]
  NOT: [CourseSubscriptionWhereInput!]
}

input CourseUpdateconceptOrderInput {
  set: [ID!]
}

input CourseUpdateDataInput {
  name: String
  description: String
  official: Boolean
  frozen: Boolean
  tags: TagUpdateManyInput
  sourceCourse: CourseUpdateOneWithoutClonesInput
  clones: CourseUpdateManyWithoutSourceCourseInput
  linksFromCourse: CourseLinkUpdateManyWithoutFromInput
  linksToCourse: CourseLinkUpdateManyWithoutToInput
  workspace: WorkspaceUpdateOneRequiredWithoutCoursesInput
  concepts: ConceptUpdateManyWithoutCourseInput
  conceptOrder: CourseUpdateconceptOrderInput
  objectiveOrder: CourseUpdateobjectiveOrderInput
  createdBy: UserUpdateOneRequiredInput
  goalLinks: GoalLinkUpdateManyWithoutCourseInput
  objectiveLinks: ObjectiveLinkUpdateManyWithoutCourseInput
}

input CourseUpdateInput {
  name: String
  description: String
  official: Boolean
  frozen: Boolean
  tags: TagUpdateManyInput
  sourceCourse: CourseUpdateOneWithoutClonesInput
  clones: CourseUpdateManyWithoutSourceCourseInput
  linksFromCourse: CourseLinkUpdateManyWithoutFromInput
  linksToCourse: CourseLinkUpdateManyWithoutToInput
  workspace: WorkspaceUpdateOneRequiredWithoutCoursesInput
  concepts: ConceptUpdateManyWithoutCourseInput
  conceptOrder: CourseUpdateconceptOrderInput
  objectiveOrder: CourseUpdateobjectiveOrderInput
  createdBy: UserUpdateOneRequiredInput
  goalLinks: GoalLinkUpdateManyWithoutCourseInput
  objectiveLinks: ObjectiveLinkUpdateManyWithoutCourseInput
}

input CourseUpdateManyDataInput {
  name: String
  description: String
  official: Boolean
  frozen: Boolean
  conceptOrder: CourseUpdateconceptOrderInput
  objectiveOrder: CourseUpdateobjectiveOrderInput
}

input CourseUpdateManyMutationInput {
  name: String
  description: String
  official: Boolean
  frozen: Boolean
  conceptOrder: CourseUpdateconceptOrderInput
  objectiveOrder: CourseUpdateobjectiveOrderInput
}

input CourseUpdateManyWithoutSourceCourseInput {
  create: [CourseCreateWithoutSourceCourseInput!]
  delete: [CourseWhereUniqueInput!]
  connect: [CourseWhereUniqueInput!]
  set: [CourseWhereUniqueInput!]
  disconnect: [CourseWhereUniqueInput!]
  update: [CourseUpdateWithWhereUniqueWithoutSourceCourseInput!]
  upsert: [CourseUpsertWithWhereUniqueWithoutSourceCourseInput!]
  deleteMany: [CourseScalarWhereInput!]
  updateMany: [CourseUpdateManyWithWhereNestedInput!]
}

input CourseUpdateManyWithoutWorkspaceInput {
  create: [CourseCreateWithoutWorkspaceInput!]
  delete: [CourseWhereUniqueInput!]
  connect: [CourseWhereUniqueInput!]
  set: [CourseWhereUniqueInput!]
  disconnect: [CourseWhereUniqueInput!]
  update: [CourseUpdateWithWhereUniqueWithoutWorkspaceInput!]
  upsert: [CourseUpsertWithWhereUniqueWithoutWorkspaceInput!]
  deleteMany: [CourseScalarWhereInput!]
  updateMany: [CourseUpdateManyWithWhereNestedInput!]
}

input CourseUpdateManyWithWhereNestedInput {
  where: CourseScalarWhereInput!
  data: CourseUpdateManyDataInput!
}

input CourseUpdateobjectiveOrderInput {
  set: [ID!]
}

input CourseUpdateOneInput {
  create: CourseCreateInput
  update: CourseUpdateDataInput
  upsert: CourseUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CourseWhereUniqueInput
}

input CourseUpdateOneRequiredInput {
  create: CourseCreateInput
  update: CourseUpdateDataInput
  upsert: CourseUpsertNestedInput
  connect: CourseWhereUniqueInput
}

input CourseUpdateOneRequiredWithoutGoalLinksInput {
  create: CourseCreateWithoutGoalLinksInput
  update: CourseUpdateWithoutGoalLinksDataInput
  upsert: CourseUpsertWithoutGoalLinksInput
  connect: CourseWhereUniqueInput
}

input CourseUpdateOneRequiredWithoutLinksFromCourseInput {
  create: CourseCreateWithoutLinksFromCourseInput
  update: CourseUpdateWithoutLinksFromCourseDataInput
  upsert: CourseUpsertWithoutLinksFromCourseInput
  connect: CourseWhereUniqueInput
}

input CourseUpdateOneRequiredWithoutLinksToCourseInput {
  create: CourseCreateWithoutLinksToCourseInput
  update: CourseUpdateWithoutLinksToCourseDataInput
  upsert: CourseUpsertWithoutLinksToCourseInput
  connect: CourseWhereUniqueInput
}

input CourseUpdateOneRequiredWithoutObjectiveLinksInput {
  create: CourseCreateWithoutObjectiveLinksInput
  update: CourseUpdateWithoutObjectiveLinksDataInput
  upsert: CourseUpsertWithoutObjectiveLinksInput
  connect: CourseWhereUniqueInput
}

input CourseUpdateOneWithoutClonesInput {
  create: CourseCreateWithoutClonesInput
  update: CourseUpdateWithoutClonesDataInput
  upsert: CourseUpsertWithoutClonesInput
  delete: Boolean
  disconnect: Boolean
  connect: CourseWhereUniqueInput
}

input CourseUpdateOneWithoutConceptsInput {
  create: CourseCreateWithoutConceptsInput
  update: CourseUpdateWithoutConceptsDataInput
  upsert: CourseUpsertWithoutConceptsInput
  delete: Boolean
  disconnect: Boolean
  connect: CourseWhereUniqueInput
}

input CourseUpdateWithoutClonesDataInput {
  name: String
  description: String
  official: Boolean
  frozen: Boolean
  tags: TagUpdateManyInput
  sourceCourse: CourseUpdateOneWithoutClonesInput
  linksFromCourse: CourseLinkUpdateManyWithoutFromInput
  linksToCourse: CourseLinkUpdateManyWithoutToInput
  workspace: WorkspaceUpdateOneRequiredWithoutCoursesInput
  concepts: ConceptUpdateManyWithoutCourseInput
  conceptOrder: CourseUpdateconceptOrderInput
  objectiveOrder: CourseUpdateobjectiveOrderInput
  createdBy: UserUpdateOneRequiredInput
  goalLinks: GoalLinkUpdateManyWithoutCourseInput
  objectiveLinks: ObjectiveLinkUpdateManyWithoutCourseInput
}

input CourseUpdateWithoutConceptsDataInput {
  name: String
  description: String
  official: Boolean
  frozen: Boolean
  tags: TagUpdateManyInput
  sourceCourse: CourseUpdateOneWithoutClonesInput
  clones: CourseUpdateManyWithoutSourceCourseInput
  linksFromCourse: CourseLinkUpdateManyWithoutFromInput
  linksToCourse: CourseLinkUpdateManyWithoutToInput
  workspace: WorkspaceUpdateOneRequiredWithoutCoursesInput
  conceptOrder: CourseUpdateconceptOrderInput
  objectiveOrder: CourseUpdateobjectiveOrderInput
  createdBy: UserUpdateOneRequiredInput
  goalLinks: GoalLinkUpdateManyWithoutCourseInput
  objectiveLinks: ObjectiveLinkUpdateManyWithoutCourseInput
}

input CourseUpdateWithoutGoalLinksDataInput {
  name: String
  description: String
  official: Boolean
  frozen: Boolean
  tags: TagUpdateManyInput
  sourceCourse: CourseUpdateOneWithoutClonesInput
  clones: CourseUpdateManyWithoutSourceCourseInput
  linksFromCourse: CourseLinkUpdateManyWithoutFromInput
  linksToCourse: CourseLinkUpdateManyWithoutToInput
  workspace: WorkspaceUpdateOneRequiredWithoutCoursesInput
  concepts: ConceptUpdateManyWithoutCourseInput
  conceptOrder: CourseUpdateconceptOrderInput
  objectiveOrder: CourseUpdateobjectiveOrderInput
  createdBy: UserUpdateOneRequiredInput
  objectiveLinks: ObjectiveLinkUpdateManyWithoutCourseInput
}

input CourseUpdateWithoutLinksFromCourseDataInput {
  name: String
  description: String
  official: Boolean
  frozen: Boolean
  tags: TagUpdateManyInput
  sourceCourse: CourseUpdateOneWithoutClonesInput
  clones: CourseUpdateManyWithoutSourceCourseInput
  linksToCourse: CourseLinkUpdateManyWithoutToInput
  workspace: WorkspaceUpdateOneRequiredWithoutCoursesInput
  concepts: ConceptUpdateManyWithoutCourseInput
  conceptOrder: CourseUpdateconceptOrderInput
  objectiveOrder: CourseUpdateobjectiveOrderInput
  createdBy: UserUpdateOneRequiredInput
  goalLinks: GoalLinkUpdateManyWithoutCourseInput
  objectiveLinks: ObjectiveLinkUpdateManyWithoutCourseInput
}

input CourseUpdateWithoutLinksToCourseDataInput {
  name: String
  description: String
  official: Boolean
  frozen: Boolean
  tags: TagUpdateManyInput
  sourceCourse: CourseUpdateOneWithoutClonesInput
  clones: CourseUpdateManyWithoutSourceCourseInput
  linksFromCourse: CourseLinkUpdateManyWithoutFromInput
  workspace: WorkspaceUpdateOneRequiredWithoutCoursesInput
  concepts: ConceptUpdateManyWithoutCourseInput
  conceptOrder: CourseUpdateconceptOrderInput
  objectiveOrder: CourseUpdateobjectiveOrderInput
  createdBy: UserUpdateOneRequiredInput
  goalLinks: GoalLinkUpdateManyWithoutCourseInput
  objectiveLinks: ObjectiveLinkUpdateManyWithoutCourseInput
}

input CourseUpdateWithoutObjectiveLinksDataInput {
  name: String
  description: String
  official: Boolean
  frozen: Boolean
  tags: TagUpdateManyInput
  sourceCourse: CourseUpdateOneWithoutClonesInput
  clones: CourseUpdateManyWithoutSourceCourseInput
  linksFromCourse: CourseLinkUpdateManyWithoutFromInput
  linksToCourse: CourseLinkUpdateManyWithoutToInput
  workspace: WorkspaceUpdateOneRequiredWithoutCoursesInput
  concepts: ConceptUpdateManyWithoutCourseInput
  conceptOrder: CourseUpdateconceptOrderInput
  objectiveOrder: CourseUpdateobjectiveOrderInput
  createdBy: UserUpdateOneRequiredInput
  goalLinks: GoalLinkUpdateManyWithoutCourseInput
}

input CourseUpdateWithoutSourceCourseDataInput {
  name: String
  description: String
  official: Boolean
  frozen: Boolean
  tags: TagUpdateManyInput
  clones: CourseUpdateManyWithoutSourceCourseInput
  linksFromCourse: CourseLinkUpdateManyWithoutFromInput
  linksToCourse: CourseLinkUpdateManyWithoutToInput
  workspace: WorkspaceUpdateOneRequiredWithoutCoursesInput
  concepts: ConceptUpdateManyWithoutCourseInput
  conceptOrder: CourseUpdateconceptOrderInput
  objectiveOrder: CourseUpdateobjectiveOrderInput
  createdBy: UserUpdateOneRequiredInput
  goalLinks: GoalLinkUpdateManyWithoutCourseInput
  objectiveLinks: ObjectiveLinkUpdateManyWithoutCourseInput
}

input CourseUpdateWithoutWorkspaceDataInput {
  name: String
  description: String
  official: Boolean
  frozen: Boolean
  tags: TagUpdateManyInput
  sourceCourse: CourseUpdateOneWithoutClonesInput
  clones: CourseUpdateManyWithoutSourceCourseInput
  linksFromCourse: CourseLinkUpdateManyWithoutFromInput
  linksToCourse: CourseLinkUpdateManyWithoutToInput
  concepts: ConceptUpdateManyWithoutCourseInput
  conceptOrder: CourseUpdateconceptOrderInput
  objectiveOrder: CourseUpdateobjectiveOrderInput
  createdBy: UserUpdateOneRequiredInput
  goalLinks: GoalLinkUpdateManyWithoutCourseInput
  objectiveLinks: ObjectiveLinkUpdateManyWithoutCourseInput
}

input CourseUpdateWithWhereUniqueWithoutSourceCourseInput {
  where: CourseWhereUniqueInput!
  data: CourseUpdateWithoutSourceCourseDataInput!
}

input CourseUpdateWithWhereUniqueWithoutWorkspaceInput {
  where: CourseWhereUniqueInput!
  data: CourseUpdateWithoutWorkspaceDataInput!
}

input CourseUpsertNestedInput {
  update: CourseUpdateDataInput!
  create: CourseCreateInput!
}

input CourseUpsertWithoutClonesInput {
  update: CourseUpdateWithoutClonesDataInput!
  create: CourseCreateWithoutClonesInput!
}

input CourseUpsertWithoutConceptsInput {
  update: CourseUpdateWithoutConceptsDataInput!
  create: CourseCreateWithoutConceptsInput!
}

input CourseUpsertWithoutGoalLinksInput {
  update: CourseUpdateWithoutGoalLinksDataInput!
  create: CourseCreateWithoutGoalLinksInput!
}

input CourseUpsertWithoutLinksFromCourseInput {
  update: CourseUpdateWithoutLinksFromCourseDataInput!
  create: CourseCreateWithoutLinksFromCourseInput!
}

input CourseUpsertWithoutLinksToCourseInput {
  update: CourseUpdateWithoutLinksToCourseDataInput!
  create: CourseCreateWithoutLinksToCourseInput!
}

input CourseUpsertWithoutObjectiveLinksInput {
  update: CourseUpdateWithoutObjectiveLinksDataInput!
  create: CourseCreateWithoutObjectiveLinksInput!
}

input CourseUpsertWithWhereUniqueWithoutSourceCourseInput {
  where: CourseWhereUniqueInput!
  update: CourseUpdateWithoutSourceCourseDataInput!
  create: CourseCreateWithoutSourceCourseInput!
}

input CourseUpsertWithWhereUniqueWithoutWorkspaceInput {
  where: CourseWhereUniqueInput!
  update: CourseUpdateWithoutWorkspaceDataInput!
  create: CourseCreateWithoutWorkspaceInput!
}

input CourseWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  official: Boolean
  official_not: Boolean
  frozen: Boolean
  frozen_not: Boolean
  tags_every: TagWhereInput
  tags_some: TagWhereInput
  tags_none: TagWhereInput
  sourceCourse: CourseWhereInput
  clones_every: CourseWhereInput
  clones_some: CourseWhereInput
  clones_none: CourseWhereInput
  linksFromCourse_every: CourseLinkWhereInput
  linksFromCourse_some: CourseLinkWhereInput
  linksFromCourse_none: CourseLinkWhereInput
  linksToCourse_every: CourseLinkWhereInput
  linksToCourse_some: CourseLinkWhereInput
  linksToCourse_none: CourseLinkWhereInput
  workspace: WorkspaceWhereInput
  concepts_every: ConceptWhereInput
  concepts_some: ConceptWhereInput
  concepts_none: ConceptWhereInput
  createdBy: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  goalLinks_every: GoalLinkWhereInput
  goalLinks_some: GoalLinkWhereInput
  goalLinks_none: GoalLinkWhereInput
  objectiveLinks_every: ObjectiveLinkWhereInput
  objectiveLinks_some: ObjectiveLinkWhereInput
  objectiveLinks_none: ObjectiveLinkWhereInput
  AND: [CourseWhereInput!]
  OR: [CourseWhereInput!]
  NOT: [CourseWhereInput!]
}

input CourseWhereUniqueInput {
  id: ID
}

scalar DateTime

type GoalLink {
  id: ID!
  course: Course!
  goal: Concept!
  workspace: Workspace!
  weight: Int!
  text: String
  createdBy: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type GoalLinkConnection {
  pageInfo: PageInfo!
  edges: [GoalLinkEdge]!
  aggregate: AggregateGoalLink!
}

input GoalLinkCreateInput {
  id: ID
  course: CourseCreateOneWithoutGoalLinksInput!
  goal: ConceptCreateOneWithoutGoalLinksInput!
  workspace: WorkspaceCreateOneWithoutGoalLinksInput!
  weight: Int
  text: String
  createdBy: UserCreateOneInput!
}

input GoalLinkCreateManyWithoutCourseInput {
  create: [GoalLinkCreateWithoutCourseInput!]
  connect: [GoalLinkWhereUniqueInput!]
}

input GoalLinkCreateManyWithoutGoalInput {
  create: [GoalLinkCreateWithoutGoalInput!]
  connect: [GoalLinkWhereUniqueInput!]
}

input GoalLinkCreateManyWithoutWorkspaceInput {
  create: [GoalLinkCreateWithoutWorkspaceInput!]
  connect: [GoalLinkWhereUniqueInput!]
}

input GoalLinkCreateWithoutCourseInput {
  id: ID
  goal: ConceptCreateOneWithoutGoalLinksInput!
  workspace: WorkspaceCreateOneWithoutGoalLinksInput!
  weight: Int
  text: String
  createdBy: UserCreateOneInput!
}

input GoalLinkCreateWithoutGoalInput {
  id: ID
  course: CourseCreateOneWithoutGoalLinksInput!
  workspace: WorkspaceCreateOneWithoutGoalLinksInput!
  weight: Int
  text: String
  createdBy: UserCreateOneInput!
}

input GoalLinkCreateWithoutWorkspaceInput {
  id: ID
  course: CourseCreateOneWithoutGoalLinksInput!
  goal: ConceptCreateOneWithoutGoalLinksInput!
  weight: Int
  text: String
  createdBy: UserCreateOneInput!
}

type GoalLinkEdge {
  node: GoalLink!
  cursor: String!
}

enum GoalLinkOrderByInput {
  id_ASC
  id_DESC
  weight_ASC
  weight_DESC
  text_ASC
  text_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type GoalLinkPreviousValues {
  id: ID!
  weight: Int!
  text: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input GoalLinkScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  weight: Int
  weight_not: Int
  weight_in: [Int!]
  weight_not_in: [Int!]
  weight_lt: Int
  weight_lte: Int
  weight_gt: Int
  weight_gte: Int
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [GoalLinkScalarWhereInput!]
  OR: [GoalLinkScalarWhereInput!]
  NOT: [GoalLinkScalarWhereInput!]
}

type GoalLinkSubscriptionPayload {
  mutation: MutationType!
  node: GoalLink
  updatedFields: [String!]
  previousValues: GoalLinkPreviousValues
}

input GoalLinkSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GoalLinkWhereInput
  AND: [GoalLinkSubscriptionWhereInput!]
  OR: [GoalLinkSubscriptionWhereInput!]
  NOT: [GoalLinkSubscriptionWhereInput!]
}

input GoalLinkUpdateInput {
  course: CourseUpdateOneRequiredWithoutGoalLinksInput
  goal: ConceptUpdateOneRequiredWithoutGoalLinksInput
  workspace: WorkspaceUpdateOneRequiredWithoutGoalLinksInput
  weight: Int
  text: String
  createdBy: UserUpdateOneRequiredInput
}

input GoalLinkUpdateManyDataInput {
  weight: Int
  text: String
}

input GoalLinkUpdateManyMutationInput {
  weight: Int
  text: String
}

input GoalLinkUpdateManyWithoutCourseInput {
  create: [GoalLinkCreateWithoutCourseInput!]
  delete: [GoalLinkWhereUniqueInput!]
  connect: [GoalLinkWhereUniqueInput!]
  set: [GoalLinkWhereUniqueInput!]
  disconnect: [GoalLinkWhereUniqueInput!]
  update: [GoalLinkUpdateWithWhereUniqueWithoutCourseInput!]
  upsert: [GoalLinkUpsertWithWhereUniqueWithoutCourseInput!]
  deleteMany: [GoalLinkScalarWhereInput!]
  updateMany: [GoalLinkUpdateManyWithWhereNestedInput!]
}

input GoalLinkUpdateManyWithoutGoalInput {
  create: [GoalLinkCreateWithoutGoalInput!]
  delete: [GoalLinkWhereUniqueInput!]
  connect: [GoalLinkWhereUniqueInput!]
  set: [GoalLinkWhereUniqueInput!]
  disconnect: [GoalLinkWhereUniqueInput!]
  update: [GoalLinkUpdateWithWhereUniqueWithoutGoalInput!]
  upsert: [GoalLinkUpsertWithWhereUniqueWithoutGoalInput!]
  deleteMany: [GoalLinkScalarWhereInput!]
  updateMany: [GoalLinkUpdateManyWithWhereNestedInput!]
}

input GoalLinkUpdateManyWithoutWorkspaceInput {
  create: [GoalLinkCreateWithoutWorkspaceInput!]
  delete: [GoalLinkWhereUniqueInput!]
  connect: [GoalLinkWhereUniqueInput!]
  set: [GoalLinkWhereUniqueInput!]
  disconnect: [GoalLinkWhereUniqueInput!]
  update: [GoalLinkUpdateWithWhereUniqueWithoutWorkspaceInput!]
  upsert: [GoalLinkUpsertWithWhereUniqueWithoutWorkspaceInput!]
  deleteMany: [GoalLinkScalarWhereInput!]
  updateMany: [GoalLinkUpdateManyWithWhereNestedInput!]
}

input GoalLinkUpdateManyWithWhereNestedInput {
  where: GoalLinkScalarWhereInput!
  data: GoalLinkUpdateManyDataInput!
}

input GoalLinkUpdateWithoutCourseDataInput {
  goal: ConceptUpdateOneRequiredWithoutGoalLinksInput
  workspace: WorkspaceUpdateOneRequiredWithoutGoalLinksInput
  weight: Int
  text: String
  createdBy: UserUpdateOneRequiredInput
}

input GoalLinkUpdateWithoutGoalDataInput {
  course: CourseUpdateOneRequiredWithoutGoalLinksInput
  workspace: WorkspaceUpdateOneRequiredWithoutGoalLinksInput
  weight: Int
  text: String
  createdBy: UserUpdateOneRequiredInput
}

input GoalLinkUpdateWithoutWorkspaceDataInput {
  course: CourseUpdateOneRequiredWithoutGoalLinksInput
  goal: ConceptUpdateOneRequiredWithoutGoalLinksInput
  weight: Int
  text: String
  createdBy: UserUpdateOneRequiredInput
}

input GoalLinkUpdateWithWhereUniqueWithoutCourseInput {
  where: GoalLinkWhereUniqueInput!
  data: GoalLinkUpdateWithoutCourseDataInput!
}

input GoalLinkUpdateWithWhereUniqueWithoutGoalInput {
  where: GoalLinkWhereUniqueInput!
  data: GoalLinkUpdateWithoutGoalDataInput!
}

input GoalLinkUpdateWithWhereUniqueWithoutWorkspaceInput {
  where: GoalLinkWhereUniqueInput!
  data: GoalLinkUpdateWithoutWorkspaceDataInput!
}

input GoalLinkUpsertWithWhereUniqueWithoutCourseInput {
  where: GoalLinkWhereUniqueInput!
  update: GoalLinkUpdateWithoutCourseDataInput!
  create: GoalLinkCreateWithoutCourseInput!
}

input GoalLinkUpsertWithWhereUniqueWithoutGoalInput {
  where: GoalLinkWhereUniqueInput!
  update: GoalLinkUpdateWithoutGoalDataInput!
  create: GoalLinkCreateWithoutGoalInput!
}

input GoalLinkUpsertWithWhereUniqueWithoutWorkspaceInput {
  where: GoalLinkWhereUniqueInput!
  update: GoalLinkUpdateWithoutWorkspaceDataInput!
  create: GoalLinkCreateWithoutWorkspaceInput!
}

input GoalLinkWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  course: CourseWhereInput
  goal: ConceptWhereInput
  workspace: WorkspaceWhereInput
  weight: Int
  weight_not: Int
  weight_in: [Int!]
  weight_not_in: [Int!]
  weight_lt: Int
  weight_lte: Int
  weight_gt: Int
  weight_gte: Int
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  createdBy: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [GoalLinkWhereInput!]
  OR: [GoalLinkWhereInput!]
  NOT: [GoalLinkWhereInput!]
}

input GoalLinkWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createAccessToken(data: AccessTokenCreateInput!): AccessToken!
  updateAccessToken(data: AccessTokenUpdateInput!, where: AccessTokenWhereUniqueInput!): AccessToken
  updateManyAccessTokens(data: AccessTokenUpdateManyMutationInput!, where: AccessTokenWhereInput): BatchPayload!
  upsertAccessToken(where: AccessTokenWhereUniqueInput!, create: AccessTokenCreateInput!, update: AccessTokenUpdateInput!): AccessToken!
  deleteAccessToken(where: AccessTokenWhereUniqueInput!): AccessToken
  deleteManyAccessTokens(where: AccessTokenWhereInput): BatchPayload!
  createCompletion(data: CompletionCreateInput!): Completion!
  updateCompletion(data: CompletionUpdateInput!, where: CompletionWhereUniqueInput!): Completion
  updateManyCompletions(data: CompletionUpdateManyMutationInput!, where: CompletionWhereInput): BatchPayload!
  upsertCompletion(where: CompletionWhereUniqueInput!, create: CompletionCreateInput!, update: CompletionUpdateInput!): Completion!
  deleteCompletion(where: CompletionWhereUniqueInput!): Completion
  deleteManyCompletions(where: CompletionWhereInput): BatchPayload!
  createConcept(data: ConceptCreateInput!): Concept!
  updateConcept(data: ConceptUpdateInput!, where: ConceptWhereUniqueInput!): Concept
  updateManyConcepts(data: ConceptUpdateManyMutationInput!, where: ConceptWhereInput): BatchPayload!
  upsertConcept(where: ConceptWhereUniqueInput!, create: ConceptCreateInput!, update: ConceptUpdateInput!): Concept!
  deleteConcept(where: ConceptWhereUniqueInput!): Concept
  deleteManyConcepts(where: ConceptWhereInput): BatchPayload!
  createConceptLink(data: ConceptLinkCreateInput!): ConceptLink!
  updateConceptLink(data: ConceptLinkUpdateInput!, where: ConceptLinkWhereUniqueInput!): ConceptLink
  updateManyConceptLinks(data: ConceptLinkUpdateManyMutationInput!, where: ConceptLinkWhereInput): BatchPayload!
  upsertConceptLink(where: ConceptLinkWhereUniqueInput!, create: ConceptLinkCreateInput!, update: ConceptLinkUpdateInput!): ConceptLink!
  deleteConceptLink(where: ConceptLinkWhereUniqueInput!): ConceptLink
  deleteManyConceptLinks(where: ConceptLinkWhereInput): BatchPayload!
  createCourse(data: CourseCreateInput!): Course!
  updateCourse(data: CourseUpdateInput!, where: CourseWhereUniqueInput!): Course
  updateManyCourses(data: CourseUpdateManyMutationInput!, where: CourseWhereInput): BatchPayload!
  upsertCourse(where: CourseWhereUniqueInput!, create: CourseCreateInput!, update: CourseUpdateInput!): Course!
  deleteCourse(where: CourseWhereUniqueInput!): Course
  deleteManyCourses(where: CourseWhereInput): BatchPayload!
  createCourseLink(data: CourseLinkCreateInput!): CourseLink!
  updateCourseLink(data: CourseLinkUpdateInput!, where: CourseLinkWhereUniqueInput!): CourseLink
  updateManyCourseLinks(data: CourseLinkUpdateManyMutationInput!, where: CourseLinkWhereInput): BatchPayload!
  upsertCourseLink(where: CourseLinkWhereUniqueInput!, create: CourseLinkCreateInput!, update: CourseLinkUpdateInput!): CourseLink!
  deleteCourseLink(where: CourseLinkWhereUniqueInput!): CourseLink
  deleteManyCourseLinks(where: CourseLinkWhereInput): BatchPayload!
  createGoalLink(data: GoalLinkCreateInput!): GoalLink!
  updateGoalLink(data: GoalLinkUpdateInput!, where: GoalLinkWhereUniqueInput!): GoalLink
  updateManyGoalLinks(data: GoalLinkUpdateManyMutationInput!, where: GoalLinkWhereInput): BatchPayload!
  upsertGoalLink(where: GoalLinkWhereUniqueInput!, create: GoalLinkCreateInput!, update: GoalLinkUpdateInput!): GoalLink!
  deleteGoalLink(where: GoalLinkWhereUniqueInput!): GoalLink
  deleteManyGoalLinks(where: GoalLinkWhereInput): BatchPayload!
  createObjectiveLink(data: ObjectiveLinkCreateInput!): ObjectiveLink!
  updateObjectiveLink(data: ObjectiveLinkUpdateInput!, where: ObjectiveLinkWhereUniqueInput!): ObjectiveLink
  updateManyObjectiveLinks(data: ObjectiveLinkUpdateManyMutationInput!, where: ObjectiveLinkWhereInput): BatchPayload!
  upsertObjectiveLink(where: ObjectiveLinkWhereUniqueInput!, create: ObjectiveLinkCreateInput!, update: ObjectiveLinkUpdateInput!): ObjectiveLink!
  deleteObjectiveLink(where: ObjectiveLinkWhereUniqueInput!): ObjectiveLink
  deleteManyObjectiveLinks(where: ObjectiveLinkWhereInput): BatchPayload!
  createPointGroup(data: PointGroupCreateInput!): PointGroup!
  updatePointGroup(data: PointGroupUpdateInput!, where: PointGroupWhereUniqueInput!): PointGroup
  updateManyPointGroups(data: PointGroupUpdateManyMutationInput!, where: PointGroupWhereInput): BatchPayload!
  upsertPointGroup(where: PointGroupWhereUniqueInput!, create: PointGroupCreateInput!, update: PointGroupUpdateInput!): PointGroup!
  deletePointGroup(where: PointGroupWhereUniqueInput!): PointGroup
  deleteManyPointGroups(where: PointGroupWhereInput): BatchPayload!
  createProject(data: ProjectCreateInput!): Project!
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateManyProjects(data: ProjectUpdateManyMutationInput!, where: ProjectWhereInput): BatchPayload!
  upsertProject(where: ProjectWhereUniqueInput!, create: ProjectCreateInput!, update: ProjectUpdateInput!): Project!
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteManyProjects(where: ProjectWhereInput): BatchPayload!
  createProjectParticipant(data: ProjectParticipantCreateInput!): ProjectParticipant!
  updateProjectParticipant(data: ProjectParticipantUpdateInput!, where: ProjectParticipantWhereUniqueInput!): ProjectParticipant
  updateManyProjectParticipants(data: ProjectParticipantUpdateManyMutationInput!, where: ProjectParticipantWhereInput): BatchPayload!
  upsertProjectParticipant(where: ProjectParticipantWhereUniqueInput!, create: ProjectParticipantCreateInput!, update: ProjectParticipantUpdateInput!): ProjectParticipant!
  deleteProjectParticipant(where: ProjectParticipantWhereUniqueInput!): ProjectParticipant
  deleteManyProjectParticipants(where: ProjectParticipantWhereInput): BatchPayload!
  createProjectToken(data: ProjectTokenCreateInput!): ProjectToken!
  updateProjectToken(data: ProjectTokenUpdateInput!, where: ProjectTokenWhereUniqueInput!): ProjectToken
  updateManyProjectTokens(data: ProjectTokenUpdateManyMutationInput!, where: ProjectTokenWhereInput): BatchPayload!
  upsertProjectToken(where: ProjectTokenWhereUniqueInput!, create: ProjectTokenCreateInput!, update: ProjectTokenUpdateInput!): ProjectToken!
  deleteProjectToken(where: ProjectTokenWhereUniqueInput!): ProjectToken
  deleteManyProjectTokens(where: ProjectTokenWhereInput): BatchPayload!
  createTag(data: TagCreateInput!): Tag!
  updateTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateManyTags(data: TagUpdateManyMutationInput!, where: TagWhereInput): BatchPayload!
  upsertTag(where: TagWhereUniqueInput!, create: TagCreateInput!, update: TagUpdateInput!): Tag!
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteManyTags(where: TagWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createWorkspace(data: WorkspaceCreateInput!): Workspace!
  updateWorkspace(data: WorkspaceUpdateInput!, where: WorkspaceWhereUniqueInput!): Workspace
  updateManyWorkspaces(data: WorkspaceUpdateManyMutationInput!, where: WorkspaceWhereInput): BatchPayload!
  upsertWorkspace(where: WorkspaceWhereUniqueInput!, create: WorkspaceCreateInput!, update: WorkspaceUpdateInput!): Workspace!
  deleteWorkspace(where: WorkspaceWhereUniqueInput!): Workspace
  deleteManyWorkspaces(where: WorkspaceWhereInput): BatchPayload!
  createWorkspaceParticipant(data: WorkspaceParticipantCreateInput!): WorkspaceParticipant!
  updateWorkspaceParticipant(data: WorkspaceParticipantUpdateInput!, where: WorkspaceParticipantWhereUniqueInput!): WorkspaceParticipant
  updateManyWorkspaceParticipants(data: WorkspaceParticipantUpdateManyMutationInput!, where: WorkspaceParticipantWhereInput): BatchPayload!
  upsertWorkspaceParticipant(where: WorkspaceParticipantWhereUniqueInput!, create: WorkspaceParticipantCreateInput!, update: WorkspaceParticipantUpdateInput!): WorkspaceParticipant!
  deleteWorkspaceParticipant(where: WorkspaceParticipantWhereUniqueInput!): WorkspaceParticipant
  deleteManyWorkspaceParticipants(where: WorkspaceParticipantWhereInput): BatchPayload!
  createWorkspaceToken(data: WorkspaceTokenCreateInput!): WorkspaceToken!
  updateWorkspaceToken(data: WorkspaceTokenUpdateInput!, where: WorkspaceTokenWhereUniqueInput!): WorkspaceToken
  updateManyWorkspaceTokens(data: WorkspaceTokenUpdateManyMutationInput!, where: WorkspaceTokenWhereInput): BatchPayload!
  upsertWorkspaceToken(where: WorkspaceTokenWhereUniqueInput!, create: WorkspaceTokenCreateInput!, update: WorkspaceTokenUpdateInput!): WorkspaceToken!
  deleteWorkspaceToken(where: WorkspaceTokenWhereUniqueInput!): WorkspaceToken
  deleteManyWorkspaceTokens(where: WorkspaceTokenWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type ObjectiveLink {
  id: ID!
  course: Course!
  objective: Concept!
  workspace: Workspace!
  text: String
  weight: Int!
  createdBy: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ObjectiveLinkConnection {
  pageInfo: PageInfo!
  edges: [ObjectiveLinkEdge]!
  aggregate: AggregateObjectiveLink!
}

input ObjectiveLinkCreateInput {
  id: ID
  course: CourseCreateOneWithoutObjectiveLinksInput!
  objective: ConceptCreateOneInput!
  workspace: WorkspaceCreateOneWithoutObjectiveLinksInput!
  text: String
  weight: Int
  createdBy: UserCreateOneInput!
}

input ObjectiveLinkCreateManyWithoutCourseInput {
  create: [ObjectiveLinkCreateWithoutCourseInput!]
  connect: [ObjectiveLinkWhereUniqueInput!]
}

input ObjectiveLinkCreateManyWithoutWorkspaceInput {
  create: [ObjectiveLinkCreateWithoutWorkspaceInput!]
  connect: [ObjectiveLinkWhereUniqueInput!]
}

input ObjectiveLinkCreateWithoutCourseInput {
  id: ID
  objective: ConceptCreateOneInput!
  workspace: WorkspaceCreateOneWithoutObjectiveLinksInput!
  text: String
  weight: Int
  createdBy: UserCreateOneInput!
}

input ObjectiveLinkCreateWithoutWorkspaceInput {
  id: ID
  course: CourseCreateOneWithoutObjectiveLinksInput!
  objective: ConceptCreateOneInput!
  text: String
  weight: Int
  createdBy: UserCreateOneInput!
}

type ObjectiveLinkEdge {
  node: ObjectiveLink!
  cursor: String!
}

enum ObjectiveLinkOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  weight_ASC
  weight_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ObjectiveLinkPreviousValues {
  id: ID!
  text: String
  weight: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ObjectiveLinkScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  weight: Int
  weight_not: Int
  weight_in: [Int!]
  weight_not_in: [Int!]
  weight_lt: Int
  weight_lte: Int
  weight_gt: Int
  weight_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ObjectiveLinkScalarWhereInput!]
  OR: [ObjectiveLinkScalarWhereInput!]
  NOT: [ObjectiveLinkScalarWhereInput!]
}

type ObjectiveLinkSubscriptionPayload {
  mutation: MutationType!
  node: ObjectiveLink
  updatedFields: [String!]
  previousValues: ObjectiveLinkPreviousValues
}

input ObjectiveLinkSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ObjectiveLinkWhereInput
  AND: [ObjectiveLinkSubscriptionWhereInput!]
  OR: [ObjectiveLinkSubscriptionWhereInput!]
  NOT: [ObjectiveLinkSubscriptionWhereInput!]
}

input ObjectiveLinkUpdateInput {
  course: CourseUpdateOneRequiredWithoutObjectiveLinksInput
  objective: ConceptUpdateOneRequiredInput
  workspace: WorkspaceUpdateOneRequiredWithoutObjectiveLinksInput
  text: String
  weight: Int
  createdBy: UserUpdateOneRequiredInput
}

input ObjectiveLinkUpdateManyDataInput {
  text: String
  weight: Int
}

input ObjectiveLinkUpdateManyMutationInput {
  text: String
  weight: Int
}

input ObjectiveLinkUpdateManyWithoutCourseInput {
  create: [ObjectiveLinkCreateWithoutCourseInput!]
  delete: [ObjectiveLinkWhereUniqueInput!]
  connect: [ObjectiveLinkWhereUniqueInput!]
  set: [ObjectiveLinkWhereUniqueInput!]
  disconnect: [ObjectiveLinkWhereUniqueInput!]
  update: [ObjectiveLinkUpdateWithWhereUniqueWithoutCourseInput!]
  upsert: [ObjectiveLinkUpsertWithWhereUniqueWithoutCourseInput!]
  deleteMany: [ObjectiveLinkScalarWhereInput!]
  updateMany: [ObjectiveLinkUpdateManyWithWhereNestedInput!]
}

input ObjectiveLinkUpdateManyWithoutWorkspaceInput {
  create: [ObjectiveLinkCreateWithoutWorkspaceInput!]
  delete: [ObjectiveLinkWhereUniqueInput!]
  connect: [ObjectiveLinkWhereUniqueInput!]
  set: [ObjectiveLinkWhereUniqueInput!]
  disconnect: [ObjectiveLinkWhereUniqueInput!]
  update: [ObjectiveLinkUpdateWithWhereUniqueWithoutWorkspaceInput!]
  upsert: [ObjectiveLinkUpsertWithWhereUniqueWithoutWorkspaceInput!]
  deleteMany: [ObjectiveLinkScalarWhereInput!]
  updateMany: [ObjectiveLinkUpdateManyWithWhereNestedInput!]
}

input ObjectiveLinkUpdateManyWithWhereNestedInput {
  where: ObjectiveLinkScalarWhereInput!
  data: ObjectiveLinkUpdateManyDataInput!
}

input ObjectiveLinkUpdateWithoutCourseDataInput {
  objective: ConceptUpdateOneRequiredInput
  workspace: WorkspaceUpdateOneRequiredWithoutObjectiveLinksInput
  text: String
  weight: Int
  createdBy: UserUpdateOneRequiredInput
}

input ObjectiveLinkUpdateWithoutWorkspaceDataInput {
  course: CourseUpdateOneRequiredWithoutObjectiveLinksInput
  objective: ConceptUpdateOneRequiredInput
  text: String
  weight: Int
  createdBy: UserUpdateOneRequiredInput
}

input ObjectiveLinkUpdateWithWhereUniqueWithoutCourseInput {
  where: ObjectiveLinkWhereUniqueInput!
  data: ObjectiveLinkUpdateWithoutCourseDataInput!
}

input ObjectiveLinkUpdateWithWhereUniqueWithoutWorkspaceInput {
  where: ObjectiveLinkWhereUniqueInput!
  data: ObjectiveLinkUpdateWithoutWorkspaceDataInput!
}

input ObjectiveLinkUpsertWithWhereUniqueWithoutCourseInput {
  where: ObjectiveLinkWhereUniqueInput!
  update: ObjectiveLinkUpdateWithoutCourseDataInput!
  create: ObjectiveLinkCreateWithoutCourseInput!
}

input ObjectiveLinkUpsertWithWhereUniqueWithoutWorkspaceInput {
  where: ObjectiveLinkWhereUniqueInput!
  update: ObjectiveLinkUpdateWithoutWorkspaceDataInput!
  create: ObjectiveLinkCreateWithoutWorkspaceInput!
}

input ObjectiveLinkWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  course: CourseWhereInput
  objective: ConceptWhereInput
  workspace: WorkspaceWhereInput
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  weight: Int
  weight_not: Int
  weight_in: [Int!]
  weight_not_in: [Int!]
  weight_lt: Int
  weight_lte: Int
  weight_gt: Int
  weight_gte: Int
  createdBy: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ObjectiveLinkWhereInput!]
  OR: [ObjectiveLinkWhereInput!]
  NOT: [ObjectiveLinkWhereInput!]
}

input ObjectiveLinkWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PointGroup {
  id: ID!
  name: String!
  startDate: DateTime!
  endDate: DateTime!
  maxPoints: Int!
  pointsPerConcept: Float!
  workspace: Workspace!
  course: Course!
  completions(where: CompletionWhereInput, orderBy: CompletionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Completion!]
  createdBy: User
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PointGroupConnection {
  pageInfo: PageInfo!
  edges: [PointGroupEdge]!
  aggregate: AggregatePointGroup!
}

input PointGroupCreateInput {
  id: ID
  name: String!
  startDate: DateTime!
  endDate: DateTime!
  maxPoints: Int
  pointsPerConcept: Float
  workspace: WorkspaceCreateOneWithoutPointGroupsInput!
  course: CourseCreateOneInput!
  completions: CompletionCreateManyWithoutPointGroupInput
  createdBy: UserCreateOneInput
}

input PointGroupCreateManyWithoutWorkspaceInput {
  create: [PointGroupCreateWithoutWorkspaceInput!]
  connect: [PointGroupWhereUniqueInput!]
}

input PointGroupCreateOneWithoutCompletionsInput {
  create: PointGroupCreateWithoutCompletionsInput
  connect: PointGroupWhereUniqueInput
}

input PointGroupCreateWithoutCompletionsInput {
  id: ID
  name: String!
  startDate: DateTime!
  endDate: DateTime!
  maxPoints: Int
  pointsPerConcept: Float
  workspace: WorkspaceCreateOneWithoutPointGroupsInput!
  course: CourseCreateOneInput!
  createdBy: UserCreateOneInput
}

input PointGroupCreateWithoutWorkspaceInput {
  id: ID
  name: String!
  startDate: DateTime!
  endDate: DateTime!
  maxPoints: Int
  pointsPerConcept: Float
  course: CourseCreateOneInput!
  completions: CompletionCreateManyWithoutPointGroupInput
  createdBy: UserCreateOneInput
}

type PointGroupEdge {
  node: PointGroup!
  cursor: String!
}

enum PointGroupOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  startDate_ASC
  startDate_DESC
  endDate_ASC
  endDate_DESC
  maxPoints_ASC
  maxPoints_DESC
  pointsPerConcept_ASC
  pointsPerConcept_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PointGroupPreviousValues {
  id: ID!
  name: String!
  startDate: DateTime!
  endDate: DateTime!
  maxPoints: Int!
  pointsPerConcept: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PointGroupScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  startDate: DateTime
  startDate_not: DateTime
  startDate_in: [DateTime!]
  startDate_not_in: [DateTime!]
  startDate_lt: DateTime
  startDate_lte: DateTime
  startDate_gt: DateTime
  startDate_gte: DateTime
  endDate: DateTime
  endDate_not: DateTime
  endDate_in: [DateTime!]
  endDate_not_in: [DateTime!]
  endDate_lt: DateTime
  endDate_lte: DateTime
  endDate_gt: DateTime
  endDate_gte: DateTime
  maxPoints: Int
  maxPoints_not: Int
  maxPoints_in: [Int!]
  maxPoints_not_in: [Int!]
  maxPoints_lt: Int
  maxPoints_lte: Int
  maxPoints_gt: Int
  maxPoints_gte: Int
  pointsPerConcept: Float
  pointsPerConcept_not: Float
  pointsPerConcept_in: [Float!]
  pointsPerConcept_not_in: [Float!]
  pointsPerConcept_lt: Float
  pointsPerConcept_lte: Float
  pointsPerConcept_gt: Float
  pointsPerConcept_gte: Float
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PointGroupScalarWhereInput!]
  OR: [PointGroupScalarWhereInput!]
  NOT: [PointGroupScalarWhereInput!]
}

type PointGroupSubscriptionPayload {
  mutation: MutationType!
  node: PointGroup
  updatedFields: [String!]
  previousValues: PointGroupPreviousValues
}

input PointGroupSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PointGroupWhereInput
  AND: [PointGroupSubscriptionWhereInput!]
  OR: [PointGroupSubscriptionWhereInput!]
  NOT: [PointGroupSubscriptionWhereInput!]
}

input PointGroupUpdateInput {
  name: String
  startDate: DateTime
  endDate: DateTime
  maxPoints: Int
  pointsPerConcept: Float
  workspace: WorkspaceUpdateOneRequiredWithoutPointGroupsInput
  course: CourseUpdateOneRequiredInput
  completions: CompletionUpdateManyWithoutPointGroupInput
  createdBy: UserUpdateOneInput
}

input PointGroupUpdateManyDataInput {
  name: String
  startDate: DateTime
  endDate: DateTime
  maxPoints: Int
  pointsPerConcept: Float
}

input PointGroupUpdateManyMutationInput {
  name: String
  startDate: DateTime
  endDate: DateTime
  maxPoints: Int
  pointsPerConcept: Float
}

input PointGroupUpdateManyWithoutWorkspaceInput {
  create: [PointGroupCreateWithoutWorkspaceInput!]
  delete: [PointGroupWhereUniqueInput!]
  connect: [PointGroupWhereUniqueInput!]
  set: [PointGroupWhereUniqueInput!]
  disconnect: [PointGroupWhereUniqueInput!]
  update: [PointGroupUpdateWithWhereUniqueWithoutWorkspaceInput!]
  upsert: [PointGroupUpsertWithWhereUniqueWithoutWorkspaceInput!]
  deleteMany: [PointGroupScalarWhereInput!]
  updateMany: [PointGroupUpdateManyWithWhereNestedInput!]
}

input PointGroupUpdateManyWithWhereNestedInput {
  where: PointGroupScalarWhereInput!
  data: PointGroupUpdateManyDataInput!
}

input PointGroupUpdateOneRequiredWithoutCompletionsInput {
  create: PointGroupCreateWithoutCompletionsInput
  update: PointGroupUpdateWithoutCompletionsDataInput
  upsert: PointGroupUpsertWithoutCompletionsInput
  connect: PointGroupWhereUniqueInput
}

input PointGroupUpdateWithoutCompletionsDataInput {
  name: String
  startDate: DateTime
  endDate: DateTime
  maxPoints: Int
  pointsPerConcept: Float
  workspace: WorkspaceUpdateOneRequiredWithoutPointGroupsInput
  course: CourseUpdateOneRequiredInput
  createdBy: UserUpdateOneInput
}

input PointGroupUpdateWithoutWorkspaceDataInput {
  name: String
  startDate: DateTime
  endDate: DateTime
  maxPoints: Int
  pointsPerConcept: Float
  course: CourseUpdateOneRequiredInput
  completions: CompletionUpdateManyWithoutPointGroupInput
  createdBy: UserUpdateOneInput
}

input PointGroupUpdateWithWhereUniqueWithoutWorkspaceInput {
  where: PointGroupWhereUniqueInput!
  data: PointGroupUpdateWithoutWorkspaceDataInput!
}

input PointGroupUpsertWithoutCompletionsInput {
  update: PointGroupUpdateWithoutCompletionsDataInput!
  create: PointGroupCreateWithoutCompletionsInput!
}

input PointGroupUpsertWithWhereUniqueWithoutWorkspaceInput {
  where: PointGroupWhereUniqueInput!
  update: PointGroupUpdateWithoutWorkspaceDataInput!
  create: PointGroupCreateWithoutWorkspaceInput!
}

input PointGroupWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  startDate: DateTime
  startDate_not: DateTime
  startDate_in: [DateTime!]
  startDate_not_in: [DateTime!]
  startDate_lt: DateTime
  startDate_lte: DateTime
  startDate_gt: DateTime
  startDate_gte: DateTime
  endDate: DateTime
  endDate_not: DateTime
  endDate_in: [DateTime!]
  endDate_not_in: [DateTime!]
  endDate_lt: DateTime
  endDate_lte: DateTime
  endDate_gt: DateTime
  endDate_gte: DateTime
  maxPoints: Int
  maxPoints_not: Int
  maxPoints_in: [Int!]
  maxPoints_not_in: [Int!]
  maxPoints_lt: Int
  maxPoints_lte: Int
  maxPoints_gt: Int
  maxPoints_gte: Int
  pointsPerConcept: Float
  pointsPerConcept_not: Float
  pointsPerConcept_in: [Float!]
  pointsPerConcept_not_in: [Float!]
  pointsPerConcept_lt: Float
  pointsPerConcept_lte: Float
  pointsPerConcept_gt: Float
  pointsPerConcept_gte: Float
  workspace: WorkspaceWhereInput
  course: CourseWhereInput
  completions_every: CompletionWhereInput
  completions_some: CompletionWhereInput
  completions_none: CompletionWhereInput
  createdBy: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PointGroupWhereInput!]
  OR: [PointGroupWhereInput!]
  NOT: [PointGroupWhereInput!]
}

input PointGroupWhereUniqueInput {
  id: ID
}

enum Privilege {
  CLONE
  VIEW
  EDIT
  OWNER
}

type Project {
  id: ID!
  name: String!
  workspaces(where: WorkspaceWhereInput, orderBy: WorkspaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Workspace!]
  activeTemplate: Workspace
  templates(where: WorkspaceWhereInput, orderBy: WorkspaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Workspace!]
  merges(where: WorkspaceWhereInput, orderBy: WorkspaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Workspace!]
  participants(where: ProjectParticipantWhereInput, orderBy: ProjectParticipantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectParticipant!]
  tokens(where: ProjectTokenWhereInput, orderBy: ProjectTokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectToken!]
  createdBy: User
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProjectConnection {
  pageInfo: PageInfo!
  edges: [ProjectEdge]!
  aggregate: AggregateProject!
}

input ProjectCreateInput {
  id: ID
  name: String!
  workspaces: WorkspaceCreateManyWithoutSourceProjectInput
  activeTemplate: WorkspaceCreateOneInput
  templates: WorkspaceCreateManyWithoutAsTemplateInput
  merges: WorkspaceCreateManyWithoutAsMergeInput
  participants: ProjectParticipantCreateManyWithoutProjectInput
  tokens: ProjectTokenCreateManyWithoutProjectInput
  createdBy: UserCreateOneInput
}

input ProjectCreateOneWithoutMergesInput {
  create: ProjectCreateWithoutMergesInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateOneWithoutParticipantsInput {
  create: ProjectCreateWithoutParticipantsInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateOneWithoutTemplatesInput {
  create: ProjectCreateWithoutTemplatesInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateOneWithoutTokensInput {
  create: ProjectCreateWithoutTokensInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateOneWithoutWorkspacesInput {
  create: ProjectCreateWithoutWorkspacesInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateWithoutMergesInput {
  id: ID
  name: String!
  workspaces: WorkspaceCreateManyWithoutSourceProjectInput
  activeTemplate: WorkspaceCreateOneInput
  templates: WorkspaceCreateManyWithoutAsTemplateInput
  participants: ProjectParticipantCreateManyWithoutProjectInput
  tokens: ProjectTokenCreateManyWithoutProjectInput
  createdBy: UserCreateOneInput
}

input ProjectCreateWithoutParticipantsInput {
  id: ID
  name: String!
  workspaces: WorkspaceCreateManyWithoutSourceProjectInput
  activeTemplate: WorkspaceCreateOneInput
  templates: WorkspaceCreateManyWithoutAsTemplateInput
  merges: WorkspaceCreateManyWithoutAsMergeInput
  tokens: ProjectTokenCreateManyWithoutProjectInput
  createdBy: UserCreateOneInput
}

input ProjectCreateWithoutTemplatesInput {
  id: ID
  name: String!
  workspaces: WorkspaceCreateManyWithoutSourceProjectInput
  activeTemplate: WorkspaceCreateOneInput
  merges: WorkspaceCreateManyWithoutAsMergeInput
  participants: ProjectParticipantCreateManyWithoutProjectInput
  tokens: ProjectTokenCreateManyWithoutProjectInput
  createdBy: UserCreateOneInput
}

input ProjectCreateWithoutTokensInput {
  id: ID
  name: String!
  workspaces: WorkspaceCreateManyWithoutSourceProjectInput
  activeTemplate: WorkspaceCreateOneInput
  templates: WorkspaceCreateManyWithoutAsTemplateInput
  merges: WorkspaceCreateManyWithoutAsMergeInput
  participants: ProjectParticipantCreateManyWithoutProjectInput
  createdBy: UserCreateOneInput
}

input ProjectCreateWithoutWorkspacesInput {
  id: ID
  name: String!
  activeTemplate: WorkspaceCreateOneInput
  templates: WorkspaceCreateManyWithoutAsTemplateInput
  merges: WorkspaceCreateManyWithoutAsMergeInput
  participants: ProjectParticipantCreateManyWithoutProjectInput
  tokens: ProjectTokenCreateManyWithoutProjectInput
  createdBy: UserCreateOneInput
}

type ProjectEdge {
  node: Project!
  cursor: String!
}

enum ProjectOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProjectParticipant {
  id: ID!
  privilege: Privilege!
  project: Project!
  token: ProjectToken
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProjectParticipantConnection {
  pageInfo: PageInfo!
  edges: [ProjectParticipantEdge]!
  aggregate: AggregateProjectParticipant!
}

input ProjectParticipantCreateInput {
  id: ID
  privilege: Privilege!
  project: ProjectCreateOneWithoutParticipantsInput!
  token: ProjectTokenCreateOneWithoutParticipantsInput
  user: UserCreateOneWithoutProjectParticipationsInput!
}

input ProjectParticipantCreateManyWithoutProjectInput {
  create: [ProjectParticipantCreateWithoutProjectInput!]
  connect: [ProjectParticipantWhereUniqueInput!]
}

input ProjectParticipantCreateManyWithoutTokenInput {
  create: [ProjectParticipantCreateWithoutTokenInput!]
  connect: [ProjectParticipantWhereUniqueInput!]
}

input ProjectParticipantCreateManyWithoutUserInput {
  create: [ProjectParticipantCreateWithoutUserInput!]
  connect: [ProjectParticipantWhereUniqueInput!]
}

input ProjectParticipantCreateWithoutProjectInput {
  id: ID
  privilege: Privilege!
  token: ProjectTokenCreateOneWithoutParticipantsInput
  user: UserCreateOneWithoutProjectParticipationsInput!
}

input ProjectParticipantCreateWithoutTokenInput {
  id: ID
  privilege: Privilege!
  project: ProjectCreateOneWithoutParticipantsInput!
  user: UserCreateOneWithoutProjectParticipationsInput!
}

input ProjectParticipantCreateWithoutUserInput {
  id: ID
  privilege: Privilege!
  project: ProjectCreateOneWithoutParticipantsInput!
  token: ProjectTokenCreateOneWithoutParticipantsInput
}

type ProjectParticipantEdge {
  node: ProjectParticipant!
  cursor: String!
}

enum ProjectParticipantOrderByInput {
  id_ASC
  id_DESC
  privilege_ASC
  privilege_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProjectParticipantPreviousValues {
  id: ID!
  privilege: Privilege!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ProjectParticipantScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  privilege: Privilege
  privilege_not: Privilege
  privilege_in: [Privilege!]
  privilege_not_in: [Privilege!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProjectParticipantScalarWhereInput!]
  OR: [ProjectParticipantScalarWhereInput!]
  NOT: [ProjectParticipantScalarWhereInput!]
}

type ProjectParticipantSubscriptionPayload {
  mutation: MutationType!
  node: ProjectParticipant
  updatedFields: [String!]
  previousValues: ProjectParticipantPreviousValues
}

input ProjectParticipantSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProjectParticipantWhereInput
  AND: [ProjectParticipantSubscriptionWhereInput!]
  OR: [ProjectParticipantSubscriptionWhereInput!]
  NOT: [ProjectParticipantSubscriptionWhereInput!]
}

input ProjectParticipantUpdateInput {
  privilege: Privilege
  project: ProjectUpdateOneRequiredWithoutParticipantsInput
  token: ProjectTokenUpdateOneWithoutParticipantsInput
  user: UserUpdateOneRequiredWithoutProjectParticipationsInput
}

input ProjectParticipantUpdateManyDataInput {
  privilege: Privilege
}

input ProjectParticipantUpdateManyMutationInput {
  privilege: Privilege
}

input ProjectParticipantUpdateManyWithoutProjectInput {
  create: [ProjectParticipantCreateWithoutProjectInput!]
  delete: [ProjectParticipantWhereUniqueInput!]
  connect: [ProjectParticipantWhereUniqueInput!]
  set: [ProjectParticipantWhereUniqueInput!]
  disconnect: [ProjectParticipantWhereUniqueInput!]
  update: [ProjectParticipantUpdateWithWhereUniqueWithoutProjectInput!]
  upsert: [ProjectParticipantUpsertWithWhereUniqueWithoutProjectInput!]
  deleteMany: [ProjectParticipantScalarWhereInput!]
  updateMany: [ProjectParticipantUpdateManyWithWhereNestedInput!]
}

input ProjectParticipantUpdateManyWithoutTokenInput {
  create: [ProjectParticipantCreateWithoutTokenInput!]
  delete: [ProjectParticipantWhereUniqueInput!]
  connect: [ProjectParticipantWhereUniqueInput!]
  set: [ProjectParticipantWhereUniqueInput!]
  disconnect: [ProjectParticipantWhereUniqueInput!]
  update: [ProjectParticipantUpdateWithWhereUniqueWithoutTokenInput!]
  upsert: [ProjectParticipantUpsertWithWhereUniqueWithoutTokenInput!]
  deleteMany: [ProjectParticipantScalarWhereInput!]
  updateMany: [ProjectParticipantUpdateManyWithWhereNestedInput!]
}

input ProjectParticipantUpdateManyWithoutUserInput {
  create: [ProjectParticipantCreateWithoutUserInput!]
  delete: [ProjectParticipantWhereUniqueInput!]
  connect: [ProjectParticipantWhereUniqueInput!]
  set: [ProjectParticipantWhereUniqueInput!]
  disconnect: [ProjectParticipantWhereUniqueInput!]
  update: [ProjectParticipantUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ProjectParticipantUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [ProjectParticipantScalarWhereInput!]
  updateMany: [ProjectParticipantUpdateManyWithWhereNestedInput!]
}

input ProjectParticipantUpdateManyWithWhereNestedInput {
  where: ProjectParticipantScalarWhereInput!
  data: ProjectParticipantUpdateManyDataInput!
}

input ProjectParticipantUpdateWithoutProjectDataInput {
  privilege: Privilege
  token: ProjectTokenUpdateOneWithoutParticipantsInput
  user: UserUpdateOneRequiredWithoutProjectParticipationsInput
}

input ProjectParticipantUpdateWithoutTokenDataInput {
  privilege: Privilege
  project: ProjectUpdateOneRequiredWithoutParticipantsInput
  user: UserUpdateOneRequiredWithoutProjectParticipationsInput
}

input ProjectParticipantUpdateWithoutUserDataInput {
  privilege: Privilege
  project: ProjectUpdateOneRequiredWithoutParticipantsInput
  token: ProjectTokenUpdateOneWithoutParticipantsInput
}

input ProjectParticipantUpdateWithWhereUniqueWithoutProjectInput {
  where: ProjectParticipantWhereUniqueInput!
  data: ProjectParticipantUpdateWithoutProjectDataInput!
}

input ProjectParticipantUpdateWithWhereUniqueWithoutTokenInput {
  where: ProjectParticipantWhereUniqueInput!
  data: ProjectParticipantUpdateWithoutTokenDataInput!
}

input ProjectParticipantUpdateWithWhereUniqueWithoutUserInput {
  where: ProjectParticipantWhereUniqueInput!
  data: ProjectParticipantUpdateWithoutUserDataInput!
}

input ProjectParticipantUpsertWithWhereUniqueWithoutProjectInput {
  where: ProjectParticipantWhereUniqueInput!
  update: ProjectParticipantUpdateWithoutProjectDataInput!
  create: ProjectParticipantCreateWithoutProjectInput!
}

input ProjectParticipantUpsertWithWhereUniqueWithoutTokenInput {
  where: ProjectParticipantWhereUniqueInput!
  update: ProjectParticipantUpdateWithoutTokenDataInput!
  create: ProjectParticipantCreateWithoutTokenInput!
}

input ProjectParticipantUpsertWithWhereUniqueWithoutUserInput {
  where: ProjectParticipantWhereUniqueInput!
  update: ProjectParticipantUpdateWithoutUserDataInput!
  create: ProjectParticipantCreateWithoutUserInput!
}

input ProjectParticipantWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  privilege: Privilege
  privilege_not: Privilege
  privilege_in: [Privilege!]
  privilege_not_in: [Privilege!]
  project: ProjectWhereInput
  token: ProjectTokenWhereInput
  user: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProjectParticipantWhereInput!]
  OR: [ProjectParticipantWhereInput!]
  NOT: [ProjectParticipantWhereInput!]
}

input ProjectParticipantWhereUniqueInput {
  id: ID
}

type ProjectPreviousValues {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProjectSubscriptionPayload {
  mutation: MutationType!
  node: Project
  updatedFields: [String!]
  previousValues: ProjectPreviousValues
}

input ProjectSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProjectWhereInput
  AND: [ProjectSubscriptionWhereInput!]
  OR: [ProjectSubscriptionWhereInput!]
  NOT: [ProjectSubscriptionWhereInput!]
}

type ProjectToken {
  id: ID!
  privilege: Privilege!
  revoked: Boolean!
  project: Project!
  participants(where: ProjectParticipantWhereInput, orderBy: ProjectParticipantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectParticipant!]
}

type ProjectTokenConnection {
  pageInfo: PageInfo!
  edges: [ProjectTokenEdge]!
  aggregate: AggregateProjectToken!
}

input ProjectTokenCreateInput {
  id: ID
  privilege: Privilege!
  revoked: Boolean!
  project: ProjectCreateOneWithoutTokensInput!
  participants: ProjectParticipantCreateManyWithoutTokenInput
}

input ProjectTokenCreateManyWithoutProjectInput {
  create: [ProjectTokenCreateWithoutProjectInput!]
  connect: [ProjectTokenWhereUniqueInput!]
}

input ProjectTokenCreateOneWithoutParticipantsInput {
  create: ProjectTokenCreateWithoutParticipantsInput
  connect: ProjectTokenWhereUniqueInput
}

input ProjectTokenCreateWithoutParticipantsInput {
  id: ID
  privilege: Privilege!
  revoked: Boolean!
  project: ProjectCreateOneWithoutTokensInput!
}

input ProjectTokenCreateWithoutProjectInput {
  id: ID
  privilege: Privilege!
  revoked: Boolean!
  participants: ProjectParticipantCreateManyWithoutTokenInput
}

type ProjectTokenEdge {
  node: ProjectToken!
  cursor: String!
}

enum ProjectTokenOrderByInput {
  id_ASC
  id_DESC
  privilege_ASC
  privilege_DESC
  revoked_ASC
  revoked_DESC
}

type ProjectTokenPreviousValues {
  id: ID!
  privilege: Privilege!
  revoked: Boolean!
}

input ProjectTokenScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  privilege: Privilege
  privilege_not: Privilege
  privilege_in: [Privilege!]
  privilege_not_in: [Privilege!]
  revoked: Boolean
  revoked_not: Boolean
  AND: [ProjectTokenScalarWhereInput!]
  OR: [ProjectTokenScalarWhereInput!]
  NOT: [ProjectTokenScalarWhereInput!]
}

type ProjectTokenSubscriptionPayload {
  mutation: MutationType!
  node: ProjectToken
  updatedFields: [String!]
  previousValues: ProjectTokenPreviousValues
}

input ProjectTokenSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProjectTokenWhereInput
  AND: [ProjectTokenSubscriptionWhereInput!]
  OR: [ProjectTokenSubscriptionWhereInput!]
  NOT: [ProjectTokenSubscriptionWhereInput!]
}

input ProjectTokenUpdateInput {
  privilege: Privilege
  revoked: Boolean
  project: ProjectUpdateOneRequiredWithoutTokensInput
  participants: ProjectParticipantUpdateManyWithoutTokenInput
}

input ProjectTokenUpdateManyDataInput {
  privilege: Privilege
  revoked: Boolean
}

input ProjectTokenUpdateManyMutationInput {
  privilege: Privilege
  revoked: Boolean
}

input ProjectTokenUpdateManyWithoutProjectInput {
  create: [ProjectTokenCreateWithoutProjectInput!]
  delete: [ProjectTokenWhereUniqueInput!]
  connect: [ProjectTokenWhereUniqueInput!]
  set: [ProjectTokenWhereUniqueInput!]
  disconnect: [ProjectTokenWhereUniqueInput!]
  update: [ProjectTokenUpdateWithWhereUniqueWithoutProjectInput!]
  upsert: [ProjectTokenUpsertWithWhereUniqueWithoutProjectInput!]
  deleteMany: [ProjectTokenScalarWhereInput!]
  updateMany: [ProjectTokenUpdateManyWithWhereNestedInput!]
}

input ProjectTokenUpdateManyWithWhereNestedInput {
  where: ProjectTokenScalarWhereInput!
  data: ProjectTokenUpdateManyDataInput!
}

input ProjectTokenUpdateOneWithoutParticipantsInput {
  create: ProjectTokenCreateWithoutParticipantsInput
  update: ProjectTokenUpdateWithoutParticipantsDataInput
  upsert: ProjectTokenUpsertWithoutParticipantsInput
  delete: Boolean
  disconnect: Boolean
  connect: ProjectTokenWhereUniqueInput
}

input ProjectTokenUpdateWithoutParticipantsDataInput {
  privilege: Privilege
  revoked: Boolean
  project: ProjectUpdateOneRequiredWithoutTokensInput
}

input ProjectTokenUpdateWithoutProjectDataInput {
  privilege: Privilege
  revoked: Boolean
  participants: ProjectParticipantUpdateManyWithoutTokenInput
}

input ProjectTokenUpdateWithWhereUniqueWithoutProjectInput {
  where: ProjectTokenWhereUniqueInput!
  data: ProjectTokenUpdateWithoutProjectDataInput!
}

input ProjectTokenUpsertWithoutParticipantsInput {
  update: ProjectTokenUpdateWithoutParticipantsDataInput!
  create: ProjectTokenCreateWithoutParticipantsInput!
}

input ProjectTokenUpsertWithWhereUniqueWithoutProjectInput {
  where: ProjectTokenWhereUniqueInput!
  update: ProjectTokenUpdateWithoutProjectDataInput!
  create: ProjectTokenCreateWithoutProjectInput!
}

input ProjectTokenWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  privilege: Privilege
  privilege_not: Privilege
  privilege_in: [Privilege!]
  privilege_not_in: [Privilege!]
  revoked: Boolean
  revoked_not: Boolean
  project: ProjectWhereInput
  participants_every: ProjectParticipantWhereInput
  participants_some: ProjectParticipantWhereInput
  participants_none: ProjectParticipantWhereInput
  AND: [ProjectTokenWhereInput!]
  OR: [ProjectTokenWhereInput!]
  NOT: [ProjectTokenWhereInput!]
}

input ProjectTokenWhereUniqueInput {
  id: ID
}

input ProjectUpdateInput {
  name: String
  workspaces: WorkspaceUpdateManyWithoutSourceProjectInput
  activeTemplate: WorkspaceUpdateOneInput
  templates: WorkspaceUpdateManyWithoutAsTemplateInput
  merges: WorkspaceUpdateManyWithoutAsMergeInput
  participants: ProjectParticipantUpdateManyWithoutProjectInput
  tokens: ProjectTokenUpdateManyWithoutProjectInput
  createdBy: UserUpdateOneInput
}

input ProjectUpdateManyMutationInput {
  name: String
}

input ProjectUpdateOneRequiredWithoutParticipantsInput {
  create: ProjectCreateWithoutParticipantsInput
  update: ProjectUpdateWithoutParticipantsDataInput
  upsert: ProjectUpsertWithoutParticipantsInput
  connect: ProjectWhereUniqueInput
}

input ProjectUpdateOneRequiredWithoutTokensInput {
  create: ProjectCreateWithoutTokensInput
  update: ProjectUpdateWithoutTokensDataInput
  upsert: ProjectUpsertWithoutTokensInput
  connect: ProjectWhereUniqueInput
}

input ProjectUpdateOneWithoutMergesInput {
  create: ProjectCreateWithoutMergesInput
  update: ProjectUpdateWithoutMergesDataInput
  upsert: ProjectUpsertWithoutMergesInput
  delete: Boolean
  disconnect: Boolean
  connect: ProjectWhereUniqueInput
}

input ProjectUpdateOneWithoutTemplatesInput {
  create: ProjectCreateWithoutTemplatesInput
  update: ProjectUpdateWithoutTemplatesDataInput
  upsert: ProjectUpsertWithoutTemplatesInput
  delete: Boolean
  disconnect: Boolean
  connect: ProjectWhereUniqueInput
}

input ProjectUpdateOneWithoutWorkspacesInput {
  create: ProjectCreateWithoutWorkspacesInput
  update: ProjectUpdateWithoutWorkspacesDataInput
  upsert: ProjectUpsertWithoutWorkspacesInput
  delete: Boolean
  disconnect: Boolean
  connect: ProjectWhereUniqueInput
}

input ProjectUpdateWithoutMergesDataInput {
  name: String
  workspaces: WorkspaceUpdateManyWithoutSourceProjectInput
  activeTemplate: WorkspaceUpdateOneInput
  templates: WorkspaceUpdateManyWithoutAsTemplateInput
  participants: ProjectParticipantUpdateManyWithoutProjectInput
  tokens: ProjectTokenUpdateManyWithoutProjectInput
  createdBy: UserUpdateOneInput
}

input ProjectUpdateWithoutParticipantsDataInput {
  name: String
  workspaces: WorkspaceUpdateManyWithoutSourceProjectInput
  activeTemplate: WorkspaceUpdateOneInput
  templates: WorkspaceUpdateManyWithoutAsTemplateInput
  merges: WorkspaceUpdateManyWithoutAsMergeInput
  tokens: ProjectTokenUpdateManyWithoutProjectInput
  createdBy: UserUpdateOneInput
}

input ProjectUpdateWithoutTemplatesDataInput {
  name: String
  workspaces: WorkspaceUpdateManyWithoutSourceProjectInput
  activeTemplate: WorkspaceUpdateOneInput
  merges: WorkspaceUpdateManyWithoutAsMergeInput
  participants: ProjectParticipantUpdateManyWithoutProjectInput
  tokens: ProjectTokenUpdateManyWithoutProjectInput
  createdBy: UserUpdateOneInput
}

input ProjectUpdateWithoutTokensDataInput {
  name: String
  workspaces: WorkspaceUpdateManyWithoutSourceProjectInput
  activeTemplate: WorkspaceUpdateOneInput
  templates: WorkspaceUpdateManyWithoutAsTemplateInput
  merges: WorkspaceUpdateManyWithoutAsMergeInput
  participants: ProjectParticipantUpdateManyWithoutProjectInput
  createdBy: UserUpdateOneInput
}

input ProjectUpdateWithoutWorkspacesDataInput {
  name: String
  activeTemplate: WorkspaceUpdateOneInput
  templates: WorkspaceUpdateManyWithoutAsTemplateInput
  merges: WorkspaceUpdateManyWithoutAsMergeInput
  participants: ProjectParticipantUpdateManyWithoutProjectInput
  tokens: ProjectTokenUpdateManyWithoutProjectInput
  createdBy: UserUpdateOneInput
}

input ProjectUpsertWithoutMergesInput {
  update: ProjectUpdateWithoutMergesDataInput!
  create: ProjectCreateWithoutMergesInput!
}

input ProjectUpsertWithoutParticipantsInput {
  update: ProjectUpdateWithoutParticipantsDataInput!
  create: ProjectCreateWithoutParticipantsInput!
}

input ProjectUpsertWithoutTemplatesInput {
  update: ProjectUpdateWithoutTemplatesDataInput!
  create: ProjectCreateWithoutTemplatesInput!
}

input ProjectUpsertWithoutTokensInput {
  update: ProjectUpdateWithoutTokensDataInput!
  create: ProjectCreateWithoutTokensInput!
}

input ProjectUpsertWithoutWorkspacesInput {
  update: ProjectUpdateWithoutWorkspacesDataInput!
  create: ProjectCreateWithoutWorkspacesInput!
}

input ProjectWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  workspaces_every: WorkspaceWhereInput
  workspaces_some: WorkspaceWhereInput
  workspaces_none: WorkspaceWhereInput
  activeTemplate: WorkspaceWhereInput
  templates_every: WorkspaceWhereInput
  templates_some: WorkspaceWhereInput
  templates_none: WorkspaceWhereInput
  merges_every: WorkspaceWhereInput
  merges_some: WorkspaceWhereInput
  merges_none: WorkspaceWhereInput
  participants_every: ProjectParticipantWhereInput
  participants_some: ProjectParticipantWhereInput
  participants_none: ProjectParticipantWhereInput
  tokens_every: ProjectTokenWhereInput
  tokens_some: ProjectTokenWhereInput
  tokens_none: ProjectTokenWhereInput
  createdBy: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
}

input ProjectWhereUniqueInput {
  id: ID
}

type Query {
  accessToken(where: AccessTokenWhereUniqueInput!): AccessToken
  accessTokens(where: AccessTokenWhereInput, orderBy: AccessTokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AccessToken]!
  accessTokensConnection(where: AccessTokenWhereInput, orderBy: AccessTokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AccessTokenConnection!
  completion(where: CompletionWhereUniqueInput!): Completion
  completions(where: CompletionWhereInput, orderBy: CompletionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Completion]!
  completionsConnection(where: CompletionWhereInput, orderBy: CompletionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CompletionConnection!
  concept(where: ConceptWhereUniqueInput!): Concept
  concepts(where: ConceptWhereInput, orderBy: ConceptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Concept]!
  conceptsConnection(where: ConceptWhereInput, orderBy: ConceptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ConceptConnection!
  conceptLink(where: ConceptLinkWhereUniqueInput!): ConceptLink
  conceptLinks(where: ConceptLinkWhereInput, orderBy: ConceptLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ConceptLink]!
  conceptLinksConnection(where: ConceptLinkWhereInput, orderBy: ConceptLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ConceptLinkConnection!
  course(where: CourseWhereUniqueInput!): Course
  courses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course]!
  coursesConnection(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CourseConnection!
  courseLink(where: CourseLinkWhereUniqueInput!): CourseLink
  courseLinks(where: CourseLinkWhereInput, orderBy: CourseLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CourseLink]!
  courseLinksConnection(where: CourseLinkWhereInput, orderBy: CourseLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CourseLinkConnection!
  goalLink(where: GoalLinkWhereUniqueInput!): GoalLink
  goalLinks(where: GoalLinkWhereInput, orderBy: GoalLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GoalLink]!
  goalLinksConnection(where: GoalLinkWhereInput, orderBy: GoalLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GoalLinkConnection!
  objectiveLink(where: ObjectiveLinkWhereUniqueInput!): ObjectiveLink
  objectiveLinks(where: ObjectiveLinkWhereInput, orderBy: ObjectiveLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ObjectiveLink]!
  objectiveLinksConnection(where: ObjectiveLinkWhereInput, orderBy: ObjectiveLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ObjectiveLinkConnection!
  pointGroup(where: PointGroupWhereUniqueInput!): PointGroup
  pointGroups(where: PointGroupWhereInput, orderBy: PointGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PointGroup]!
  pointGroupsConnection(where: PointGroupWhereInput, orderBy: PointGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PointGroupConnection!
  project(where: ProjectWhereUniqueInput!): Project
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
  projectsConnection(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!
  projectParticipant(where: ProjectParticipantWhereUniqueInput!): ProjectParticipant
  projectParticipants(where: ProjectParticipantWhereInput, orderBy: ProjectParticipantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectParticipant]!
  projectParticipantsConnection(where: ProjectParticipantWhereInput, orderBy: ProjectParticipantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectParticipantConnection!
  projectToken(where: ProjectTokenWhereUniqueInput!): ProjectToken
  projectTokens(where: ProjectTokenWhereInput, orderBy: ProjectTokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectToken]!
  projectTokensConnection(where: ProjectTokenWhereInput, orderBy: ProjectTokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectTokenConnection!
  tag(where: TagWhereUniqueInput!): Tag
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag]!
  tagsConnection(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TagConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  workspace(where: WorkspaceWhereUniqueInput!): Workspace
  workspaces(where: WorkspaceWhereInput, orderBy: WorkspaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Workspace]!
  workspacesConnection(where: WorkspaceWhereInput, orderBy: WorkspaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkspaceConnection!
  workspaceParticipant(where: WorkspaceParticipantWhereUniqueInput!): WorkspaceParticipant
  workspaceParticipants(where: WorkspaceParticipantWhereInput, orderBy: WorkspaceParticipantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkspaceParticipant]!
  workspaceParticipantsConnection(where: WorkspaceParticipantWhereInput, orderBy: WorkspaceParticipantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkspaceParticipantConnection!
  workspaceToken(where: WorkspaceTokenWhereUniqueInput!): WorkspaceToken
  workspaceTokens(where: WorkspaceTokenWhereInput, orderBy: WorkspaceTokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkspaceToken]!
  workspaceTokensConnection(where: WorkspaceTokenWhereInput, orderBy: WorkspaceTokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkspaceTokenConnection!
  node(id: ID!): Node
}

enum Role {
  GUEST
  STUDENT
  STAFF
  ADMIN
}

type Subscription {
  accessToken(where: AccessTokenSubscriptionWhereInput): AccessTokenSubscriptionPayload
  completion(where: CompletionSubscriptionWhereInput): CompletionSubscriptionPayload
  concept(where: ConceptSubscriptionWhereInput): ConceptSubscriptionPayload
  conceptLink(where: ConceptLinkSubscriptionWhereInput): ConceptLinkSubscriptionPayload
  course(where: CourseSubscriptionWhereInput): CourseSubscriptionPayload
  courseLink(where: CourseLinkSubscriptionWhereInput): CourseLinkSubscriptionPayload
  goalLink(where: GoalLinkSubscriptionWhereInput): GoalLinkSubscriptionPayload
  objectiveLink(where: ObjectiveLinkSubscriptionWhereInput): ObjectiveLinkSubscriptionPayload
  pointGroup(where: PointGroupSubscriptionWhereInput): PointGroupSubscriptionPayload
  project(where: ProjectSubscriptionWhereInput): ProjectSubscriptionPayload
  projectParticipant(where: ProjectParticipantSubscriptionWhereInput): ProjectParticipantSubscriptionPayload
  projectToken(where: ProjectTokenSubscriptionWhereInput): ProjectTokenSubscriptionPayload
  tag(where: TagSubscriptionWhereInput): TagSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  workspace(where: WorkspaceSubscriptionWhereInput): WorkspaceSubscriptionPayload
  workspaceParticipant(where: WorkspaceParticipantSubscriptionWhereInput): WorkspaceParticipantSubscriptionPayload
  workspaceToken(where: WorkspaceTokenSubscriptionWhereInput): WorkspaceTokenSubscriptionPayload
}

type Tag {
  id: ID!
  name: String!
  type: String!
  priority: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TagConnection {
  pageInfo: PageInfo!
  edges: [TagEdge]!
  aggregate: AggregateTag!
}

input TagCreateInput {
  id: ID
  name: String!
  type: String
  priority: Int
}

input TagCreateManyInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type TagEdge {
  node: Tag!
  cursor: String!
}

enum TagOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  type_ASC
  type_DESC
  priority_ASC
  priority_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TagPreviousValues {
  id: ID!
  name: String!
  type: String!
  priority: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input TagScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  priority: Int
  priority_not: Int
  priority_in: [Int!]
  priority_not_in: [Int!]
  priority_lt: Int
  priority_lte: Int
  priority_gt: Int
  priority_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TagScalarWhereInput!]
  OR: [TagScalarWhereInput!]
  NOT: [TagScalarWhereInput!]
}

type TagSubscriptionPayload {
  mutation: MutationType!
  node: Tag
  updatedFields: [String!]
  previousValues: TagPreviousValues
}

input TagSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TagWhereInput
  AND: [TagSubscriptionWhereInput!]
  OR: [TagSubscriptionWhereInput!]
  NOT: [TagSubscriptionWhereInput!]
}

input TagUpdateDataInput {
  name: String
  type: String
  priority: Int
}

input TagUpdateInput {
  name: String
  type: String
  priority: Int
}

input TagUpdateManyDataInput {
  name: String
  type: String
  priority: Int
}

input TagUpdateManyInput {
  create: [TagCreateInput!]
  update: [TagUpdateWithWhereUniqueNestedInput!]
  upsert: [TagUpsertWithWhereUniqueNestedInput!]
  delete: [TagWhereUniqueInput!]
  connect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
  deleteMany: [TagScalarWhereInput!]
  updateMany: [TagUpdateManyWithWhereNestedInput!]
}

input TagUpdateManyMutationInput {
  name: String
  type: String
  priority: Int
}

input TagUpdateManyWithWhereNestedInput {
  where: TagScalarWhereInput!
  data: TagUpdateManyDataInput!
}

input TagUpdateWithWhereUniqueNestedInput {
  where: TagWhereUniqueInput!
  data: TagUpdateDataInput!
}

input TagUpsertWithWhereUniqueNestedInput {
  where: TagWhereUniqueInput!
  update: TagUpdateDataInput!
  create: TagCreateInput!
}

input TagWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  priority: Int
  priority_not: Int
  priority_in: [Int!]
  priority_not_in: [Int!]
  priority_lt: Int
  priority_lte: Int
  priority_gt: Int
  priority_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
}

input TagWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  tmcId: Int
  hakaId: String
  googleId: String
  role: Role!
  deactivated: Boolean!
  tokens(where: AccessTokenWhereInput, orderBy: AccessTokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AccessToken!]
  workspaceParticipations(where: WorkspaceParticipantWhereInput, orderBy: WorkspaceParticipantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkspaceParticipant!]
  projectParticipations(where: ProjectParticipantWhereInput, orderBy: ProjectParticipantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectParticipant!]
  seenGuides: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  tmcId: Int
  hakaId: String
  googleId: String
  role: Role!
  deactivated: Boolean
  tokens: AccessTokenCreateManyWithoutUserInput
  workspaceParticipations: WorkspaceParticipantCreateManyWithoutUserInput
  projectParticipations: ProjectParticipantCreateManyWithoutUserInput
  seenGuides: UserCreateseenGuidesInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutProjectParticipationsInput {
  create: UserCreateWithoutProjectParticipationsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTokensInput {
  create: UserCreateWithoutTokensInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutWorkspaceParticipationsInput {
  create: UserCreateWithoutWorkspaceParticipationsInput
  connect: UserWhereUniqueInput
}

input UserCreateseenGuidesInput {
  set: [String!]
}

input UserCreateWithoutProjectParticipationsInput {
  id: ID
  tmcId: Int
  hakaId: String
  googleId: String
  role: Role!
  deactivated: Boolean
  tokens: AccessTokenCreateManyWithoutUserInput
  workspaceParticipations: WorkspaceParticipantCreateManyWithoutUserInput
  seenGuides: UserCreateseenGuidesInput
}

input UserCreateWithoutTokensInput {
  id: ID
  tmcId: Int
  hakaId: String
  googleId: String
  role: Role!
  deactivated: Boolean
  workspaceParticipations: WorkspaceParticipantCreateManyWithoutUserInput
  projectParticipations: ProjectParticipantCreateManyWithoutUserInput
  seenGuides: UserCreateseenGuidesInput
}

input UserCreateWithoutWorkspaceParticipationsInput {
  id: ID
  tmcId: Int
  hakaId: String
  googleId: String
  role: Role!
  deactivated: Boolean
  tokens: AccessTokenCreateManyWithoutUserInput
  projectParticipations: ProjectParticipantCreateManyWithoutUserInput
  seenGuides: UserCreateseenGuidesInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  tmcId_ASC
  tmcId_DESC
  hakaId_ASC
  hakaId_DESC
  googleId_ASC
  googleId_DESC
  role_ASC
  role_DESC
  deactivated_ASC
  deactivated_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  tmcId: Int
  hakaId: String
  googleId: String
  role: Role!
  deactivated: Boolean!
  seenGuides: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  tmcId: Int
  hakaId: String
  googleId: String
  role: Role
  deactivated: Boolean
  tokens: AccessTokenUpdateManyWithoutUserInput
  workspaceParticipations: WorkspaceParticipantUpdateManyWithoutUserInput
  projectParticipations: ProjectParticipantUpdateManyWithoutUserInput
  seenGuides: UserUpdateseenGuidesInput
}

input UserUpdateInput {
  tmcId: Int
  hakaId: String
  googleId: String
  role: Role
  deactivated: Boolean
  tokens: AccessTokenUpdateManyWithoutUserInput
  workspaceParticipations: WorkspaceParticipantUpdateManyWithoutUserInput
  projectParticipations: ProjectParticipantUpdateManyWithoutUserInput
  seenGuides: UserUpdateseenGuidesInput
}

input UserUpdateManyMutationInput {
  tmcId: Int
  hakaId: String
  googleId: String
  role: Role
  deactivated: Boolean
  seenGuides: UserUpdateseenGuidesInput
}

input UserUpdateOneInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutProjectParticipationsInput {
  create: UserCreateWithoutProjectParticipationsInput
  update: UserUpdateWithoutProjectParticipationsDataInput
  upsert: UserUpsertWithoutProjectParticipationsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutTokensInput {
  create: UserCreateWithoutTokensInput
  update: UserUpdateWithoutTokensDataInput
  upsert: UserUpsertWithoutTokensInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutWorkspaceParticipationsInput {
  create: UserCreateWithoutWorkspaceParticipationsInput
  update: UserUpdateWithoutWorkspaceParticipationsDataInput
  upsert: UserUpsertWithoutWorkspaceParticipationsInput
  connect: UserWhereUniqueInput
}

input UserUpdateseenGuidesInput {
  set: [String!]
}

input UserUpdateWithoutProjectParticipationsDataInput {
  tmcId: Int
  hakaId: String
  googleId: String
  role: Role
  deactivated: Boolean
  tokens: AccessTokenUpdateManyWithoutUserInput
  workspaceParticipations: WorkspaceParticipantUpdateManyWithoutUserInput
  seenGuides: UserUpdateseenGuidesInput
}

input UserUpdateWithoutTokensDataInput {
  tmcId: Int
  hakaId: String
  googleId: String
  role: Role
  deactivated: Boolean
  workspaceParticipations: WorkspaceParticipantUpdateManyWithoutUserInput
  projectParticipations: ProjectParticipantUpdateManyWithoutUserInput
  seenGuides: UserUpdateseenGuidesInput
}

input UserUpdateWithoutWorkspaceParticipationsDataInput {
  tmcId: Int
  hakaId: String
  googleId: String
  role: Role
  deactivated: Boolean
  tokens: AccessTokenUpdateManyWithoutUserInput
  projectParticipations: ProjectParticipantUpdateManyWithoutUserInput
  seenGuides: UserUpdateseenGuidesInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutProjectParticipationsInput {
  update: UserUpdateWithoutProjectParticipationsDataInput!
  create: UserCreateWithoutProjectParticipationsInput!
}

input UserUpsertWithoutTokensInput {
  update: UserUpdateWithoutTokensDataInput!
  create: UserCreateWithoutTokensInput!
}

input UserUpsertWithoutWorkspaceParticipationsInput {
  update: UserUpdateWithoutWorkspaceParticipationsDataInput!
  create: UserCreateWithoutWorkspaceParticipationsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  tmcId: Int
  tmcId_not: Int
  tmcId_in: [Int!]
  tmcId_not_in: [Int!]
  tmcId_lt: Int
  tmcId_lte: Int
  tmcId_gt: Int
  tmcId_gte: Int
  hakaId: String
  hakaId_not: String
  hakaId_in: [String!]
  hakaId_not_in: [String!]
  hakaId_lt: String
  hakaId_lte: String
  hakaId_gt: String
  hakaId_gte: String
  hakaId_contains: String
  hakaId_not_contains: String
  hakaId_starts_with: String
  hakaId_not_starts_with: String
  hakaId_ends_with: String
  hakaId_not_ends_with: String
  googleId: String
  googleId_not: String
  googleId_in: [String!]
  googleId_not_in: [String!]
  googleId_lt: String
  googleId_lte: String
  googleId_gt: String
  googleId_gte: String
  googleId_contains: String
  googleId_not_contains: String
  googleId_starts_with: String
  googleId_not_starts_with: String
  googleId_ends_with: String
  googleId_not_ends_with: String
  role: Role
  role_not: Role
  role_in: [Role!]
  role_not_in: [Role!]
  deactivated: Boolean
  deactivated_not: Boolean
  tokens_every: AccessTokenWhereInput
  tokens_some: AccessTokenWhereInput
  tokens_none: AccessTokenWhereInput
  workspaceParticipations_every: WorkspaceParticipantWhereInput
  workspaceParticipations_some: WorkspaceParticipantWhereInput
  workspaceParticipations_none: WorkspaceParticipantWhereInput
  projectParticipations_every: ProjectParticipantWhereInput
  projectParticipations_some: ProjectParticipantWhereInput
  projectParticipations_none: ProjectParticipantWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  tmcId: Int
  hakaId: String
  googleId: String
}

type Workspace {
  id: ID!
  name: String!
  sourceProject: Project
  sourceTemplate: Workspace
  asMerge: Project
  asTemplate: Project
  clones(where: WorkspaceWhereInput, orderBy: WorkspaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Workspace!]
  courses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course!]
  courseOrder: [ID!]!
  concepts(where: ConceptWhereInput, orderBy: ConceptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Concept!]
  commonConcepts(where: ConceptWhereInput, orderBy: ConceptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Concept!]
  conceptLinks(where: ConceptLinkWhereInput, orderBy: ConceptLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ConceptLink!]
  courseLinks(where: CourseLinkWhereInput, orderBy: CourseLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CourseLink!]
  goals(where: ConceptWhereInput, orderBy: ConceptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Concept!]
  goalLinks(where: GoalLinkWhereInput, orderBy: GoalLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GoalLink!]
  objectiveLinks(where: ObjectiveLinkWhereInput, orderBy: ObjectiveLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ObjectiveLink!]
  participants(where: WorkspaceParticipantWhereInput, orderBy: WorkspaceParticipantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkspaceParticipant!]
  tokens(where: WorkspaceTokenWhereInput, orderBy: WorkspaceTokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkspaceToken!]
  mainCourse: Course
  pointGroups(where: PointGroupWhereInput, orderBy: PointGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PointGroup!]
  courseTags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
  conceptTags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
  goalTags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
  createdBy: User
  createdAt: DateTime!
  updatedAt: DateTime!
}

type WorkspaceConnection {
  pageInfo: PageInfo!
  edges: [WorkspaceEdge]!
  aggregate: AggregateWorkspace!
}

input WorkspaceCreatecourseOrderInput {
  set: [ID!]
}

input WorkspaceCreateInput {
  id: ID
  name: String!
  sourceProject: ProjectCreateOneWithoutWorkspacesInput
  sourceTemplate: WorkspaceCreateOneWithoutClonesInput
  asMerge: ProjectCreateOneWithoutMergesInput
  asTemplate: ProjectCreateOneWithoutTemplatesInput
  clones: WorkspaceCreateManyWithoutSourceTemplateInput
  courses: CourseCreateManyWithoutWorkspaceInput
  courseOrder: WorkspaceCreatecourseOrderInput
  concepts: ConceptCreateManyWithoutWorkspaceInput
  commonConcepts: ConceptCreateManyInput
  conceptLinks: ConceptLinkCreateManyWithoutWorkspaceInput
  courseLinks: CourseLinkCreateManyWithoutWorkspaceInput
  goals: ConceptCreateManyInput
  goalLinks: GoalLinkCreateManyWithoutWorkspaceInput
  objectiveLinks: ObjectiveLinkCreateManyWithoutWorkspaceInput
  participants: WorkspaceParticipantCreateManyWithoutWorkspaceInput
  tokens: WorkspaceTokenCreateManyWithoutWorkspaceInput
  mainCourse: CourseCreateOneInput
  pointGroups: PointGroupCreateManyWithoutWorkspaceInput
  courseTags: TagCreateManyInput
  conceptTags: TagCreateManyInput
  goalTags: TagCreateManyInput
  createdBy: UserCreateOneInput
}

input WorkspaceCreateManyWithoutAsMergeInput {
  create: [WorkspaceCreateWithoutAsMergeInput!]
  connect: [WorkspaceWhereUniqueInput!]
}

input WorkspaceCreateManyWithoutAsTemplateInput {
  create: [WorkspaceCreateWithoutAsTemplateInput!]
  connect: [WorkspaceWhereUniqueInput!]
}

input WorkspaceCreateManyWithoutSourceProjectInput {
  create: [WorkspaceCreateWithoutSourceProjectInput!]
  connect: [WorkspaceWhereUniqueInput!]
}

input WorkspaceCreateManyWithoutSourceTemplateInput {
  create: [WorkspaceCreateWithoutSourceTemplateInput!]
  connect: [WorkspaceWhereUniqueInput!]
}

input WorkspaceCreateOneInput {
  create: WorkspaceCreateInput
  connect: WorkspaceWhereUniqueInput
}

input WorkspaceCreateOneWithoutClonesInput {
  create: WorkspaceCreateWithoutClonesInput
  connect: WorkspaceWhereUniqueInput
}

input WorkspaceCreateOneWithoutConceptLinksInput {
  create: WorkspaceCreateWithoutConceptLinksInput
  connect: WorkspaceWhereUniqueInput
}

input WorkspaceCreateOneWithoutConceptsInput {
  create: WorkspaceCreateWithoutConceptsInput
  connect: WorkspaceWhereUniqueInput
}

input WorkspaceCreateOneWithoutCourseLinksInput {
  create: WorkspaceCreateWithoutCourseLinksInput
  connect: WorkspaceWhereUniqueInput
}

input WorkspaceCreateOneWithoutCoursesInput {
  create: WorkspaceCreateWithoutCoursesInput
  connect: WorkspaceWhereUniqueInput
}

input WorkspaceCreateOneWithoutGoalLinksInput {
  create: WorkspaceCreateWithoutGoalLinksInput
  connect: WorkspaceWhereUniqueInput
}

input WorkspaceCreateOneWithoutObjectiveLinksInput {
  create: WorkspaceCreateWithoutObjectiveLinksInput
  connect: WorkspaceWhereUniqueInput
}

input WorkspaceCreateOneWithoutParticipantsInput {
  create: WorkspaceCreateWithoutParticipantsInput
  connect: WorkspaceWhereUniqueInput
}

input WorkspaceCreateOneWithoutPointGroupsInput {
  create: WorkspaceCreateWithoutPointGroupsInput
  connect: WorkspaceWhereUniqueInput
}

input WorkspaceCreateOneWithoutTokensInput {
  create: WorkspaceCreateWithoutTokensInput
  connect: WorkspaceWhereUniqueInput
}

input WorkspaceCreateWithoutAsMergeInput {
  id: ID
  name: String!
  sourceProject: ProjectCreateOneWithoutWorkspacesInput
  sourceTemplate: WorkspaceCreateOneWithoutClonesInput
  asTemplate: ProjectCreateOneWithoutTemplatesInput
  clones: WorkspaceCreateManyWithoutSourceTemplateInput
  courses: CourseCreateManyWithoutWorkspaceInput
  courseOrder: WorkspaceCreatecourseOrderInput
  concepts: ConceptCreateManyWithoutWorkspaceInput
  commonConcepts: ConceptCreateManyInput
  conceptLinks: ConceptLinkCreateManyWithoutWorkspaceInput
  courseLinks: CourseLinkCreateManyWithoutWorkspaceInput
  goals: ConceptCreateManyInput
  goalLinks: GoalLinkCreateManyWithoutWorkspaceInput
  objectiveLinks: ObjectiveLinkCreateManyWithoutWorkspaceInput
  participants: WorkspaceParticipantCreateManyWithoutWorkspaceInput
  tokens: WorkspaceTokenCreateManyWithoutWorkspaceInput
  mainCourse: CourseCreateOneInput
  pointGroups: PointGroupCreateManyWithoutWorkspaceInput
  courseTags: TagCreateManyInput
  conceptTags: TagCreateManyInput
  goalTags: TagCreateManyInput
  createdBy: UserCreateOneInput
}

input WorkspaceCreateWithoutAsTemplateInput {
  id: ID
  name: String!
  sourceProject: ProjectCreateOneWithoutWorkspacesInput
  sourceTemplate: WorkspaceCreateOneWithoutClonesInput
  asMerge: ProjectCreateOneWithoutMergesInput
  clones: WorkspaceCreateManyWithoutSourceTemplateInput
  courses: CourseCreateManyWithoutWorkspaceInput
  courseOrder: WorkspaceCreatecourseOrderInput
  concepts: ConceptCreateManyWithoutWorkspaceInput
  commonConcepts: ConceptCreateManyInput
  conceptLinks: ConceptLinkCreateManyWithoutWorkspaceInput
  courseLinks: CourseLinkCreateManyWithoutWorkspaceInput
  goals: ConceptCreateManyInput
  goalLinks: GoalLinkCreateManyWithoutWorkspaceInput
  objectiveLinks: ObjectiveLinkCreateManyWithoutWorkspaceInput
  participants: WorkspaceParticipantCreateManyWithoutWorkspaceInput
  tokens: WorkspaceTokenCreateManyWithoutWorkspaceInput
  mainCourse: CourseCreateOneInput
  pointGroups: PointGroupCreateManyWithoutWorkspaceInput
  courseTags: TagCreateManyInput
  conceptTags: TagCreateManyInput
  goalTags: TagCreateManyInput
  createdBy: UserCreateOneInput
}

input WorkspaceCreateWithoutClonesInput {
  id: ID
  name: String!
  sourceProject: ProjectCreateOneWithoutWorkspacesInput
  sourceTemplate: WorkspaceCreateOneWithoutClonesInput
  asMerge: ProjectCreateOneWithoutMergesInput
  asTemplate: ProjectCreateOneWithoutTemplatesInput
  courses: CourseCreateManyWithoutWorkspaceInput
  courseOrder: WorkspaceCreatecourseOrderInput
  concepts: ConceptCreateManyWithoutWorkspaceInput
  commonConcepts: ConceptCreateManyInput
  conceptLinks: ConceptLinkCreateManyWithoutWorkspaceInput
  courseLinks: CourseLinkCreateManyWithoutWorkspaceInput
  goals: ConceptCreateManyInput
  goalLinks: GoalLinkCreateManyWithoutWorkspaceInput
  objectiveLinks: ObjectiveLinkCreateManyWithoutWorkspaceInput
  participants: WorkspaceParticipantCreateManyWithoutWorkspaceInput
  tokens: WorkspaceTokenCreateManyWithoutWorkspaceInput
  mainCourse: CourseCreateOneInput
  pointGroups: PointGroupCreateManyWithoutWorkspaceInput
  courseTags: TagCreateManyInput
  conceptTags: TagCreateManyInput
  goalTags: TagCreateManyInput
  createdBy: UserCreateOneInput
}

input WorkspaceCreateWithoutConceptLinksInput {
  id: ID
  name: String!
  sourceProject: ProjectCreateOneWithoutWorkspacesInput
  sourceTemplate: WorkspaceCreateOneWithoutClonesInput
  asMerge: ProjectCreateOneWithoutMergesInput
  asTemplate: ProjectCreateOneWithoutTemplatesInput
  clones: WorkspaceCreateManyWithoutSourceTemplateInput
  courses: CourseCreateManyWithoutWorkspaceInput
  courseOrder: WorkspaceCreatecourseOrderInput
  concepts: ConceptCreateManyWithoutWorkspaceInput
  commonConcepts: ConceptCreateManyInput
  courseLinks: CourseLinkCreateManyWithoutWorkspaceInput
  goals: ConceptCreateManyInput
  goalLinks: GoalLinkCreateManyWithoutWorkspaceInput
  objectiveLinks: ObjectiveLinkCreateManyWithoutWorkspaceInput
  participants: WorkspaceParticipantCreateManyWithoutWorkspaceInput
  tokens: WorkspaceTokenCreateManyWithoutWorkspaceInput
  mainCourse: CourseCreateOneInput
  pointGroups: PointGroupCreateManyWithoutWorkspaceInput
  courseTags: TagCreateManyInput
  conceptTags: TagCreateManyInput
  goalTags: TagCreateManyInput
  createdBy: UserCreateOneInput
}

input WorkspaceCreateWithoutConceptsInput {
  id: ID
  name: String!
  sourceProject: ProjectCreateOneWithoutWorkspacesInput
  sourceTemplate: WorkspaceCreateOneWithoutClonesInput
  asMerge: ProjectCreateOneWithoutMergesInput
  asTemplate: ProjectCreateOneWithoutTemplatesInput
  clones: WorkspaceCreateManyWithoutSourceTemplateInput
  courses: CourseCreateManyWithoutWorkspaceInput
  courseOrder: WorkspaceCreatecourseOrderInput
  commonConcepts: ConceptCreateManyInput
  conceptLinks: ConceptLinkCreateManyWithoutWorkspaceInput
  courseLinks: CourseLinkCreateManyWithoutWorkspaceInput
  goals: ConceptCreateManyInput
  goalLinks: GoalLinkCreateManyWithoutWorkspaceInput
  objectiveLinks: ObjectiveLinkCreateManyWithoutWorkspaceInput
  participants: WorkspaceParticipantCreateManyWithoutWorkspaceInput
  tokens: WorkspaceTokenCreateManyWithoutWorkspaceInput
  mainCourse: CourseCreateOneInput
  pointGroups: PointGroupCreateManyWithoutWorkspaceInput
  courseTags: TagCreateManyInput
  conceptTags: TagCreateManyInput
  goalTags: TagCreateManyInput
  createdBy: UserCreateOneInput
}

input WorkspaceCreateWithoutCourseLinksInput {
  id: ID
  name: String!
  sourceProject: ProjectCreateOneWithoutWorkspacesInput
  sourceTemplate: WorkspaceCreateOneWithoutClonesInput
  asMerge: ProjectCreateOneWithoutMergesInput
  asTemplate: ProjectCreateOneWithoutTemplatesInput
  clones: WorkspaceCreateManyWithoutSourceTemplateInput
  courses: CourseCreateManyWithoutWorkspaceInput
  courseOrder: WorkspaceCreatecourseOrderInput
  concepts: ConceptCreateManyWithoutWorkspaceInput
  commonConcepts: ConceptCreateManyInput
  conceptLinks: ConceptLinkCreateManyWithoutWorkspaceInput
  goals: ConceptCreateManyInput
  goalLinks: GoalLinkCreateManyWithoutWorkspaceInput
  objectiveLinks: ObjectiveLinkCreateManyWithoutWorkspaceInput
  participants: WorkspaceParticipantCreateManyWithoutWorkspaceInput
  tokens: WorkspaceTokenCreateManyWithoutWorkspaceInput
  mainCourse: CourseCreateOneInput
  pointGroups: PointGroupCreateManyWithoutWorkspaceInput
  courseTags: TagCreateManyInput
  conceptTags: TagCreateManyInput
  goalTags: TagCreateManyInput
  createdBy: UserCreateOneInput
}

input WorkspaceCreateWithoutCoursesInput {
  id: ID
  name: String!
  sourceProject: ProjectCreateOneWithoutWorkspacesInput
  sourceTemplate: WorkspaceCreateOneWithoutClonesInput
  asMerge: ProjectCreateOneWithoutMergesInput
  asTemplate: ProjectCreateOneWithoutTemplatesInput
  clones: WorkspaceCreateManyWithoutSourceTemplateInput
  courseOrder: WorkspaceCreatecourseOrderInput
  concepts: ConceptCreateManyWithoutWorkspaceInput
  commonConcepts: ConceptCreateManyInput
  conceptLinks: ConceptLinkCreateManyWithoutWorkspaceInput
  courseLinks: CourseLinkCreateManyWithoutWorkspaceInput
  goals: ConceptCreateManyInput
  goalLinks: GoalLinkCreateManyWithoutWorkspaceInput
  objectiveLinks: ObjectiveLinkCreateManyWithoutWorkspaceInput
  participants: WorkspaceParticipantCreateManyWithoutWorkspaceInput
  tokens: WorkspaceTokenCreateManyWithoutWorkspaceInput
  mainCourse: CourseCreateOneInput
  pointGroups: PointGroupCreateManyWithoutWorkspaceInput
  courseTags: TagCreateManyInput
  conceptTags: TagCreateManyInput
  goalTags: TagCreateManyInput
  createdBy: UserCreateOneInput
}

input WorkspaceCreateWithoutGoalLinksInput {
  id: ID
  name: String!
  sourceProject: ProjectCreateOneWithoutWorkspacesInput
  sourceTemplate: WorkspaceCreateOneWithoutClonesInput
  asMerge: ProjectCreateOneWithoutMergesInput
  asTemplate: ProjectCreateOneWithoutTemplatesInput
  clones: WorkspaceCreateManyWithoutSourceTemplateInput
  courses: CourseCreateManyWithoutWorkspaceInput
  courseOrder: WorkspaceCreatecourseOrderInput
  concepts: ConceptCreateManyWithoutWorkspaceInput
  commonConcepts: ConceptCreateManyInput
  conceptLinks: ConceptLinkCreateManyWithoutWorkspaceInput
  courseLinks: CourseLinkCreateManyWithoutWorkspaceInput
  goals: ConceptCreateManyInput
  objectiveLinks: ObjectiveLinkCreateManyWithoutWorkspaceInput
  participants: WorkspaceParticipantCreateManyWithoutWorkspaceInput
  tokens: WorkspaceTokenCreateManyWithoutWorkspaceInput
  mainCourse: CourseCreateOneInput
  pointGroups: PointGroupCreateManyWithoutWorkspaceInput
  courseTags: TagCreateManyInput
  conceptTags: TagCreateManyInput
  goalTags: TagCreateManyInput
  createdBy: UserCreateOneInput
}

input WorkspaceCreateWithoutObjectiveLinksInput {
  id: ID
  name: String!
  sourceProject: ProjectCreateOneWithoutWorkspacesInput
  sourceTemplate: WorkspaceCreateOneWithoutClonesInput
  asMerge: ProjectCreateOneWithoutMergesInput
  asTemplate: ProjectCreateOneWithoutTemplatesInput
  clones: WorkspaceCreateManyWithoutSourceTemplateInput
  courses: CourseCreateManyWithoutWorkspaceInput
  courseOrder: WorkspaceCreatecourseOrderInput
  concepts: ConceptCreateManyWithoutWorkspaceInput
  commonConcepts: ConceptCreateManyInput
  conceptLinks: ConceptLinkCreateManyWithoutWorkspaceInput
  courseLinks: CourseLinkCreateManyWithoutWorkspaceInput
  goals: ConceptCreateManyInput
  goalLinks: GoalLinkCreateManyWithoutWorkspaceInput
  participants: WorkspaceParticipantCreateManyWithoutWorkspaceInput
  tokens: WorkspaceTokenCreateManyWithoutWorkspaceInput
  mainCourse: CourseCreateOneInput
  pointGroups: PointGroupCreateManyWithoutWorkspaceInput
  courseTags: TagCreateManyInput
  conceptTags: TagCreateManyInput
  goalTags: TagCreateManyInput
  createdBy: UserCreateOneInput
}

input WorkspaceCreateWithoutParticipantsInput {
  id: ID
  name: String!
  sourceProject: ProjectCreateOneWithoutWorkspacesInput
  sourceTemplate: WorkspaceCreateOneWithoutClonesInput
  asMerge: ProjectCreateOneWithoutMergesInput
  asTemplate: ProjectCreateOneWithoutTemplatesInput
  clones: WorkspaceCreateManyWithoutSourceTemplateInput
  courses: CourseCreateManyWithoutWorkspaceInput
  courseOrder: WorkspaceCreatecourseOrderInput
  concepts: ConceptCreateManyWithoutWorkspaceInput
  commonConcepts: ConceptCreateManyInput
  conceptLinks: ConceptLinkCreateManyWithoutWorkspaceInput
  courseLinks: CourseLinkCreateManyWithoutWorkspaceInput
  goals: ConceptCreateManyInput
  goalLinks: GoalLinkCreateManyWithoutWorkspaceInput
  objectiveLinks: ObjectiveLinkCreateManyWithoutWorkspaceInput
  tokens: WorkspaceTokenCreateManyWithoutWorkspaceInput
  mainCourse: CourseCreateOneInput
  pointGroups: PointGroupCreateManyWithoutWorkspaceInput
  courseTags: TagCreateManyInput
  conceptTags: TagCreateManyInput
  goalTags: TagCreateManyInput
  createdBy: UserCreateOneInput
}

input WorkspaceCreateWithoutPointGroupsInput {
  id: ID
  name: String!
  sourceProject: ProjectCreateOneWithoutWorkspacesInput
  sourceTemplate: WorkspaceCreateOneWithoutClonesInput
  asMerge: ProjectCreateOneWithoutMergesInput
  asTemplate: ProjectCreateOneWithoutTemplatesInput
  clones: WorkspaceCreateManyWithoutSourceTemplateInput
  courses: CourseCreateManyWithoutWorkspaceInput
  courseOrder: WorkspaceCreatecourseOrderInput
  concepts: ConceptCreateManyWithoutWorkspaceInput
  commonConcepts: ConceptCreateManyInput
  conceptLinks: ConceptLinkCreateManyWithoutWorkspaceInput
  courseLinks: CourseLinkCreateManyWithoutWorkspaceInput
  goals: ConceptCreateManyInput
  goalLinks: GoalLinkCreateManyWithoutWorkspaceInput
  objectiveLinks: ObjectiveLinkCreateManyWithoutWorkspaceInput
  participants: WorkspaceParticipantCreateManyWithoutWorkspaceInput
  tokens: WorkspaceTokenCreateManyWithoutWorkspaceInput
  mainCourse: CourseCreateOneInput
  courseTags: TagCreateManyInput
  conceptTags: TagCreateManyInput
  goalTags: TagCreateManyInput
  createdBy: UserCreateOneInput
}

input WorkspaceCreateWithoutSourceProjectInput {
  id: ID
  name: String!
  sourceTemplate: WorkspaceCreateOneWithoutClonesInput
  asMerge: ProjectCreateOneWithoutMergesInput
  asTemplate: ProjectCreateOneWithoutTemplatesInput
  clones: WorkspaceCreateManyWithoutSourceTemplateInput
  courses: CourseCreateManyWithoutWorkspaceInput
  courseOrder: WorkspaceCreatecourseOrderInput
  concepts: ConceptCreateManyWithoutWorkspaceInput
  commonConcepts: ConceptCreateManyInput
  conceptLinks: ConceptLinkCreateManyWithoutWorkspaceInput
  courseLinks: CourseLinkCreateManyWithoutWorkspaceInput
  goals: ConceptCreateManyInput
  goalLinks: GoalLinkCreateManyWithoutWorkspaceInput
  objectiveLinks: ObjectiveLinkCreateManyWithoutWorkspaceInput
  participants: WorkspaceParticipantCreateManyWithoutWorkspaceInput
  tokens: WorkspaceTokenCreateManyWithoutWorkspaceInput
  mainCourse: CourseCreateOneInput
  pointGroups: PointGroupCreateManyWithoutWorkspaceInput
  courseTags: TagCreateManyInput
  conceptTags: TagCreateManyInput
  goalTags: TagCreateManyInput
  createdBy: UserCreateOneInput
}

input WorkspaceCreateWithoutSourceTemplateInput {
  id: ID
  name: String!
  sourceProject: ProjectCreateOneWithoutWorkspacesInput
  asMerge: ProjectCreateOneWithoutMergesInput
  asTemplate: ProjectCreateOneWithoutTemplatesInput
  clones: WorkspaceCreateManyWithoutSourceTemplateInput
  courses: CourseCreateManyWithoutWorkspaceInput
  courseOrder: WorkspaceCreatecourseOrderInput
  concepts: ConceptCreateManyWithoutWorkspaceInput
  commonConcepts: ConceptCreateManyInput
  conceptLinks: ConceptLinkCreateManyWithoutWorkspaceInput
  courseLinks: CourseLinkCreateManyWithoutWorkspaceInput
  goals: ConceptCreateManyInput
  goalLinks: GoalLinkCreateManyWithoutWorkspaceInput
  objectiveLinks: ObjectiveLinkCreateManyWithoutWorkspaceInput
  participants: WorkspaceParticipantCreateManyWithoutWorkspaceInput
  tokens: WorkspaceTokenCreateManyWithoutWorkspaceInput
  mainCourse: CourseCreateOneInput
  pointGroups: PointGroupCreateManyWithoutWorkspaceInput
  courseTags: TagCreateManyInput
  conceptTags: TagCreateManyInput
  goalTags: TagCreateManyInput
  createdBy: UserCreateOneInput
}

input WorkspaceCreateWithoutTokensInput {
  id: ID
  name: String!
  sourceProject: ProjectCreateOneWithoutWorkspacesInput
  sourceTemplate: WorkspaceCreateOneWithoutClonesInput
  asMerge: ProjectCreateOneWithoutMergesInput
  asTemplate: ProjectCreateOneWithoutTemplatesInput
  clones: WorkspaceCreateManyWithoutSourceTemplateInput
  courses: CourseCreateManyWithoutWorkspaceInput
  courseOrder: WorkspaceCreatecourseOrderInput
  concepts: ConceptCreateManyWithoutWorkspaceInput
  commonConcepts: ConceptCreateManyInput
  conceptLinks: ConceptLinkCreateManyWithoutWorkspaceInput
  courseLinks: CourseLinkCreateManyWithoutWorkspaceInput
  goals: ConceptCreateManyInput
  goalLinks: GoalLinkCreateManyWithoutWorkspaceInput
  objectiveLinks: ObjectiveLinkCreateManyWithoutWorkspaceInput
  participants: WorkspaceParticipantCreateManyWithoutWorkspaceInput
  mainCourse: CourseCreateOneInput
  pointGroups: PointGroupCreateManyWithoutWorkspaceInput
  courseTags: TagCreateManyInput
  conceptTags: TagCreateManyInput
  goalTags: TagCreateManyInput
  createdBy: UserCreateOneInput
}

type WorkspaceEdge {
  node: Workspace!
  cursor: String!
}

enum WorkspaceOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type WorkspaceParticipant {
  id: ID!
  privilege: Privilege!
  workspace: Workspace!
  token: WorkspaceToken
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type WorkspaceParticipantConnection {
  pageInfo: PageInfo!
  edges: [WorkspaceParticipantEdge]!
  aggregate: AggregateWorkspaceParticipant!
}

input WorkspaceParticipantCreateInput {
  id: ID
  privilege: Privilege!
  workspace: WorkspaceCreateOneWithoutParticipantsInput!
  token: WorkspaceTokenCreateOneWithoutParticipantsInput
  user: UserCreateOneWithoutWorkspaceParticipationsInput!
}

input WorkspaceParticipantCreateManyWithoutTokenInput {
  create: [WorkspaceParticipantCreateWithoutTokenInput!]
  connect: [WorkspaceParticipantWhereUniqueInput!]
}

input WorkspaceParticipantCreateManyWithoutUserInput {
  create: [WorkspaceParticipantCreateWithoutUserInput!]
  connect: [WorkspaceParticipantWhereUniqueInput!]
}

input WorkspaceParticipantCreateManyWithoutWorkspaceInput {
  create: [WorkspaceParticipantCreateWithoutWorkspaceInput!]
  connect: [WorkspaceParticipantWhereUniqueInput!]
}

input WorkspaceParticipantCreateWithoutTokenInput {
  id: ID
  privilege: Privilege!
  workspace: WorkspaceCreateOneWithoutParticipantsInput!
  user: UserCreateOneWithoutWorkspaceParticipationsInput!
}

input WorkspaceParticipantCreateWithoutUserInput {
  id: ID
  privilege: Privilege!
  workspace: WorkspaceCreateOneWithoutParticipantsInput!
  token: WorkspaceTokenCreateOneWithoutParticipantsInput
}

input WorkspaceParticipantCreateWithoutWorkspaceInput {
  id: ID
  privilege: Privilege!
  token: WorkspaceTokenCreateOneWithoutParticipantsInput
  user: UserCreateOneWithoutWorkspaceParticipationsInput!
}

type WorkspaceParticipantEdge {
  node: WorkspaceParticipant!
  cursor: String!
}

enum WorkspaceParticipantOrderByInput {
  id_ASC
  id_DESC
  privilege_ASC
  privilege_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type WorkspaceParticipantPreviousValues {
  id: ID!
  privilege: Privilege!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input WorkspaceParticipantScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  privilege: Privilege
  privilege_not: Privilege
  privilege_in: [Privilege!]
  privilege_not_in: [Privilege!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [WorkspaceParticipantScalarWhereInput!]
  OR: [WorkspaceParticipantScalarWhereInput!]
  NOT: [WorkspaceParticipantScalarWhereInput!]
}

type WorkspaceParticipantSubscriptionPayload {
  mutation: MutationType!
  node: WorkspaceParticipant
  updatedFields: [String!]
  previousValues: WorkspaceParticipantPreviousValues
}

input WorkspaceParticipantSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WorkspaceParticipantWhereInput
  AND: [WorkspaceParticipantSubscriptionWhereInput!]
  OR: [WorkspaceParticipantSubscriptionWhereInput!]
  NOT: [WorkspaceParticipantSubscriptionWhereInput!]
}

input WorkspaceParticipantUpdateInput {
  privilege: Privilege
  workspace: WorkspaceUpdateOneRequiredWithoutParticipantsInput
  token: WorkspaceTokenUpdateOneWithoutParticipantsInput
  user: UserUpdateOneRequiredWithoutWorkspaceParticipationsInput
}

input WorkspaceParticipantUpdateManyDataInput {
  privilege: Privilege
}

input WorkspaceParticipantUpdateManyMutationInput {
  privilege: Privilege
}

input WorkspaceParticipantUpdateManyWithoutTokenInput {
  create: [WorkspaceParticipantCreateWithoutTokenInput!]
  delete: [WorkspaceParticipantWhereUniqueInput!]
  connect: [WorkspaceParticipantWhereUniqueInput!]
  set: [WorkspaceParticipantWhereUniqueInput!]
  disconnect: [WorkspaceParticipantWhereUniqueInput!]
  update: [WorkspaceParticipantUpdateWithWhereUniqueWithoutTokenInput!]
  upsert: [WorkspaceParticipantUpsertWithWhereUniqueWithoutTokenInput!]
  deleteMany: [WorkspaceParticipantScalarWhereInput!]
  updateMany: [WorkspaceParticipantUpdateManyWithWhereNestedInput!]
}

input WorkspaceParticipantUpdateManyWithoutUserInput {
  create: [WorkspaceParticipantCreateWithoutUserInput!]
  delete: [WorkspaceParticipantWhereUniqueInput!]
  connect: [WorkspaceParticipantWhereUniqueInput!]
  set: [WorkspaceParticipantWhereUniqueInput!]
  disconnect: [WorkspaceParticipantWhereUniqueInput!]
  update: [WorkspaceParticipantUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [WorkspaceParticipantUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [WorkspaceParticipantScalarWhereInput!]
  updateMany: [WorkspaceParticipantUpdateManyWithWhereNestedInput!]
}

input WorkspaceParticipantUpdateManyWithoutWorkspaceInput {
  create: [WorkspaceParticipantCreateWithoutWorkspaceInput!]
  delete: [WorkspaceParticipantWhereUniqueInput!]
  connect: [WorkspaceParticipantWhereUniqueInput!]
  set: [WorkspaceParticipantWhereUniqueInput!]
  disconnect: [WorkspaceParticipantWhereUniqueInput!]
  update: [WorkspaceParticipantUpdateWithWhereUniqueWithoutWorkspaceInput!]
  upsert: [WorkspaceParticipantUpsertWithWhereUniqueWithoutWorkspaceInput!]
  deleteMany: [WorkspaceParticipantScalarWhereInput!]
  updateMany: [WorkspaceParticipantUpdateManyWithWhereNestedInput!]
}

input WorkspaceParticipantUpdateManyWithWhereNestedInput {
  where: WorkspaceParticipantScalarWhereInput!
  data: WorkspaceParticipantUpdateManyDataInput!
}

input WorkspaceParticipantUpdateWithoutTokenDataInput {
  privilege: Privilege
  workspace: WorkspaceUpdateOneRequiredWithoutParticipantsInput
  user: UserUpdateOneRequiredWithoutWorkspaceParticipationsInput
}

input WorkspaceParticipantUpdateWithoutUserDataInput {
  privilege: Privilege
  workspace: WorkspaceUpdateOneRequiredWithoutParticipantsInput
  token: WorkspaceTokenUpdateOneWithoutParticipantsInput
}

input WorkspaceParticipantUpdateWithoutWorkspaceDataInput {
  privilege: Privilege
  token: WorkspaceTokenUpdateOneWithoutParticipantsInput
  user: UserUpdateOneRequiredWithoutWorkspaceParticipationsInput
}

input WorkspaceParticipantUpdateWithWhereUniqueWithoutTokenInput {
  where: WorkspaceParticipantWhereUniqueInput!
  data: WorkspaceParticipantUpdateWithoutTokenDataInput!
}

input WorkspaceParticipantUpdateWithWhereUniqueWithoutUserInput {
  where: WorkspaceParticipantWhereUniqueInput!
  data: WorkspaceParticipantUpdateWithoutUserDataInput!
}

input WorkspaceParticipantUpdateWithWhereUniqueWithoutWorkspaceInput {
  where: WorkspaceParticipantWhereUniqueInput!
  data: WorkspaceParticipantUpdateWithoutWorkspaceDataInput!
}

input WorkspaceParticipantUpsertWithWhereUniqueWithoutTokenInput {
  where: WorkspaceParticipantWhereUniqueInput!
  update: WorkspaceParticipantUpdateWithoutTokenDataInput!
  create: WorkspaceParticipantCreateWithoutTokenInput!
}

input WorkspaceParticipantUpsertWithWhereUniqueWithoutUserInput {
  where: WorkspaceParticipantWhereUniqueInput!
  update: WorkspaceParticipantUpdateWithoutUserDataInput!
  create: WorkspaceParticipantCreateWithoutUserInput!
}

input WorkspaceParticipantUpsertWithWhereUniqueWithoutWorkspaceInput {
  where: WorkspaceParticipantWhereUniqueInput!
  update: WorkspaceParticipantUpdateWithoutWorkspaceDataInput!
  create: WorkspaceParticipantCreateWithoutWorkspaceInput!
}

input WorkspaceParticipantWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  privilege: Privilege
  privilege_not: Privilege
  privilege_in: [Privilege!]
  privilege_not_in: [Privilege!]
  workspace: WorkspaceWhereInput
  token: WorkspaceTokenWhereInput
  user: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [WorkspaceParticipantWhereInput!]
  OR: [WorkspaceParticipantWhereInput!]
  NOT: [WorkspaceParticipantWhereInput!]
}

input WorkspaceParticipantWhereUniqueInput {
  id: ID
}

type WorkspacePreviousValues {
  id: ID!
  name: String!
  courseOrder: [ID!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input WorkspaceScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [WorkspaceScalarWhereInput!]
  OR: [WorkspaceScalarWhereInput!]
  NOT: [WorkspaceScalarWhereInput!]
}

type WorkspaceSubscriptionPayload {
  mutation: MutationType!
  node: Workspace
  updatedFields: [String!]
  previousValues: WorkspacePreviousValues
}

input WorkspaceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WorkspaceWhereInput
  AND: [WorkspaceSubscriptionWhereInput!]
  OR: [WorkspaceSubscriptionWhereInput!]
  NOT: [WorkspaceSubscriptionWhereInput!]
}

type WorkspaceToken {
  id: ID!
  privilege: Privilege!
  revoked: Boolean!
  workspace: Workspace!
  participants(where: WorkspaceParticipantWhereInput, orderBy: WorkspaceParticipantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkspaceParticipant!]
}

type WorkspaceTokenConnection {
  pageInfo: PageInfo!
  edges: [WorkspaceTokenEdge]!
  aggregate: AggregateWorkspaceToken!
}

input WorkspaceTokenCreateInput {
  id: ID
  privilege: Privilege!
  revoked: Boolean!
  workspace: WorkspaceCreateOneWithoutTokensInput!
  participants: WorkspaceParticipantCreateManyWithoutTokenInput
}

input WorkspaceTokenCreateManyWithoutWorkspaceInput {
  create: [WorkspaceTokenCreateWithoutWorkspaceInput!]
  connect: [WorkspaceTokenWhereUniqueInput!]
}

input WorkspaceTokenCreateOneWithoutParticipantsInput {
  create: WorkspaceTokenCreateWithoutParticipantsInput
  connect: WorkspaceTokenWhereUniqueInput
}

input WorkspaceTokenCreateWithoutParticipantsInput {
  id: ID
  privilege: Privilege!
  revoked: Boolean!
  workspace: WorkspaceCreateOneWithoutTokensInput!
}

input WorkspaceTokenCreateWithoutWorkspaceInput {
  id: ID
  privilege: Privilege!
  revoked: Boolean!
  participants: WorkspaceParticipantCreateManyWithoutTokenInput
}

type WorkspaceTokenEdge {
  node: WorkspaceToken!
  cursor: String!
}

enum WorkspaceTokenOrderByInput {
  id_ASC
  id_DESC
  privilege_ASC
  privilege_DESC
  revoked_ASC
  revoked_DESC
}

type WorkspaceTokenPreviousValues {
  id: ID!
  privilege: Privilege!
  revoked: Boolean!
}

input WorkspaceTokenScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  privilege: Privilege
  privilege_not: Privilege
  privilege_in: [Privilege!]
  privilege_not_in: [Privilege!]
  revoked: Boolean
  revoked_not: Boolean
  AND: [WorkspaceTokenScalarWhereInput!]
  OR: [WorkspaceTokenScalarWhereInput!]
  NOT: [WorkspaceTokenScalarWhereInput!]
}

type WorkspaceTokenSubscriptionPayload {
  mutation: MutationType!
  node: WorkspaceToken
  updatedFields: [String!]
  previousValues: WorkspaceTokenPreviousValues
}

input WorkspaceTokenSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WorkspaceTokenWhereInput
  AND: [WorkspaceTokenSubscriptionWhereInput!]
  OR: [WorkspaceTokenSubscriptionWhereInput!]
  NOT: [WorkspaceTokenSubscriptionWhereInput!]
}

input WorkspaceTokenUpdateInput {
  privilege: Privilege
  revoked: Boolean
  workspace: WorkspaceUpdateOneRequiredWithoutTokensInput
  participants: WorkspaceParticipantUpdateManyWithoutTokenInput
}

input WorkspaceTokenUpdateManyDataInput {
  privilege: Privilege
  revoked: Boolean
}

input WorkspaceTokenUpdateManyMutationInput {
  privilege: Privilege
  revoked: Boolean
}

input WorkspaceTokenUpdateManyWithoutWorkspaceInput {
  create: [WorkspaceTokenCreateWithoutWorkspaceInput!]
  delete: [WorkspaceTokenWhereUniqueInput!]
  connect: [WorkspaceTokenWhereUniqueInput!]
  set: [WorkspaceTokenWhereUniqueInput!]
  disconnect: [WorkspaceTokenWhereUniqueInput!]
  update: [WorkspaceTokenUpdateWithWhereUniqueWithoutWorkspaceInput!]
  upsert: [WorkspaceTokenUpsertWithWhereUniqueWithoutWorkspaceInput!]
  deleteMany: [WorkspaceTokenScalarWhereInput!]
  updateMany: [WorkspaceTokenUpdateManyWithWhereNestedInput!]
}

input WorkspaceTokenUpdateManyWithWhereNestedInput {
  where: WorkspaceTokenScalarWhereInput!
  data: WorkspaceTokenUpdateManyDataInput!
}

input WorkspaceTokenUpdateOneWithoutParticipantsInput {
  create: WorkspaceTokenCreateWithoutParticipantsInput
  update: WorkspaceTokenUpdateWithoutParticipantsDataInput
  upsert: WorkspaceTokenUpsertWithoutParticipantsInput
  delete: Boolean
  disconnect: Boolean
  connect: WorkspaceTokenWhereUniqueInput
}

input WorkspaceTokenUpdateWithoutParticipantsDataInput {
  privilege: Privilege
  revoked: Boolean
  workspace: WorkspaceUpdateOneRequiredWithoutTokensInput
}

input WorkspaceTokenUpdateWithoutWorkspaceDataInput {
  privilege: Privilege
  revoked: Boolean
  participants: WorkspaceParticipantUpdateManyWithoutTokenInput
}

input WorkspaceTokenUpdateWithWhereUniqueWithoutWorkspaceInput {
  where: WorkspaceTokenWhereUniqueInput!
  data: WorkspaceTokenUpdateWithoutWorkspaceDataInput!
}

input WorkspaceTokenUpsertWithoutParticipantsInput {
  update: WorkspaceTokenUpdateWithoutParticipantsDataInput!
  create: WorkspaceTokenCreateWithoutParticipantsInput!
}

input WorkspaceTokenUpsertWithWhereUniqueWithoutWorkspaceInput {
  where: WorkspaceTokenWhereUniqueInput!
  update: WorkspaceTokenUpdateWithoutWorkspaceDataInput!
  create: WorkspaceTokenCreateWithoutWorkspaceInput!
}

input WorkspaceTokenWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  privilege: Privilege
  privilege_not: Privilege
  privilege_in: [Privilege!]
  privilege_not_in: [Privilege!]
  revoked: Boolean
  revoked_not: Boolean
  workspace: WorkspaceWhereInput
  participants_every: WorkspaceParticipantWhereInput
  participants_some: WorkspaceParticipantWhereInput
  participants_none: WorkspaceParticipantWhereInput
  AND: [WorkspaceTokenWhereInput!]
  OR: [WorkspaceTokenWhereInput!]
  NOT: [WorkspaceTokenWhereInput!]
}

input WorkspaceTokenWhereUniqueInput {
  id: ID
}

input WorkspaceUpdatecourseOrderInput {
  set: [ID!]
}

input WorkspaceUpdateDataInput {
  name: String
  sourceProject: ProjectUpdateOneWithoutWorkspacesInput
  sourceTemplate: WorkspaceUpdateOneWithoutClonesInput
  asMerge: ProjectUpdateOneWithoutMergesInput
  asTemplate: ProjectUpdateOneWithoutTemplatesInput
  clones: WorkspaceUpdateManyWithoutSourceTemplateInput
  courses: CourseUpdateManyWithoutWorkspaceInput
  courseOrder: WorkspaceUpdatecourseOrderInput
  concepts: ConceptUpdateManyWithoutWorkspaceInput
  commonConcepts: ConceptUpdateManyInput
  conceptLinks: ConceptLinkUpdateManyWithoutWorkspaceInput
  courseLinks: CourseLinkUpdateManyWithoutWorkspaceInput
  goals: ConceptUpdateManyInput
  goalLinks: GoalLinkUpdateManyWithoutWorkspaceInput
  objectiveLinks: ObjectiveLinkUpdateManyWithoutWorkspaceInput
  participants: WorkspaceParticipantUpdateManyWithoutWorkspaceInput
  tokens: WorkspaceTokenUpdateManyWithoutWorkspaceInput
  mainCourse: CourseUpdateOneInput
  pointGroups: PointGroupUpdateManyWithoutWorkspaceInput
  courseTags: TagUpdateManyInput
  conceptTags: TagUpdateManyInput
  goalTags: TagUpdateManyInput
  createdBy: UserUpdateOneInput
}

input WorkspaceUpdateInput {
  name: String
  sourceProject: ProjectUpdateOneWithoutWorkspacesInput
  sourceTemplate: WorkspaceUpdateOneWithoutClonesInput
  asMerge: ProjectUpdateOneWithoutMergesInput
  asTemplate: ProjectUpdateOneWithoutTemplatesInput
  clones: WorkspaceUpdateManyWithoutSourceTemplateInput
  courses: CourseUpdateManyWithoutWorkspaceInput
  courseOrder: WorkspaceUpdatecourseOrderInput
  concepts: ConceptUpdateManyWithoutWorkspaceInput
  commonConcepts: ConceptUpdateManyInput
  conceptLinks: ConceptLinkUpdateManyWithoutWorkspaceInput
  courseLinks: CourseLinkUpdateManyWithoutWorkspaceInput
  goals: ConceptUpdateManyInput
  goalLinks: GoalLinkUpdateManyWithoutWorkspaceInput
  objectiveLinks: ObjectiveLinkUpdateManyWithoutWorkspaceInput
  participants: WorkspaceParticipantUpdateManyWithoutWorkspaceInput
  tokens: WorkspaceTokenUpdateManyWithoutWorkspaceInput
  mainCourse: CourseUpdateOneInput
  pointGroups: PointGroupUpdateManyWithoutWorkspaceInput
  courseTags: TagUpdateManyInput
  conceptTags: TagUpdateManyInput
  goalTags: TagUpdateManyInput
  createdBy: UserUpdateOneInput
}

input WorkspaceUpdateManyDataInput {
  name: String
  courseOrder: WorkspaceUpdatecourseOrderInput
}

input WorkspaceUpdateManyMutationInput {
  name: String
  courseOrder: WorkspaceUpdatecourseOrderInput
}

input WorkspaceUpdateManyWithoutAsMergeInput {
  create: [WorkspaceCreateWithoutAsMergeInput!]
  delete: [WorkspaceWhereUniqueInput!]
  connect: [WorkspaceWhereUniqueInput!]
  set: [WorkspaceWhereUniqueInput!]
  disconnect: [WorkspaceWhereUniqueInput!]
  update: [WorkspaceUpdateWithWhereUniqueWithoutAsMergeInput!]
  upsert: [WorkspaceUpsertWithWhereUniqueWithoutAsMergeInput!]
  deleteMany: [WorkspaceScalarWhereInput!]
  updateMany: [WorkspaceUpdateManyWithWhereNestedInput!]
}

input WorkspaceUpdateManyWithoutAsTemplateInput {
  create: [WorkspaceCreateWithoutAsTemplateInput!]
  delete: [WorkspaceWhereUniqueInput!]
  connect: [WorkspaceWhereUniqueInput!]
  set: [WorkspaceWhereUniqueInput!]
  disconnect: [WorkspaceWhereUniqueInput!]
  update: [WorkspaceUpdateWithWhereUniqueWithoutAsTemplateInput!]
  upsert: [WorkspaceUpsertWithWhereUniqueWithoutAsTemplateInput!]
  deleteMany: [WorkspaceScalarWhereInput!]
  updateMany: [WorkspaceUpdateManyWithWhereNestedInput!]
}

input WorkspaceUpdateManyWithoutSourceProjectInput {
  create: [WorkspaceCreateWithoutSourceProjectInput!]
  delete: [WorkspaceWhereUniqueInput!]
  connect: [WorkspaceWhereUniqueInput!]
  set: [WorkspaceWhereUniqueInput!]
  disconnect: [WorkspaceWhereUniqueInput!]
  update: [WorkspaceUpdateWithWhereUniqueWithoutSourceProjectInput!]
  upsert: [WorkspaceUpsertWithWhereUniqueWithoutSourceProjectInput!]
  deleteMany: [WorkspaceScalarWhereInput!]
  updateMany: [WorkspaceUpdateManyWithWhereNestedInput!]
}

input WorkspaceUpdateManyWithoutSourceTemplateInput {
  create: [WorkspaceCreateWithoutSourceTemplateInput!]
  delete: [WorkspaceWhereUniqueInput!]
  connect: [WorkspaceWhereUniqueInput!]
  set: [WorkspaceWhereUniqueInput!]
  disconnect: [WorkspaceWhereUniqueInput!]
  update: [WorkspaceUpdateWithWhereUniqueWithoutSourceTemplateInput!]
  upsert: [WorkspaceUpsertWithWhereUniqueWithoutSourceTemplateInput!]
  deleteMany: [WorkspaceScalarWhereInput!]
  updateMany: [WorkspaceUpdateManyWithWhereNestedInput!]
}

input WorkspaceUpdateManyWithWhereNestedInput {
  where: WorkspaceScalarWhereInput!
  data: WorkspaceUpdateManyDataInput!
}

input WorkspaceUpdateOneInput {
  create: WorkspaceCreateInput
  update: WorkspaceUpdateDataInput
  upsert: WorkspaceUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: WorkspaceWhereUniqueInput
}

input WorkspaceUpdateOneRequiredWithoutConceptLinksInput {
  create: WorkspaceCreateWithoutConceptLinksInput
  update: WorkspaceUpdateWithoutConceptLinksDataInput
  upsert: WorkspaceUpsertWithoutConceptLinksInput
  connect: WorkspaceWhereUniqueInput
}

input WorkspaceUpdateOneRequiredWithoutConceptsInput {
  create: WorkspaceCreateWithoutConceptsInput
  update: WorkspaceUpdateWithoutConceptsDataInput
  upsert: WorkspaceUpsertWithoutConceptsInput
  connect: WorkspaceWhereUniqueInput
}

input WorkspaceUpdateOneRequiredWithoutCourseLinksInput {
  create: WorkspaceCreateWithoutCourseLinksInput
  update: WorkspaceUpdateWithoutCourseLinksDataInput
  upsert: WorkspaceUpsertWithoutCourseLinksInput
  connect: WorkspaceWhereUniqueInput
}

input WorkspaceUpdateOneRequiredWithoutCoursesInput {
  create: WorkspaceCreateWithoutCoursesInput
  update: WorkspaceUpdateWithoutCoursesDataInput
  upsert: WorkspaceUpsertWithoutCoursesInput
  connect: WorkspaceWhereUniqueInput
}

input WorkspaceUpdateOneRequiredWithoutGoalLinksInput {
  create: WorkspaceCreateWithoutGoalLinksInput
  update: WorkspaceUpdateWithoutGoalLinksDataInput
  upsert: WorkspaceUpsertWithoutGoalLinksInput
  connect: WorkspaceWhereUniqueInput
}

input WorkspaceUpdateOneRequiredWithoutObjectiveLinksInput {
  create: WorkspaceCreateWithoutObjectiveLinksInput
  update: WorkspaceUpdateWithoutObjectiveLinksDataInput
  upsert: WorkspaceUpsertWithoutObjectiveLinksInput
  connect: WorkspaceWhereUniqueInput
}

input WorkspaceUpdateOneRequiredWithoutParticipantsInput {
  create: WorkspaceCreateWithoutParticipantsInput
  update: WorkspaceUpdateWithoutParticipantsDataInput
  upsert: WorkspaceUpsertWithoutParticipantsInput
  connect: WorkspaceWhereUniqueInput
}

input WorkspaceUpdateOneRequiredWithoutPointGroupsInput {
  create: WorkspaceCreateWithoutPointGroupsInput
  update: WorkspaceUpdateWithoutPointGroupsDataInput
  upsert: WorkspaceUpsertWithoutPointGroupsInput
  connect: WorkspaceWhereUniqueInput
}

input WorkspaceUpdateOneRequiredWithoutTokensInput {
  create: WorkspaceCreateWithoutTokensInput
  update: WorkspaceUpdateWithoutTokensDataInput
  upsert: WorkspaceUpsertWithoutTokensInput
  connect: WorkspaceWhereUniqueInput
}

input WorkspaceUpdateOneWithoutClonesInput {
  create: WorkspaceCreateWithoutClonesInput
  update: WorkspaceUpdateWithoutClonesDataInput
  upsert: WorkspaceUpsertWithoutClonesInput
  delete: Boolean
  disconnect: Boolean
  connect: WorkspaceWhereUniqueInput
}

input WorkspaceUpdateWithoutAsMergeDataInput {
  name: String
  sourceProject: ProjectUpdateOneWithoutWorkspacesInput
  sourceTemplate: WorkspaceUpdateOneWithoutClonesInput
  asTemplate: ProjectUpdateOneWithoutTemplatesInput
  clones: WorkspaceUpdateManyWithoutSourceTemplateInput
  courses: CourseUpdateManyWithoutWorkspaceInput
  courseOrder: WorkspaceUpdatecourseOrderInput
  concepts: ConceptUpdateManyWithoutWorkspaceInput
  commonConcepts: ConceptUpdateManyInput
  conceptLinks: ConceptLinkUpdateManyWithoutWorkspaceInput
  courseLinks: CourseLinkUpdateManyWithoutWorkspaceInput
  goals: ConceptUpdateManyInput
  goalLinks: GoalLinkUpdateManyWithoutWorkspaceInput
  objectiveLinks: ObjectiveLinkUpdateManyWithoutWorkspaceInput
  participants: WorkspaceParticipantUpdateManyWithoutWorkspaceInput
  tokens: WorkspaceTokenUpdateManyWithoutWorkspaceInput
  mainCourse: CourseUpdateOneInput
  pointGroups: PointGroupUpdateManyWithoutWorkspaceInput
  courseTags: TagUpdateManyInput
  conceptTags: TagUpdateManyInput
  goalTags: TagUpdateManyInput
  createdBy: UserUpdateOneInput
}

input WorkspaceUpdateWithoutAsTemplateDataInput {
  name: String
  sourceProject: ProjectUpdateOneWithoutWorkspacesInput
  sourceTemplate: WorkspaceUpdateOneWithoutClonesInput
  asMerge: ProjectUpdateOneWithoutMergesInput
  clones: WorkspaceUpdateManyWithoutSourceTemplateInput
  courses: CourseUpdateManyWithoutWorkspaceInput
  courseOrder: WorkspaceUpdatecourseOrderInput
  concepts: ConceptUpdateManyWithoutWorkspaceInput
  commonConcepts: ConceptUpdateManyInput
  conceptLinks: ConceptLinkUpdateManyWithoutWorkspaceInput
  courseLinks: CourseLinkUpdateManyWithoutWorkspaceInput
  goals: ConceptUpdateManyInput
  goalLinks: GoalLinkUpdateManyWithoutWorkspaceInput
  objectiveLinks: ObjectiveLinkUpdateManyWithoutWorkspaceInput
  participants: WorkspaceParticipantUpdateManyWithoutWorkspaceInput
  tokens: WorkspaceTokenUpdateManyWithoutWorkspaceInput
  mainCourse: CourseUpdateOneInput
  pointGroups: PointGroupUpdateManyWithoutWorkspaceInput
  courseTags: TagUpdateManyInput
  conceptTags: TagUpdateManyInput
  goalTags: TagUpdateManyInput
  createdBy: UserUpdateOneInput
}

input WorkspaceUpdateWithoutClonesDataInput {
  name: String
  sourceProject: ProjectUpdateOneWithoutWorkspacesInput
  sourceTemplate: WorkspaceUpdateOneWithoutClonesInput
  asMerge: ProjectUpdateOneWithoutMergesInput
  asTemplate: ProjectUpdateOneWithoutTemplatesInput
  courses: CourseUpdateManyWithoutWorkspaceInput
  courseOrder: WorkspaceUpdatecourseOrderInput
  concepts: ConceptUpdateManyWithoutWorkspaceInput
  commonConcepts: ConceptUpdateManyInput
  conceptLinks: ConceptLinkUpdateManyWithoutWorkspaceInput
  courseLinks: CourseLinkUpdateManyWithoutWorkspaceInput
  goals: ConceptUpdateManyInput
  goalLinks: GoalLinkUpdateManyWithoutWorkspaceInput
  objectiveLinks: ObjectiveLinkUpdateManyWithoutWorkspaceInput
  participants: WorkspaceParticipantUpdateManyWithoutWorkspaceInput
  tokens: WorkspaceTokenUpdateManyWithoutWorkspaceInput
  mainCourse: CourseUpdateOneInput
  pointGroups: PointGroupUpdateManyWithoutWorkspaceInput
  courseTags: TagUpdateManyInput
  conceptTags: TagUpdateManyInput
  goalTags: TagUpdateManyInput
  createdBy: UserUpdateOneInput
}

input WorkspaceUpdateWithoutConceptLinksDataInput {
  name: String
  sourceProject: ProjectUpdateOneWithoutWorkspacesInput
  sourceTemplate: WorkspaceUpdateOneWithoutClonesInput
  asMerge: ProjectUpdateOneWithoutMergesInput
  asTemplate: ProjectUpdateOneWithoutTemplatesInput
  clones: WorkspaceUpdateManyWithoutSourceTemplateInput
  courses: CourseUpdateManyWithoutWorkspaceInput
  courseOrder: WorkspaceUpdatecourseOrderInput
  concepts: ConceptUpdateManyWithoutWorkspaceInput
  commonConcepts: ConceptUpdateManyInput
  courseLinks: CourseLinkUpdateManyWithoutWorkspaceInput
  goals: ConceptUpdateManyInput
  goalLinks: GoalLinkUpdateManyWithoutWorkspaceInput
  objectiveLinks: ObjectiveLinkUpdateManyWithoutWorkspaceInput
  participants: WorkspaceParticipantUpdateManyWithoutWorkspaceInput
  tokens: WorkspaceTokenUpdateManyWithoutWorkspaceInput
  mainCourse: CourseUpdateOneInput
  pointGroups: PointGroupUpdateManyWithoutWorkspaceInput
  courseTags: TagUpdateManyInput
  conceptTags: TagUpdateManyInput
  goalTags: TagUpdateManyInput
  createdBy: UserUpdateOneInput
}

input WorkspaceUpdateWithoutConceptsDataInput {
  name: String
  sourceProject: ProjectUpdateOneWithoutWorkspacesInput
  sourceTemplate: WorkspaceUpdateOneWithoutClonesInput
  asMerge: ProjectUpdateOneWithoutMergesInput
  asTemplate: ProjectUpdateOneWithoutTemplatesInput
  clones: WorkspaceUpdateManyWithoutSourceTemplateInput
  courses: CourseUpdateManyWithoutWorkspaceInput
  courseOrder: WorkspaceUpdatecourseOrderInput
  commonConcepts: ConceptUpdateManyInput
  conceptLinks: ConceptLinkUpdateManyWithoutWorkspaceInput
  courseLinks: CourseLinkUpdateManyWithoutWorkspaceInput
  goals: ConceptUpdateManyInput
  goalLinks: GoalLinkUpdateManyWithoutWorkspaceInput
  objectiveLinks: ObjectiveLinkUpdateManyWithoutWorkspaceInput
  participants: WorkspaceParticipantUpdateManyWithoutWorkspaceInput
  tokens: WorkspaceTokenUpdateManyWithoutWorkspaceInput
  mainCourse: CourseUpdateOneInput
  pointGroups: PointGroupUpdateManyWithoutWorkspaceInput
  courseTags: TagUpdateManyInput
  conceptTags: TagUpdateManyInput
  goalTags: TagUpdateManyInput
  createdBy: UserUpdateOneInput
}

input WorkspaceUpdateWithoutCourseLinksDataInput {
  name: String
  sourceProject: ProjectUpdateOneWithoutWorkspacesInput
  sourceTemplate: WorkspaceUpdateOneWithoutClonesInput
  asMerge: ProjectUpdateOneWithoutMergesInput
  asTemplate: ProjectUpdateOneWithoutTemplatesInput
  clones: WorkspaceUpdateManyWithoutSourceTemplateInput
  courses: CourseUpdateManyWithoutWorkspaceInput
  courseOrder: WorkspaceUpdatecourseOrderInput
  concepts: ConceptUpdateManyWithoutWorkspaceInput
  commonConcepts: ConceptUpdateManyInput
  conceptLinks: ConceptLinkUpdateManyWithoutWorkspaceInput
  goals: ConceptUpdateManyInput
  goalLinks: GoalLinkUpdateManyWithoutWorkspaceInput
  objectiveLinks: ObjectiveLinkUpdateManyWithoutWorkspaceInput
  participants: WorkspaceParticipantUpdateManyWithoutWorkspaceInput
  tokens: WorkspaceTokenUpdateManyWithoutWorkspaceInput
  mainCourse: CourseUpdateOneInput
  pointGroups: PointGroupUpdateManyWithoutWorkspaceInput
  courseTags: TagUpdateManyInput
  conceptTags: TagUpdateManyInput
  goalTags: TagUpdateManyInput
  createdBy: UserUpdateOneInput
}

input WorkspaceUpdateWithoutCoursesDataInput {
  name: String
  sourceProject: ProjectUpdateOneWithoutWorkspacesInput
  sourceTemplate: WorkspaceUpdateOneWithoutClonesInput
  asMerge: ProjectUpdateOneWithoutMergesInput
  asTemplate: ProjectUpdateOneWithoutTemplatesInput
  clones: WorkspaceUpdateManyWithoutSourceTemplateInput
  courseOrder: WorkspaceUpdatecourseOrderInput
  concepts: ConceptUpdateManyWithoutWorkspaceInput
  commonConcepts: ConceptUpdateManyInput
  conceptLinks: ConceptLinkUpdateManyWithoutWorkspaceInput
  courseLinks: CourseLinkUpdateManyWithoutWorkspaceInput
  goals: ConceptUpdateManyInput
  goalLinks: GoalLinkUpdateManyWithoutWorkspaceInput
  objectiveLinks: ObjectiveLinkUpdateManyWithoutWorkspaceInput
  participants: WorkspaceParticipantUpdateManyWithoutWorkspaceInput
  tokens: WorkspaceTokenUpdateManyWithoutWorkspaceInput
  mainCourse: CourseUpdateOneInput
  pointGroups: PointGroupUpdateManyWithoutWorkspaceInput
  courseTags: TagUpdateManyInput
  conceptTags: TagUpdateManyInput
  goalTags: TagUpdateManyInput
  createdBy: UserUpdateOneInput
}

input WorkspaceUpdateWithoutGoalLinksDataInput {
  name: String
  sourceProject: ProjectUpdateOneWithoutWorkspacesInput
  sourceTemplate: WorkspaceUpdateOneWithoutClonesInput
  asMerge: ProjectUpdateOneWithoutMergesInput
  asTemplate: ProjectUpdateOneWithoutTemplatesInput
  clones: WorkspaceUpdateManyWithoutSourceTemplateInput
  courses: CourseUpdateManyWithoutWorkspaceInput
  courseOrder: WorkspaceUpdatecourseOrderInput
  concepts: ConceptUpdateManyWithoutWorkspaceInput
  commonConcepts: ConceptUpdateManyInput
  conceptLinks: ConceptLinkUpdateManyWithoutWorkspaceInput
  courseLinks: CourseLinkUpdateManyWithoutWorkspaceInput
  goals: ConceptUpdateManyInput
  objectiveLinks: ObjectiveLinkUpdateManyWithoutWorkspaceInput
  participants: WorkspaceParticipantUpdateManyWithoutWorkspaceInput
  tokens: WorkspaceTokenUpdateManyWithoutWorkspaceInput
  mainCourse: CourseUpdateOneInput
  pointGroups: PointGroupUpdateManyWithoutWorkspaceInput
  courseTags: TagUpdateManyInput
  conceptTags: TagUpdateManyInput
  goalTags: TagUpdateManyInput
  createdBy: UserUpdateOneInput
}

input WorkspaceUpdateWithoutObjectiveLinksDataInput {
  name: String
  sourceProject: ProjectUpdateOneWithoutWorkspacesInput
  sourceTemplate: WorkspaceUpdateOneWithoutClonesInput
  asMerge: ProjectUpdateOneWithoutMergesInput
  asTemplate: ProjectUpdateOneWithoutTemplatesInput
  clones: WorkspaceUpdateManyWithoutSourceTemplateInput
  courses: CourseUpdateManyWithoutWorkspaceInput
  courseOrder: WorkspaceUpdatecourseOrderInput
  concepts: ConceptUpdateManyWithoutWorkspaceInput
  commonConcepts: ConceptUpdateManyInput
  conceptLinks: ConceptLinkUpdateManyWithoutWorkspaceInput
  courseLinks: CourseLinkUpdateManyWithoutWorkspaceInput
  goals: ConceptUpdateManyInput
  goalLinks: GoalLinkUpdateManyWithoutWorkspaceInput
  participants: WorkspaceParticipantUpdateManyWithoutWorkspaceInput
  tokens: WorkspaceTokenUpdateManyWithoutWorkspaceInput
  mainCourse: CourseUpdateOneInput
  pointGroups: PointGroupUpdateManyWithoutWorkspaceInput
  courseTags: TagUpdateManyInput
  conceptTags: TagUpdateManyInput
  goalTags: TagUpdateManyInput
  createdBy: UserUpdateOneInput
}

input WorkspaceUpdateWithoutParticipantsDataInput {
  name: String
  sourceProject: ProjectUpdateOneWithoutWorkspacesInput
  sourceTemplate: WorkspaceUpdateOneWithoutClonesInput
  asMerge: ProjectUpdateOneWithoutMergesInput
  asTemplate: ProjectUpdateOneWithoutTemplatesInput
  clones: WorkspaceUpdateManyWithoutSourceTemplateInput
  courses: CourseUpdateManyWithoutWorkspaceInput
  courseOrder: WorkspaceUpdatecourseOrderInput
  concepts: ConceptUpdateManyWithoutWorkspaceInput
  commonConcepts: ConceptUpdateManyInput
  conceptLinks: ConceptLinkUpdateManyWithoutWorkspaceInput
  courseLinks: CourseLinkUpdateManyWithoutWorkspaceInput
  goals: ConceptUpdateManyInput
  goalLinks: GoalLinkUpdateManyWithoutWorkspaceInput
  objectiveLinks: ObjectiveLinkUpdateManyWithoutWorkspaceInput
  tokens: WorkspaceTokenUpdateManyWithoutWorkspaceInput
  mainCourse: CourseUpdateOneInput
  pointGroups: PointGroupUpdateManyWithoutWorkspaceInput
  courseTags: TagUpdateManyInput
  conceptTags: TagUpdateManyInput
  goalTags: TagUpdateManyInput
  createdBy: UserUpdateOneInput
}

input WorkspaceUpdateWithoutPointGroupsDataInput {
  name: String
  sourceProject: ProjectUpdateOneWithoutWorkspacesInput
  sourceTemplate: WorkspaceUpdateOneWithoutClonesInput
  asMerge: ProjectUpdateOneWithoutMergesInput
  asTemplate: ProjectUpdateOneWithoutTemplatesInput
  clones: WorkspaceUpdateManyWithoutSourceTemplateInput
  courses: CourseUpdateManyWithoutWorkspaceInput
  courseOrder: WorkspaceUpdatecourseOrderInput
  concepts: ConceptUpdateManyWithoutWorkspaceInput
  commonConcepts: ConceptUpdateManyInput
  conceptLinks: ConceptLinkUpdateManyWithoutWorkspaceInput
  courseLinks: CourseLinkUpdateManyWithoutWorkspaceInput
  goals: ConceptUpdateManyInput
  goalLinks: GoalLinkUpdateManyWithoutWorkspaceInput
  objectiveLinks: ObjectiveLinkUpdateManyWithoutWorkspaceInput
  participants: WorkspaceParticipantUpdateManyWithoutWorkspaceInput
  tokens: WorkspaceTokenUpdateManyWithoutWorkspaceInput
  mainCourse: CourseUpdateOneInput
  courseTags: TagUpdateManyInput
  conceptTags: TagUpdateManyInput
  goalTags: TagUpdateManyInput
  createdBy: UserUpdateOneInput
}

input WorkspaceUpdateWithoutSourceProjectDataInput {
  name: String
  sourceTemplate: WorkspaceUpdateOneWithoutClonesInput
  asMerge: ProjectUpdateOneWithoutMergesInput
  asTemplate: ProjectUpdateOneWithoutTemplatesInput
  clones: WorkspaceUpdateManyWithoutSourceTemplateInput
  courses: CourseUpdateManyWithoutWorkspaceInput
  courseOrder: WorkspaceUpdatecourseOrderInput
  concepts: ConceptUpdateManyWithoutWorkspaceInput
  commonConcepts: ConceptUpdateManyInput
  conceptLinks: ConceptLinkUpdateManyWithoutWorkspaceInput
  courseLinks: CourseLinkUpdateManyWithoutWorkspaceInput
  goals: ConceptUpdateManyInput
  goalLinks: GoalLinkUpdateManyWithoutWorkspaceInput
  objectiveLinks: ObjectiveLinkUpdateManyWithoutWorkspaceInput
  participants: WorkspaceParticipantUpdateManyWithoutWorkspaceInput
  tokens: WorkspaceTokenUpdateManyWithoutWorkspaceInput
  mainCourse: CourseUpdateOneInput
  pointGroups: PointGroupUpdateManyWithoutWorkspaceInput
  courseTags: TagUpdateManyInput
  conceptTags: TagUpdateManyInput
  goalTags: TagUpdateManyInput
  createdBy: UserUpdateOneInput
}

input WorkspaceUpdateWithoutSourceTemplateDataInput {
  name: String
  sourceProject: ProjectUpdateOneWithoutWorkspacesInput
  asMerge: ProjectUpdateOneWithoutMergesInput
  asTemplate: ProjectUpdateOneWithoutTemplatesInput
  clones: WorkspaceUpdateManyWithoutSourceTemplateInput
  courses: CourseUpdateManyWithoutWorkspaceInput
  courseOrder: WorkspaceUpdatecourseOrderInput
  concepts: ConceptUpdateManyWithoutWorkspaceInput
  commonConcepts: ConceptUpdateManyInput
  conceptLinks: ConceptLinkUpdateManyWithoutWorkspaceInput
  courseLinks: CourseLinkUpdateManyWithoutWorkspaceInput
  goals: ConceptUpdateManyInput
  goalLinks: GoalLinkUpdateManyWithoutWorkspaceInput
  objectiveLinks: ObjectiveLinkUpdateManyWithoutWorkspaceInput
  participants: WorkspaceParticipantUpdateManyWithoutWorkspaceInput
  tokens: WorkspaceTokenUpdateManyWithoutWorkspaceInput
  mainCourse: CourseUpdateOneInput
  pointGroups: PointGroupUpdateManyWithoutWorkspaceInput
  courseTags: TagUpdateManyInput
  conceptTags: TagUpdateManyInput
  goalTags: TagUpdateManyInput
  createdBy: UserUpdateOneInput
}

input WorkspaceUpdateWithoutTokensDataInput {
  name: String
  sourceProject: ProjectUpdateOneWithoutWorkspacesInput
  sourceTemplate: WorkspaceUpdateOneWithoutClonesInput
  asMerge: ProjectUpdateOneWithoutMergesInput
  asTemplate: ProjectUpdateOneWithoutTemplatesInput
  clones: WorkspaceUpdateManyWithoutSourceTemplateInput
  courses: CourseUpdateManyWithoutWorkspaceInput
  courseOrder: WorkspaceUpdatecourseOrderInput
  concepts: ConceptUpdateManyWithoutWorkspaceInput
  commonConcepts: ConceptUpdateManyInput
  conceptLinks: ConceptLinkUpdateManyWithoutWorkspaceInput
  courseLinks: CourseLinkUpdateManyWithoutWorkspaceInput
  goals: ConceptUpdateManyInput
  goalLinks: GoalLinkUpdateManyWithoutWorkspaceInput
  objectiveLinks: ObjectiveLinkUpdateManyWithoutWorkspaceInput
  participants: WorkspaceParticipantUpdateManyWithoutWorkspaceInput
  mainCourse: CourseUpdateOneInput
  pointGroups: PointGroupUpdateManyWithoutWorkspaceInput
  courseTags: TagUpdateManyInput
  conceptTags: TagUpdateManyInput
  goalTags: TagUpdateManyInput
  createdBy: UserUpdateOneInput
}

input WorkspaceUpdateWithWhereUniqueWithoutAsMergeInput {
  where: WorkspaceWhereUniqueInput!
  data: WorkspaceUpdateWithoutAsMergeDataInput!
}

input WorkspaceUpdateWithWhereUniqueWithoutAsTemplateInput {
  where: WorkspaceWhereUniqueInput!
  data: WorkspaceUpdateWithoutAsTemplateDataInput!
}

input WorkspaceUpdateWithWhereUniqueWithoutSourceProjectInput {
  where: WorkspaceWhereUniqueInput!
  data: WorkspaceUpdateWithoutSourceProjectDataInput!
}

input WorkspaceUpdateWithWhereUniqueWithoutSourceTemplateInput {
  where: WorkspaceWhereUniqueInput!
  data: WorkspaceUpdateWithoutSourceTemplateDataInput!
}

input WorkspaceUpsertNestedInput {
  update: WorkspaceUpdateDataInput!
  create: WorkspaceCreateInput!
}

input WorkspaceUpsertWithoutClonesInput {
  update: WorkspaceUpdateWithoutClonesDataInput!
  create: WorkspaceCreateWithoutClonesInput!
}

input WorkspaceUpsertWithoutConceptLinksInput {
  update: WorkspaceUpdateWithoutConceptLinksDataInput!
  create: WorkspaceCreateWithoutConceptLinksInput!
}

input WorkspaceUpsertWithoutConceptsInput {
  update: WorkspaceUpdateWithoutConceptsDataInput!
  create: WorkspaceCreateWithoutConceptsInput!
}

input WorkspaceUpsertWithoutCourseLinksInput {
  update: WorkspaceUpdateWithoutCourseLinksDataInput!
  create: WorkspaceCreateWithoutCourseLinksInput!
}

input WorkspaceUpsertWithoutCoursesInput {
  update: WorkspaceUpdateWithoutCoursesDataInput!
  create: WorkspaceCreateWithoutCoursesInput!
}

input WorkspaceUpsertWithoutGoalLinksInput {
  update: WorkspaceUpdateWithoutGoalLinksDataInput!
  create: WorkspaceCreateWithoutGoalLinksInput!
}

input WorkspaceUpsertWithoutObjectiveLinksInput {
  update: WorkspaceUpdateWithoutObjectiveLinksDataInput!
  create: WorkspaceCreateWithoutObjectiveLinksInput!
}

input WorkspaceUpsertWithoutParticipantsInput {
  update: WorkspaceUpdateWithoutParticipantsDataInput!
  create: WorkspaceCreateWithoutParticipantsInput!
}

input WorkspaceUpsertWithoutPointGroupsInput {
  update: WorkspaceUpdateWithoutPointGroupsDataInput!
  create: WorkspaceCreateWithoutPointGroupsInput!
}

input WorkspaceUpsertWithoutTokensInput {
  update: WorkspaceUpdateWithoutTokensDataInput!
  create: WorkspaceCreateWithoutTokensInput!
}

input WorkspaceUpsertWithWhereUniqueWithoutAsMergeInput {
  where: WorkspaceWhereUniqueInput!
  update: WorkspaceUpdateWithoutAsMergeDataInput!
  create: WorkspaceCreateWithoutAsMergeInput!
}

input WorkspaceUpsertWithWhereUniqueWithoutAsTemplateInput {
  where: WorkspaceWhereUniqueInput!
  update: WorkspaceUpdateWithoutAsTemplateDataInput!
  create: WorkspaceCreateWithoutAsTemplateInput!
}

input WorkspaceUpsertWithWhereUniqueWithoutSourceProjectInput {
  where: WorkspaceWhereUniqueInput!
  update: WorkspaceUpdateWithoutSourceProjectDataInput!
  create: WorkspaceCreateWithoutSourceProjectInput!
}

input WorkspaceUpsertWithWhereUniqueWithoutSourceTemplateInput {
  where: WorkspaceWhereUniqueInput!
  update: WorkspaceUpdateWithoutSourceTemplateDataInput!
  create: WorkspaceCreateWithoutSourceTemplateInput!
}

input WorkspaceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  sourceProject: ProjectWhereInput
  sourceTemplate: WorkspaceWhereInput
  asMerge: ProjectWhereInput
  asTemplate: ProjectWhereInput
  clones_every: WorkspaceWhereInput
  clones_some: WorkspaceWhereInput
  clones_none: WorkspaceWhereInput
  courses_every: CourseWhereInput
  courses_some: CourseWhereInput
  courses_none: CourseWhereInput
  concepts_every: ConceptWhereInput
  concepts_some: ConceptWhereInput
  concepts_none: ConceptWhereInput
  commonConcepts_every: ConceptWhereInput
  commonConcepts_some: ConceptWhereInput
  commonConcepts_none: ConceptWhereInput
  conceptLinks_every: ConceptLinkWhereInput
  conceptLinks_some: ConceptLinkWhereInput
  conceptLinks_none: ConceptLinkWhereInput
  courseLinks_every: CourseLinkWhereInput
  courseLinks_some: CourseLinkWhereInput
  courseLinks_none: CourseLinkWhereInput
  goals_every: ConceptWhereInput
  goals_some: ConceptWhereInput
  goals_none: ConceptWhereInput
  goalLinks_every: GoalLinkWhereInput
  goalLinks_some: GoalLinkWhereInput
  goalLinks_none: GoalLinkWhereInput
  objectiveLinks_every: ObjectiveLinkWhereInput
  objectiveLinks_some: ObjectiveLinkWhereInput
  objectiveLinks_none: ObjectiveLinkWhereInput
  participants_every: WorkspaceParticipantWhereInput
  participants_some: WorkspaceParticipantWhereInput
  participants_none: WorkspaceParticipantWhereInput
  tokens_every: WorkspaceTokenWhereInput
  tokens_some: WorkspaceTokenWhereInput
  tokens_none: WorkspaceTokenWhereInput
  mainCourse: CourseWhereInput
  pointGroups_every: PointGroupWhereInput
  pointGroups_some: PointGroupWhereInput
  pointGroups_none: PointGroupWhereInput
  courseTags_every: TagWhereInput
  courseTags_some: TagWhereInput
  courseTags_none: TagWhereInput
  conceptTags_every: TagWhereInput
  conceptTags_some: TagWhereInput
  conceptTags_none: TagWhereInput
  goalTags_every: TagWhereInput
  goalTags_some: TagWhereInput
  goalTags_none: TagWhereInput
  createdBy: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [WorkspaceWhereInput!]
  OR: [WorkspaceWhereInput!]
  NOT: [WorkspaceWhereInput!]
}

input WorkspaceWhereUniqueInput {
  id: ID
}
`
      }
    