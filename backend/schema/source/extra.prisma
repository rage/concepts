type Query {
  # Authentication
  allUsers: [User!]!
  userById(id: ID!): User!
  googleClientId: GoogleClientID!
  hakaLoginUrl: HakaLoginURL!
  currentUser: User

  # Project queries
  allProjects: [Project!]!
  projectsForUser: [ProjectParticipant!]!
  projectById(id: ID!): Project!
  limitedProjectById(id: ID!): LimitedProject!

  # Workspace queries
  allWorkspaces: [Workspace!]!
  workspacesForUser: [WorkspaceParticipant!]!
  workspaceById(id: ID!): Workspace!
  workspaceBySourceTemplate(sourceId: ID!): Workspace!

  # Course queries
  courseById(id: ID!): Course!

  # Sharing
  peekToken(id: ID!): ProjectOrWorkspace!
  workspaceMemberInfo(id: ID!): [MemberInfo]!
  projectMemberInfo(id: ID!): [MemberInfo]!
}

type Mutation {
  # Authentication mutation
  login(tmcToken: String!): AuthPayload!
  loginGoogle(idToken: String!): AuthPayload!
  logout: Boolean!
  mergeUser(accessToken: String!): User!
  disconnectAuth(authType: AuthType!): User!
  createGuest: AuthPayload!
  createLinkToken(linkType: LinkType!, id: ID!, expiry: DateTime): String!

  systemCleanup: CleanResult!

  # User
  updateSeenGuides(id: ID!, seenGuides: [String!]): User!

  # Course mutations
  createCourse(name: String!, workspaceId: ID!, official: Boolean, frozen: Boolean, tags: [TagInput!]): Course!
  deleteCourse(id: ID!): Course!
  updateCourse(id: ID!, name: String, official: Boolean, frozen: Boolean, tags: [TagInput!], conceptOrder: [ID!], objectiveOrder: [ID!]): Course!

  # Concept mutations
  createConcept(name: String!, courseId: ID, workspaceId: ID!, description: String, level: ConceptLevel!, position: String, official: Boolean, frozen: Boolean, tags: [TagInput!]): Concept!
  deleteConcept(id: ID!): DeletedCourseItem!
  updateConcept(id: ID!, name: String, description: String, level: ConceptLevel, position: String, official: Boolean, frozen: Boolean, tags: [TagInput!]): Concept!
  deleteManyConcepts(ids: [ID!]): DeletedCourseItems!
  updateManyConcepts(concepts: [ConceptInput!]): [Concept!]
  createConceptFromCommon(conceptId: ID!, courseId: ID!, description: String, level: ConceptLevel!, official: Boolean, frozen: Boolean, tags: [TagInput!]): Concept!

  # Course link mutations
  createCourseLink(to: ID!, from: ID!, workspaceId: ID!, official: Boolean, text: String): CourseLink!
  updateCourseLink(id: ID!, frozen: Boolean, official: Boolean, text: String): CourseLink!
  deleteCourseLink(id: ID!): DeletedCourseItem!

  # Concept link mutations
  createConceptLink(to: ID!, from: ID!, workspaceId: ID!, official: Boolean, text: String): ConceptLink!
  updateConceptLink(id: ID!, official: Boolean, text: String, level: PrerequisiteLevel): ConceptLink!
  deleteConceptLink(id: ID!): DeletedConceptLink!

  # Goal link mutations
  createGoalLink(goalId: ID!, courseId: ID!, workspaceId: ID!, text: String): GoalLink!
  deleteGoalLink(id: ID!): DeletedGoalLinkItem!

  # Project mutations
  createProject(name: String!): Project!
  updateProject(id: ID!, name: String!): Project!
  deleteProject(id: ID!): Project!
  setActiveTemplate(projectId: ID!, workspaceId: ID!): Project!

  # Workspace mutations
  createWorkspace(name: String!): Workspace!
  deleteWorkspace(id: ID!): Workspace!
  updateWorkspace(id: ID!, name: String, courseOrder: [ID!]): Workspace!

  # Template workspace mutations
  createTemplateWorkspace(projectId: ID!, name: String!): Workspace!
  deleteTemplateWorkspace(id: ID!): Workspace!
  updateTemplateWorkspace(id: ID!, name: String, active: Boolean, courseId: ID): Workspace!
  cloneTemplateWorkspace(projectId: ID!, name: String!): Workspace!

  # PointGroup
  createPointGroup(name: String!, startDate: String!, endDate: String!, maxPoints: Int!,
  pointsPerConcept: Float!, courseId: ID!, workspaceId: ID!): PointGroup!
  deletePointGroup(id: ID!): PointGroup!
  updatePointGroup(id: ID!, name: String, startDate: String, endDate: String, maxPoints: Int,
  pointsPerConcept: Float): PointGroup!

  # Porting mutations
  importData(data: String!): Workspace!

  # Sharing
  createWorkspaceToken(workspaceId: ID!, privilege: Privilege!): WorkspaceToken!
  createProjectToken(projectId: ID!, privilege: Privilege!): ProjectToken!
  deleteToken(id: ID!): ProjectOrWorkspaceToken!
  useToken(id: ID!): ProjectOrWorkspaceParticipant!
  updateParticipant(type: Type!, id: ID!, privilege: Privilege!): IDAndPrivilege!
  deleteParticipant(type: Type!, id: ID!): ID!

  # Merging
  mergeWorkspaces(projectId: ID!): Workspace!
  mergeConcepts(workspaceId: ID!, courseId: ID!, conceptIds: [ID!]!, name: String, description: String, official: Boolean, frozen: Boolean, tags: [TagInput!]): Concept!
}

type Subscription {
  # Concept subscriptions
  conceptCreated(workspaceId: ID!): Concept!
  conceptUpdated(workspaceId: ID!): Concept!
  conceptDeleted(workspaceId: ID!): DeletedCourseItem!
  manyConceptsUpdated(workspaceId: ID!): [Concept!]!
  manyConceptsDeleted(workspaceId: ID!): DeletedCourseItems!

  # ConceptLinks subscriptions
  conceptLinkCreated(workspaceId: ID!): ConceptLink!
  conceptLinkDeleted(workspaceId: ID!): DeletedConceptLink!

  # Courses subscriptions
  courseCreated(workspaceId: ID!): Course!
  courseUpdated(workspaceId: ID!): Course!
  courseDeleted(workspaceId: ID!): Course!

  # CoursesLinks subscriptions
  courseLinkCreated(workspaceId: ID!): CourseLink!
  courseLinkUpdated(workspaceId: ID!): CourseLink!
  courseLinkDeleted(workspaceId: ID!): DeletedCourseItem!

  # GoalLink subscriptions
  goalLinkCreated(workspaceId: ID!): GoalLink!
  goalLinkDeleted(workspaceId: ID!): DeletedGoalLinkItem!

  # Workspaces subscriptions
  projectWorkspaceCreated(projectId: ID!): Workspace!
  projectWorkspaceUpdated(projectId: ID!): WorkspaceUpdate!
  projectWorkspaceDeleted(projectId: ID!): Workspace!

  workspaceUpdated(workspaceId: ID!): WorkspaceUpdate!
  workspaceDeleted(workspaceId: ID!): Workspace!

  # Member subscriptions
  workspaceMemberCreated(workspaceId: ID!): WorkspaceParticipant!
  workspaceMemberDeleted(workspaceId: ID!): WorkspaceParticipant!
  workspaceMemberUpdated(workspaceId: ID!): WorkspaceParticipant!

  projectMemberCreated(projectId: ID!): ProjectParticipant!
  projectMemberDeleted(projectId: ID!): ProjectParticipant!
  projectMemberUpdated(projectId: ID!): ProjectParticipant!
}

type CleanResult {
    deactivatedCount: Int!
    deletedParticipationCount: Int!
    deletedWorkspaceCount: Int!
}

enum LinkType {
  EXPORT_WORKSPACE
  EXPORT_POINTS
}

union ProjectOrWorkspace = Workspace | Project | LimitedProject
union ProjectOrWorkspaceParticipant = WorkspaceParticipant | ProjectParticipant
union ProjectOrWorkspaceToken = WorkspaceToken | ProjectToken

type WorkspaceUpdate {
  id: ID!
  name: String
  courseOrder: [ID!]
}

input ConceptInput {
  id: ID!
  name: String
  description: String
  level: ConceptLevel
  position: String
  official: Boolean
  frozen: Boolean
  tags: [TagInput!]
}

type IDAndPrivilege {
  id: ID!
  privilege: Privilege!
}

enum Type {
  PROJECT
  WORKSPACE
}

type LimitedProject {
  id: ID!
  name: String!
  activeTemplateId: ID!
  participants: [ProjectParticipant!]!
}

type DeletedCourseItem {
  id: ID!
  courseId: ID
  level: ConceptLevel!
}

type DeletedCourseItems {
  ids: [ID!]!
  courseId: ID!
}

type DeletedGoalLinkItem {
  id: ID!
  workspaceId: ID!
  courseId: ID!
}

type DeletedConceptLink {
  id: ID!
  courseId: ID!
  conceptId: ID!
}

enum AuthType {
  TMC
  HAKA
  GOOGLE
}

type AuthPayload {
  token: String!
  user: User!
}

type GoogleClientID {
  enabled: Boolean!
  clientId: String
}

type HakaLoginURL {
  enabled: Boolean!
  url: String
}

input TagInput {
  id: ID
  name: String!
  type: String
  priority: Int
}

type MemberInfo {
  participantId: ID!
  id: ID!
  role: Role
  privilege: Privilege
  token: LimitedToken
  tmcId: ID
  name: String
  email: String
  username: String
}

type LimitedToken {
  id: ID!
  privilege: Privilege!
  revoked: Boolean!
}
